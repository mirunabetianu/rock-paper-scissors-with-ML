{"ast":null,"code":"/** Constants and utilities for data type */\n\n/** Data type based on level of measurement */\nexport var TYPE_INDEX = {\n  quantitative: 1,\n  ordinal: 1,\n  temporal: 1,\n  nominal: 1,\n  geojson: 1\n};\nexport function isType(t) {\n  return !!TYPE_INDEX[t];\n}\nexport var QUANTITATIVE = 'quantitative';\nexport var ORDINAL = 'ordinal';\nexport var TEMPORAL = 'temporal';\nexport var NOMINAL = 'nominal';\nexport var GEOJSON = 'geojson';\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\n\nexport function getFullName(type) {\n  if (type) {\n    type = type.toLowerCase();\n\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n\n      case GEOJSON:\n        return 'geojson';\n    }\n  } // If we get invalid input, return undefined type.\n\n\n  return undefined;\n}","map":null,"metadata":{},"sourceType":"module"}