{"ast":null,"code":"import { identity, toBoolean, toDate, toNumber, toString } from 'vega-util';\nexport var typeParsers = {\n  boolean: toBoolean,\n  integer: toNumber,\n  number: toNumber,\n  date: toDate,\n  string: toString,\n  unknown: identity\n};\nvar typeTests = [isBoolean, isInteger, isNumber, isDate];\nvar typeList = ['boolean', 'integer', 'number', 'date'];\nexport function inferType(values, field) {\n  if (!values || !values.length) return 'unknown';\n  var value,\n      i,\n      j,\n      t = 0,\n      n = values.length,\n      m = typeTests.length,\n      a = typeTests.map(function (_, i) {\n    return i + 1;\n  });\n\n  for (i = 0, n = values.length; i < n; ++i) {\n    value = field ? values[i][field] : values[i];\n\n    for (j = 0; j < m; ++j) {\n      if (a[j] && isValid(value) && !typeTests[j](value)) {\n        a[j] = 0;\n        ++t;\n        if (t === typeTests.length) return 'string';\n      }\n    }\n  }\n\n  t = a.reduce(function (u, v) {\n    return u === 0 ? v : u;\n  }, 0) - 1;\n  return typeList[t];\n}\nexport function inferTypes(data, fields) {\n  return fields.reduce(function (types, field) {\n    types[field] = inferType(data, field);\n    return types;\n  }, {});\n} // -- Type Checks ----\n\nfunction isValid(_) {\n  return _ != null && _ === _;\n}\n\nfunction isBoolean(_) {\n  return _ === 'true' || _ === 'false' || _ === true || _ === false;\n}\n\nfunction isDate(_) {\n  return !Number.isNaN(Date.parse(_));\n}\n\nfunction isNumber(_) {\n  return !Number.isNaN(+_) && !(_ instanceof Date);\n}\n\nfunction isInteger(_) {\n  return isNumber(_) && Number.isInteger(+_);\n}","map":null,"metadata":{},"sourceType":"module"}