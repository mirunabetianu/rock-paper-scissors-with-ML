{"ast":null,"code":"import _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { isValueDef } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport var GeoJSONNode =\n/*#__PURE__*/\nfunction (_DataFlowNode) {\n  _inherits(GeoJSONNode, _DataFlowNode);\n\n  function GeoJSONNode(parent, fields, geojson, signal) {\n    var _this;\n\n    _classCallCheck(this, GeoJSONNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GeoJSONNode).call(this, parent));\n    _this.fields = fields;\n    _this.geojson = geojson;\n    _this.signal = signal;\n    return _this;\n  }\n\n  _createClass(GeoJSONNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var _a;\n\n      var fields = (_a = this.fields, _a !== null && _a !== void 0 ? _a : []).filter(isString);\n      return new Set([].concat(_toConsumableArray(this.geojson ? [this.geojson] : []), _toConsumableArray(fields)));\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set();\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"GeoJSON \".concat(this.geojson, \" \").concat(this.signal, \" \").concat(_hash(this.fields));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      return Object.assign(Object.assign(Object.assign({\n        type: 'geojson'\n      }, this.fields ? {\n        fields: this.fields\n      } : {}), this.geojson ? {\n        geojson: this.geojson\n      } : {}), {\n        signal: this.signal\n      });\n    }\n  }], [{\n    key: \"parseAll\",\n    value: function parseAll(parent, model) {\n      if (model.component.projection && !model.component.projection.isFit) {\n        return parent;\n      }\n\n      var geoJsonCounter = 0;\n\n      for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {\n        var coordinates = _arr[_i];\n        var pair = coordinates.map(function (channel) {\n          return model.channelHasField(channel) ? model.fieldDef(channel).field : isValueDef(model.encoding[channel]) ? {\n            expr: model.encoding[channel].value + ''\n          } : undefined;\n        });\n\n        if (pair[0] || pair[1]) {\n          parent = new GeoJSONNode(parent, pair, null, model.getName(\"geojson_\".concat(geoJsonCounter++)));\n        }\n      }\n\n      if (model.channelHasField(SHAPE)) {\n        var fieldDef = model.fieldDef(SHAPE);\n\n        if (fieldDef.type === GEOJSON) {\n          parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(\"geojson_\".concat(geoJsonCounter++)));\n        }\n      }\n\n      return parent;\n    }\n  }]);\n\n  return GeoJSONNode;\n}(DataFlowNode);","map":null,"metadata":{},"sourceType":"module"}