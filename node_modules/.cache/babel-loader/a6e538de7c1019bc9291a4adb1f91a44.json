{"ast":null,"code":"import { partition } from './util/util';\nimport { stableCompare, Transform } from 'vega-dataflow';\nimport { dotbin } from 'vega-statistics';\nimport { extent, identity, inherits, span } from 'vega-util';\nvar Output = 'bin';\n/**\n * Dot density binning for dot plot construction.\n * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to bin.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {number} [params.step] - The step size (bin width) within which dots should be\n *   stacked. Defaults to 1/30 of the extent of the data *field*.\n * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n *   stacks should be smoothed to reduce variance.\n */\n\nexport default function DotBin(params) {\n  Transform.call(this, null, params);\n}\nDotBin.Definition = {\n  \"type\": \"DotBin\",\n  \"metadata\": {\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"field\",\n    \"type\": \"field\",\n    \"required\": true\n  }, {\n    \"name\": \"groupby\",\n    \"type\": \"field\",\n    \"array\": true\n  }, {\n    \"name\": \"step\",\n    \"type\": \"number\"\n  }, {\n    \"name\": \"smooth\",\n    \"type\": \"boolean\",\n    \"default\": false\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"default\": Output\n  }]\n};\nvar prototype = inherits(DotBin, Transform);\n\nprototype.transform = function (_, pulse) {\n  if (this.value && !(_.modified() || pulse.changed())) {\n    return pulse; // early exit\n  }\n\n  var source = pulse.materialize(pulse.SOURCE).source,\n      groups = partition(pulse.source, _.groupby, identity),\n      smooth = _.smooth || false,\n      field = _.field,\n      step = _.step || autostep(source, field),\n      sort = stableCompare(function (a, b) {\n    return field(a) - field(b);\n  }),\n      as = _.as || Output,\n      n = groups.length; // compute dotplot bins per group\n\n  var min = Infinity,\n      max = -Infinity,\n      i = 0,\n      j;\n\n  for (; i < n; ++i) {\n    var g = groups[i].sort(sort);\n    j = -1;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = dotbin(g, step, smooth, field)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var v = _step.value;\n        if (v < min) min = v;\n        if (v > max) max = v;\n        g[++j][as] = v;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  this.value = {\n    start: min,\n    stop: max,\n    step: step\n  };\n  return pulse.reflow(true).modifies(as);\n};\n\nfunction autostep(data, field) {\n  return span(extent(data, field)) / 30;\n}","map":null,"metadata":{},"sourceType":"module"}