{"ast":null,"code":"import { hasOwnProperty, stringValue } from 'vega-util';\nimport { FACET_CHANNELS } from '../../channel';\nimport { SELECTION_ID } from '../../selection';\nimport { isFacetModel } from '../model';\nimport interval from './interval';\nimport multi from './multi';\nimport single from './single';\nexport var STORE = '_store';\nexport var TUPLE = '_tuple';\nexport var MODIFY = '_modify';\nexport var SELECTION_DOMAIN = '_selection_domain_';\nexport var VL_SELECTION_RESOLVE = 'vlSelectionResolve';\nvar compilers = {\n  single: single,\n  multi: multi,\n  interval: interval\n};\nexport function forEachSelection(model, cb) {\n  var selections = model.component.selection;\n\n  if (selections) {\n    for (var name in selections) {\n      if (hasOwnProperty(selections, name)) {\n        var sel = selections[name];\n        var success = cb(sel, compilers[sel.type]);\n        if (success === true) break;\n      }\n    }\n  }\n}\n\nfunction getFacetModel(model) {\n  var parent = model.parent;\n\n  while (parent) {\n    if (isFacetModel(parent)) {\n      break;\n    }\n\n    parent = parent.parent;\n  }\n\n  return parent;\n}\n\nexport function unitName(model) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    escape: true\n  },\n      escape = _ref.escape;\n\n  var name = escape ? stringValue(model.name) : model.name;\n  var facetModel = getFacetModel(model);\n\n  if (facetModel) {\n    var facet = facetModel.facet;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = FACET_CHANNELS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var channel = _step.value;\n\n        if (facet[channel]) {\n          name += \" + '__facet_\".concat(channel, \"_' + (facet[\").concat(stringValue(facetModel.vgField(channel)), \"])\");\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return name;\n}\nexport function requiresSelectionId(model) {\n  var identifier = false;\n  forEachSelection(model, function (selCmpt) {\n    identifier = identifier || selCmpt.project.items.some(function (proj) {\n      return proj.field === SELECTION_ID;\n    });\n  });\n  return identifier;\n}","map":null,"metadata":{},"sourceType":"module"}