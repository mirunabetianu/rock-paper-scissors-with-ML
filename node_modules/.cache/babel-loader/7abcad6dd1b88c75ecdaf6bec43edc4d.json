{"ast":null,"code":"import { isArray } from 'vega-util';\nimport { valueExpr, vgField } from './channeldef';\nimport { fieldExpr as timeUnitFieldExpr, normalizeTimeUnit } from './timeunit';\nexport function isSelectionPredicate(predicate) {\n  var _a;\n\n  return (_a = predicate) === null || _a === void 0 ? void 0 : _a['selection'];\n}\nexport function isFieldEqualPredicate(predicate) {\n  return predicate && !!predicate.field && predicate.equal !== undefined;\n}\nexport function isFieldLTPredicate(predicate) {\n  return predicate && !!predicate.field && predicate.lt !== undefined;\n}\nexport function isFieldLTEPredicate(predicate) {\n  return predicate && !!predicate.field && predicate.lte !== undefined;\n}\nexport function isFieldGTPredicate(predicate) {\n  return predicate && !!predicate.field && predicate.gt !== undefined;\n}\nexport function isFieldGTEPredicate(predicate) {\n  return predicate && !!predicate.field && predicate.gte !== undefined;\n}\nexport function isFieldRangePredicate(predicate) {\n  if (predicate && predicate.field) {\n    if (isArray(predicate.range) && predicate.range.length === 2) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function isFieldOneOfPredicate(predicate) {\n  return predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility\n  ;\n}\nexport function isFieldValidPredicate(predicate) {\n  return predicate && !!predicate.field && predicate.valid !== undefined;\n}\nexport function isFieldPredicate(predicate) {\n  return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);\n}\n\nfunction predicateValueExpr(v, timeUnit) {\n  return valueExpr(v, {\n    timeUnit: timeUnit,\n    time: true\n  });\n}\n\nfunction predicateValuesExpr(vals, timeUnit) {\n  return vals.map(function (v) {\n    return predicateValueExpr(v, timeUnit);\n  });\n} // This method is used by Voyager. Do not change its behavior without changing Voyager.\n\n\nexport function fieldFilterExpression(predicate) {\n  var useInRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var field = predicate.field,\n      timeUnit = predicate.timeUnit;\n  var fieldExpr = timeUnit ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n  // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n  // TODO: support utc\n  'time(' + timeUnitFieldExpr(timeUnit, field) + ')' : vgField(predicate, {\n    expr: 'datum'\n  });\n\n  if (isFieldEqualPredicate(predicate)) {\n    return fieldExpr + '===' + predicateValueExpr(predicate.equal, timeUnit);\n  } else if (isFieldLTPredicate(predicate)) {\n    var upper = predicate.lt;\n    return \"\".concat(fieldExpr, \"<\").concat(predicateValueExpr(upper, timeUnit));\n  } else if (isFieldGTPredicate(predicate)) {\n    var lower = predicate.gt;\n    return \"\".concat(fieldExpr, \">\").concat(predicateValueExpr(lower, timeUnit));\n  } else if (isFieldLTEPredicate(predicate)) {\n    var _upper = predicate.lte;\n    return \"\".concat(fieldExpr, \"<=\").concat(predicateValueExpr(_upper, timeUnit));\n  } else if (isFieldGTEPredicate(predicate)) {\n    var _lower = predicate.gte;\n    return \"\".concat(fieldExpr, \">=\").concat(predicateValueExpr(_lower, timeUnit));\n  } else if (isFieldOneOfPredicate(predicate)) {\n    return \"indexof([\".concat(predicateValuesExpr(predicate.oneOf, timeUnit).join(','), \"], \").concat(fieldExpr, \") !== -1\");\n  } else if (isFieldValidPredicate(predicate)) {\n    return fieldValidPredicate(fieldExpr, predicate.valid);\n  } else if (isFieldRangePredicate(predicate)) {\n    var _lower2 = predicate.range[0];\n    var _upper2 = predicate.range[1];\n\n    if (_lower2 !== null && _upper2 !== null && useInRange) {\n      return 'inrange(' + fieldExpr + ', [' + predicateValueExpr(_lower2, timeUnit) + ', ' + predicateValueExpr(_upper2, timeUnit) + '])';\n    }\n\n    var exprs = [];\n\n    if (_lower2 !== null) {\n      exprs.push(\"\".concat(fieldExpr, \" >= \").concat(predicateValueExpr(_lower2, timeUnit)));\n    }\n\n    if (_upper2 !== null) {\n      exprs.push(\"\".concat(fieldExpr, \" <= \").concat(predicateValueExpr(_upper2, timeUnit)));\n    }\n\n    return exprs.length > 0 ? exprs.join(' && ') : 'true';\n  }\n  /* istanbul ignore next: it should never reach here */\n\n\n  throw new Error(\"Invalid field predicate: \".concat(JSON.stringify(predicate)));\n}\nexport function fieldValidPredicate(fieldExpr) {\n  var valid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (valid) {\n    return \"isValid(\".concat(fieldExpr, \") && isFinite(+\").concat(fieldExpr, \")\");\n  } else {\n    return \"!isValid(\".concat(fieldExpr, \") || !isFinite(+\").concat(fieldExpr, \")\");\n  }\n}\nexport function normalizePredicate(f) {\n  if (isFieldPredicate(f) && f.timeUnit) {\n    return Object.assign(Object.assign({}, f), {\n      timeUnit: normalizeTimeUnit(f.timeUnit)\n    });\n  }\n\n  return f;\n}","map":null,"metadata":{},"sourceType":"module"}