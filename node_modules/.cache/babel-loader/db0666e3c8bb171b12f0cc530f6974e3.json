{"ast":null,"code":"import { YEAR, MONTH, WEEK, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS } from './units';\nimport { span } from 'vega-util';\nimport { bisector, tickStep } from 'd3-array';\nvar durationSecond = 1000,\n    durationMinute = durationSecond * 60,\n    durationHour = durationMinute * 60,\n    durationDay = durationHour * 24,\n    durationWeek = durationDay * 7,\n    durationMonth = durationDay * 30,\n    durationYear = durationDay * 365;\nvar Milli = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS],\n    Seconds = Milli.slice(0, -1),\n    Minutes = Seconds.slice(0, -1),\n    Hours = Minutes.slice(0, -1),\n    Day = Hours.slice(0, -1),\n    Week = [YEAR, WEEK],\n    Month = [YEAR, MONTH],\n    Year = [YEAR];\nvar intervals = [[Seconds, 1, durationSecond], [Seconds, 5, 5 * durationSecond], [Seconds, 15, 15 * durationSecond], [Seconds, 30, 30 * durationSecond], [Minutes, 1, durationMinute], [Minutes, 5, 5 * durationMinute], [Minutes, 15, 15 * durationMinute], [Minutes, 30, 30 * durationMinute], [Hours, 1, durationHour], [Hours, 3, 3 * durationHour], [Hours, 6, 6 * durationHour], [Hours, 12, 12 * durationHour], [Day, 1, durationDay], [Week, 1, durationWeek], [Month, 1, durationMonth], [Month, 3, 3 * durationMonth], [Year, 1, durationYear]];\nexport default function (opt) {\n  var ext = opt.extent,\n      max = opt.maxbins || 40,\n      target = Math.abs(span(ext)) / max;\n  var i = bisector(function (i) {\n    return i[2];\n  }).right(intervals, target),\n      units,\n      step;\n\n  if (i === intervals.length) {\n    units = Year, step = tickStep(ext[0] / durationYear, ext[1] / durationYear, max);\n  } else if (i) {\n    i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];\n    units = i[0];\n    step = i[1];\n  } else {\n    units = Milli;\n    step = Math.max(tickStep(ext[0], ext[1], max), 1);\n  }\n\n  return {\n    units: units,\n    step: step\n  };\n}","map":null,"metadata":{},"sourceType":"module"}