{"ast":null,"code":"import SortedList from './util/SortedList';\nimport { stableCompare, Transform, tupleid } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\n/**\n * Collects all data tuples that pass through this operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for additionally sorting the collected tuples.\n */\n\nexport default function Collect(params) {\n  Transform.call(this, [], params);\n}\nCollect.Definition = {\n  \"type\": \"Collect\",\n  \"metadata\": {\n    \"source\": true\n  },\n  \"params\": [{\n    \"name\": \"sort\",\n    \"type\": \"compare\"\n  }]\n};\nvar prototype = inherits(Collect, Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.ALL),\n      list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),\n      sort = _.sort,\n      mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));\n  out.visit(out.REM, list.remove);\n  this.modified(mod);\n  this.value = out.source = list.data(stableCompare(sort), mod); // propagate tree root if defined\n\n  if (pulse.source && pulse.source.root) {\n    this.value.root = pulse.source.root;\n  }\n\n  return out;\n};","map":null,"metadata":{},"sourceType":"module"}