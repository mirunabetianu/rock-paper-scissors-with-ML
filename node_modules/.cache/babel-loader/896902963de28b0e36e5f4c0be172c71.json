{"ast":null,"code":"import { Top, Bottom, Left, GuideTitleStyle, zero, one } from './constants';\nimport guideMark from './guide-mark';\nimport { alignExpr, anchorExpr, lookup } from './guide-util';\nimport { encoder, has } from '../encode/encode-util';\nimport { TextMark } from '../marks/marktypes';\nimport { AxisTitleRole } from '../marks/roles';\nimport { addEncode, addEncoders } from '../encode/encode-util';\nimport { extend } from 'vega-util';\nexport default function (spec, config, userEncode, dataRef) {\n  var _ = lookup(spec, config),\n      orient = spec.orient,\n      sign = orient === Left || orient === Top ? -1 : 1,\n      horizontal = orient === Top || orient === Bottom,\n      encode,\n      enter,\n      update,\n      titlePos;\n\n  encode = {\n    enter: enter = {\n      opacity: zero,\n      anchor: encoder(_('titleAnchor')),\n      align: {\n        signal: alignExpr\n      }\n    },\n    update: update = extend({}, enter, {\n      opacity: one,\n      text: encoder(spec.title)\n    }),\n    exit: {\n      opacity: zero\n    }\n  };\n  titlePos = {\n    signal: \"lerp(range(\\\"\".concat(spec.scale, \"\\\"), \").concat(anchorExpr(0, 1, 0.5), \")\")\n  };\n\n  if (horizontal) {\n    update.x = titlePos;\n    enter.angle = {\n      value: 0\n    };\n    enter.baseline = {\n      value: orient === Top ? 'bottom' : 'top'\n    };\n  } else {\n    update.y = titlePos;\n    enter.angle = {\n      value: sign * 90\n    };\n    enter.baseline = {\n      value: 'bottom'\n    };\n  }\n\n  addEncoders(encode, {\n    angle: _('titleAngle'),\n    baseline: _('titleBaseline'),\n    fill: _('titleColor'),\n    fillOpacity: _('titleOpacity'),\n    font: _('titleFont'),\n    fontSize: _('titleFontSize'),\n    fontStyle: _('titleFontStyle'),\n    fontWeight: _('titleFontWeight'),\n    limit: _('titleLimit'),\n    lineHeight: _('titleLineHeight')\n  }, {\n    // require update\n    align: _('titleAlign')\n  });\n  !addEncode(encode, 'x', _('titleX'), 'update') && !horizontal && !has('x', userEncode) && (encode.enter.auto = {\n    value: true\n  });\n  !addEncode(encode, 'y', _('titleY'), 'update') && horizontal && !has('y', userEncode) && (encode.enter.auto = {\n    value: true\n  });\n  return guideMark(TextMark, AxisTitleRole, GuideTitleStyle, null, dataRef, encode, userEncode);\n}","map":null,"metadata":{},"sourceType":"module"}