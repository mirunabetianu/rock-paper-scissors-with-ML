{"ast":null,"code":"import { partition } from './util/util';\nimport { randomKDE } from 'vega-statistics';\nimport { ingest, Transform } from 'vega-dataflow';\nimport { sampleCurve } from 'vega-statistics';\nimport { accessorName, error, extent, inherits } from 'vega-util';\n/**\n * Compute kernel density estimates (KDE) for one or more data groups.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {function(object): *} params.field - An accessor for the data field\n *   to estimate.\n * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n *   If zero or unspecified, the bandwidth is automatically determined.\n * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n *   output values should be probability estimates (false, default) or\n *   smoothed counts (true).\n * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n *   density (false) or cumulative distribution (true) should be generated.\n * @param {Array<number>} [params.extent] - The domain extent over which to\n *   plot the density. If unspecified, the [min, max] data extent is used.\n * @param {string} [params.resolve='independent'] - Indicates how parameters for\n *   multiple densities should be resolved. If \"independent\" (the default), each\n *   density may have its own domain extent and dynamic number of curve sample\n *   steps. If \"shared\", the KDE transform will ensure that all densities are\n *   defined over a shared domain and curve steps, enabling stacking.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\n\nexport default function KDE(params) {\n  Transform.call(this, null, params);\n}\nKDE.Definition = {\n  \"type\": \"KDE\",\n  \"metadata\": {\n    \"generates\": true\n  },\n  \"params\": [{\n    \"name\": \"groupby\",\n    \"type\": \"field\",\n    \"array\": true\n  }, {\n    \"name\": \"field\",\n    \"type\": \"field\",\n    \"required\": true\n  }, {\n    \"name\": \"cumulative\",\n    \"type\": \"boolean\",\n    \"default\": false\n  }, {\n    \"name\": \"counts\",\n    \"type\": \"boolean\",\n    \"default\": false\n  }, {\n    \"name\": \"bandwidth\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"extent\",\n    \"type\": \"number\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"resolve\",\n    \"type\": \"enum\",\n    \"values\": [\"shared\", \"independent\"],\n    \"default\": \"independent\"\n  }, {\n    \"name\": \"steps\",\n    \"type\": \"number\"\n  }, {\n    \"name\": \"minsteps\",\n    \"type\": \"number\",\n    \"default\": 25\n  }, {\n    \"name\": \"maxsteps\",\n    \"type\": \"number\",\n    \"default\": 200\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"array\": true,\n    \"default\": [\"value\", \"density\"]\n  }]\n};\nvar prototype = inherits(KDE, Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n  if (!this.value || pulse.changed() || _.modified()) {\n    var source = pulse.materialize(pulse.SOURCE).source,\n        groups = partition(source, _.groupby, _.field),\n        names = (_.groupby || []).map(accessorName),\n        bandwidth = _.bandwidth,\n        method = _.cumulative ? 'cdf' : 'pdf',\n        as = _.as || ['value', 'density'],\n        values = [];\n    var domain = _.extent,\n        minsteps = _.steps || _.minsteps || 25,\n        maxsteps = _.steps || _.maxsteps || 200;\n\n    if (method !== 'pdf' && method !== 'cdf') {\n      error('Invalid density method: ' + method);\n    }\n\n    if (_.resolve === 'shared') {\n      if (!domain) domain = extent(source, _.field);\n      minsteps = maxsteps = _.steps || maxsteps;\n    }\n\n    groups.forEach(function (g) {\n      var density = randomKDE(g, bandwidth)[method],\n          scale = _.counts ? g.length : 1,\n          local = domain || extent(g);\n      sampleCurve(density, local, minsteps, maxsteps).forEach(function (v) {\n        var t = {};\n\n        for (var i = 0; i < names.length; ++i) {\n          t[names[i]] = g.dims[i];\n        }\n\n        t[as[0]] = v[0];\n        t[as[1]] = v[1] * scale;\n        values.push(ingest(t));\n      });\n    });\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n  }\n\n  return out;\n};","map":null,"metadata":{},"sourceType":"module"}