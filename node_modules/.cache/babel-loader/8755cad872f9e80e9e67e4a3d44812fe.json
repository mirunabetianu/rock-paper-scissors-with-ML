{"ast":null,"code":"import boundStroke from '../bound/boundStroke';\nimport context from '../bound/boundContext';\nimport { intersectPath } from '../util/intersect';\nimport { drawAll } from '../util/canvas/draw';\nimport { pickPath } from '../util/canvas/pick';\nimport { transformItem } from '../util/svg/transform';\nimport { DegToRad } from '../util/constants';\nexport default function (type, shape, isect) {\n  function attr(emit, item) {\n    emit('transform', transformItem(item));\n    emit('d', shape(null, item));\n  }\n\n  function bound(bounds, item) {\n    var x = item.x || 0,\n        y = item.y || 0;\n    shape(context(bounds), item);\n    boundStroke(bounds, item).translate(x, y);\n\n    if (item.angle) {\n      bounds.rotate(item.angle * DegToRad, x, y);\n    }\n\n    return bounds;\n  }\n\n  function draw(context, item) {\n    var x = item.x || 0,\n        y = item.y || 0,\n        a = item.angle || 0;\n    context.translate(x, y);\n    if (a) context.rotate(a *= DegToRad);\n    context.beginPath();\n    shape(context, item);\n    if (a) context.rotate(-a);\n    context.translate(-x, -y);\n  }\n\n  return {\n    type: type,\n    tag: 'path',\n    nested: false,\n    attr: attr,\n    bound: bound,\n    draw: drawAll(draw),\n    pick: pickPath(draw),\n    isect: isect || intersectPath(draw)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}