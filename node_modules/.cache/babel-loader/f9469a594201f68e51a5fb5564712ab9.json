{"ast":null,"code":"import { Transform } from 'vega-dataflow';\nimport { falsy, inherits, isArray } from 'vega-util';\n/**\n * Invokes encoding functions for visual items.\n * @constructor\n * @param {object} params - The parameters to the encoding functions. This\n *   parameter object will be passed through to all invoked encoding functions.\n * @param {object} [params.mod=false] - Flag indicating if tuples in the input\n *   mod set that are unmodified by encoders should be included in the output.\n * @param {object} param.encoders - The encoding functions\n * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set\n * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set\n * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set\n */\n\nexport default function Encode(params) {\n  Transform.call(this, null, params);\n}\nvar prototype = inherits(Encode, Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.ADD_REM),\n      fmod = _.mod || false,\n      encoders = _.encoders,\n      encode = pulse.encode; // if an array, the encode directive includes additional sets\n  // that must be defined in order for the primary set to be invoked\n  // e.g., only run the update set if the hover set is defined\n\n  if (isArray(encode)) {\n    if (out.changed() || encode.every(function (e) {\n      return encoders[e];\n    })) {\n      encode = encode[0];\n      out.encode = null; // consume targeted encode directive\n    } else {\n      return pulse.StopPropagation;\n    }\n  } // marshall encoder functions\n\n\n  var reenter = encode === 'enter',\n      update = encoders.update || falsy,\n      enter = encoders.enter || falsy,\n      exit = encoders.exit || falsy,\n      set = (encode && !reenter ? encoders[encode] : update) || falsy;\n\n  if (pulse.changed(pulse.ADD)) {\n    pulse.visit(pulse.ADD, function (t) {\n      enter(t, _);\n      update(t, _);\n    });\n    out.modifies(enter.output);\n    out.modifies(update.output);\n\n    if (set !== falsy && set !== update) {\n      pulse.visit(pulse.ADD, function (t) {\n        set(t, _);\n      });\n      out.modifies(set.output);\n    }\n  }\n\n  if (pulse.changed(pulse.REM) && exit !== falsy) {\n    pulse.visit(pulse.REM, function (t) {\n      exit(t, _);\n    });\n    out.modifies(exit.output);\n  }\n\n  if (reenter || set !== falsy) {\n    var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);\n\n    if (reenter) {\n      pulse.visit(flag, function (t) {\n        var mod = enter(t, _) || fmod;\n        if (set(t, _) || mod) out.mod.push(t);\n      });\n      if (out.mod.length) out.modifies(enter.output);\n    } else {\n      pulse.visit(flag, function (t) {\n        if (set(t, _) || fmod) out.mod.push(t);\n      });\n    }\n\n    if (out.mod.length) out.modifies(set.output);\n  }\n\n  return out.changed() ? out : pulse.StopPropagation;\n};","map":null,"metadata":{},"sourceType":"module"}