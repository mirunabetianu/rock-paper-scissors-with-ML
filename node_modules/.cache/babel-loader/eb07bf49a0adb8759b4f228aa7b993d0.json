{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __rest } from \"tslib\";\nimport * as log from '../log';\nimport { isConcatSpec, isHConcatSpec, isVConcatSpec } from './concat';\nimport { isFacetSpec } from './facet';\nimport { isLayerSpec } from './layer';\nimport { isRepeatSpec } from './repeat';\nimport { isUnitSpec } from './unit';\nexport var SpecMapper =\n/*#__PURE__*/\nfunction () {\n  function SpecMapper() {\n    _classCallCheck(this, SpecMapper);\n  }\n\n  _createClass(SpecMapper, [{\n    key: \"map\",\n    value: function map(spec, params) {\n      if (isFacetSpec(spec)) {\n        return this.mapFacet(spec, params);\n      } else if (isRepeatSpec(spec)) {\n        return this.mapRepeat(spec, params);\n      } else if (isHConcatSpec(spec)) {\n        return this.mapHConcat(spec, params);\n      } else if (isVConcatSpec(spec)) {\n        return this.mapVConcat(spec, params);\n      } else if (isConcatSpec(spec)) {\n        return this.mapConcat(spec, params);\n      } else {\n        return this.mapLayerOrUnit(spec, params);\n      }\n    }\n  }, {\n    key: \"mapLayerOrUnit\",\n    value: function mapLayerOrUnit(spec, params) {\n      if (isLayerSpec(spec)) {\n        return this.mapLayer(spec, params);\n      } else if (isUnitSpec(spec)) {\n        return this.mapUnit(spec, params);\n      }\n\n      throw new Error(log.message.invalidSpec(spec));\n    }\n  }, {\n    key: \"mapLayer\",\n    value: function mapLayer(spec, params) {\n      var _this = this;\n\n      return Object.assign(Object.assign({}, spec), {\n        layer: spec.layer.map(function (subspec) {\n          return _this.mapLayerOrUnit(subspec, params);\n        })\n      });\n    }\n  }, {\n    key: \"mapHConcat\",\n    value: function mapHConcat(spec, params) {\n      var _this2 = this;\n\n      return Object.assign(Object.assign({}, spec), {\n        hconcat: spec.hconcat.map(function (subspec) {\n          return _this2.map(subspec, params);\n        })\n      });\n    }\n  }, {\n    key: \"mapVConcat\",\n    value: function mapVConcat(spec, params) {\n      var _this3 = this;\n\n      return Object.assign(Object.assign({}, spec), {\n        vconcat: spec.vconcat.map(function (subspec) {\n          return _this3.map(subspec, params);\n        })\n      });\n    }\n  }, {\n    key: \"mapConcat\",\n    value: function mapConcat(spec, params) {\n      var _this4 = this;\n\n      var concat = spec.concat,\n          rest = __rest(spec, [\"concat\"]);\n\n      return Object.assign(Object.assign({}, rest), {\n        concat: concat.map(function (subspec) {\n          return _this4.map(subspec, params);\n        })\n      });\n    }\n  }, {\n    key: \"mapFacet\",\n    value: function mapFacet(spec, params) {\n      return Object.assign(Object.assign({}, spec), {\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n        spec: this.map(spec.spec, params)\n      });\n    }\n  }, {\n    key: \"mapRepeat\",\n    value: function mapRepeat(spec, params) {\n      return Object.assign(Object.assign({}, spec), {\n        spec: this.map(spec.spec, params)\n      });\n    }\n  }]);\n\n  return SpecMapper;\n}();","map":null,"metadata":{},"sourceType":"module"}