{"ast":null,"code":"import { selector as parseSelector } from 'vega-event-selector';\nimport { isString } from 'vega-util';\nimport { TUPLE } from '..';\nimport { varName } from '../../../util';\nimport inputBindings from './inputs';\nimport toggle, { TOGGLE } from './toggle';\nvar clear = {\n  has: function has(selCmpt) {\n    return selCmpt.clear !== undefined && selCmpt.clear !== false;\n  },\n  parse: function parse(model, selCmpt, selDef) {\n    if (selDef.clear) {\n      selCmpt.clear = isString(selDef.clear) ? parseSelector(selDef.clear, 'scope') : selDef.clear;\n    }\n  },\n  topLevelSignals: function topLevelSignals(model, selCmpt, signals) {\n    if (inputBindings.has(selCmpt)) {\n      selCmpt.project.items.forEach(function (proj) {\n        var idx = signals.findIndex(function (n) {\n          return n.name === varName(\"\".concat(selCmpt.name, \"_\").concat(proj.field));\n        });\n\n        if (idx !== -1) {\n          signals[idx].on.push({\n            events: selCmpt.clear,\n            update: 'null'\n          });\n        }\n      });\n    }\n\n    return signals;\n  },\n  signals: function signals(model, selCmpt, _signals) {\n    function addClear(idx, update) {\n      if (idx !== -1 && _signals[idx].on) {\n        _signals[idx].on.push({\n          events: selCmpt.clear,\n          update: update\n        });\n      }\n    } // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.\n\n\n    if (selCmpt.type === 'interval') {\n      selCmpt.project.items.forEach(function (proj) {\n        var vIdx = _signals.findIndex(function (n) {\n          return n.name === proj.signals.visual;\n        });\n\n        addClear(vIdx, '[0, 0]');\n\n        if (vIdx === -1) {\n          var dIdx = _signals.findIndex(function (n) {\n            return n.name === proj.signals.data;\n          });\n\n          addClear(dIdx, 'null');\n        }\n      });\n    } else {\n      var tIdx = _signals.findIndex(function (n) {\n        return n.name === selCmpt.name + TUPLE;\n      });\n\n      addClear(tIdx, 'null');\n\n      if (toggle.has(selCmpt)) {\n        tIdx = _signals.findIndex(function (n) {\n          return n.name === selCmpt.name + TOGGLE;\n        });\n        addClear(tIdx, 'false');\n      }\n    }\n\n    return _signals;\n  }\n};\nexport default clear;","map":null,"metadata":{},"sourceType":"module"}