{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { read, responseType } from 'vega-loader';\nimport { truthy } from 'vega-util';\nexport var parse = read;\n/**\n * Ingests new data into the dataflow. First parses the data using the\n * vega-loader read method, then pulses a changeset to the target operator.\n * @param {Operator} target - The Operator to target with ingested data,\n *   typically a Collect transform instance.\n * @param {*} data - The input data, prior to parsing. For JSON this may\n *   be a string or an object. For CSV, TSV, etc should be a string.\n * @param {object} format - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @returns {Dataflow}\n */\n\nexport function ingest(target, data, format) {\n  return this.pulse(target, this.changeset().insert(parse(data, format)));\n}\n/**\n * Request data from an external source, parse it, and return a Promise.\n * @param {string} url - The URL from which to load the data. This string\n *   is passed to the vega-loader load method.\n * @param {object} [format] - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @return {Promise} A Promise that resolves upon completion of the request.\n *   The resolved object contains the following properties:\n *   - data: an array of parsed data (or null upon error)\n *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n */\n\nexport function request(_x, _x2) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(url, format) {\n    var df, status, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            df = this;\n            status = 0;\n            _context.prev = 2;\n            _context.next = 5;\n            return df.loader().load(url, {\n              context: 'dataflow',\n              response: responseType(format && format.type)\n            });\n\n          case 5:\n            data = _context.sent;\n\n            try {\n              data = parse(data, format);\n            } catch (err) {\n              status = -2;\n              df.warn('Data ingestion failed', url, err);\n            }\n\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            status = -1;\n            df.warn('Loading failed', url, _context.t0);\n\n          case 13:\n            return _context.abrupt(\"return\", {\n              data: data,\n              status: status\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[2, 9]]);\n  }));\n  return _request.apply(this, arguments);\n}\n\nexport function preload(_x3, _x4, _x5) {\n  return _preload.apply(this, arguments);\n}\n\nfunction _preload() {\n  _preload = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(target, url, format) {\n    var df, pending, res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            df = this, pending = df._pending || loadPending(df);\n            pending.requests += 1;\n            _context2.next = 4;\n            return df.request(url, format);\n\n          case 4:\n            res = _context2.sent;\n            df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n            pending.done();\n            return _context2.abrupt(\"return\", res);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _preload.apply(this, arguments);\n}\n\nfunction loadPending(df) {\n  var pending = new Promise(function (a) {\n    accept = a;\n  }),\n      accept;\n  pending.requests = 0;\n\n  pending.done = function () {\n    if (--pending.requests === 0) {\n      df._pending = null;\n      accept(df);\n    }\n  };\n\n  return df._pending = pending;\n}","map":null,"metadata":{},"sourceType":"module"}