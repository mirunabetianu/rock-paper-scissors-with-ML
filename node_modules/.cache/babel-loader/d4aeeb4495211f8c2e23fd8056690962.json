{"ast":null,"code":"import _defineProperty from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { isNumber } from 'vega-util';\nimport { getViewConfigDiscreteStep } from '../../config';\nimport { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport * as encode from './encode';\nexport var tick = {\n  vgMark: 'rect',\n  encodeEntry: function encodeEntry(model) {\n    var config = model.config,\n        markDef = model.markDef;\n    var orient = markDef.orient;\n    var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n    var vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, encode.baseEncodeEntry(model, {\n      align: 'ignore',\n      baseline: 'ignore',\n      color: 'include',\n      orient: 'ignore',\n      size: 'ignore'\n    })), encode.pointPosition('x', model, {\n      defaultPos: 'mid',\n      vgChannel: 'xc'\n    })), encode.pointPosition('y', model, {\n      defaultPos: 'mid',\n      vgChannel: 'yc'\n    })), encode.nonPosition('size', model, {\n      defaultValue: defaultSize(model),\n      vgChannel: vgSizeChannel\n    })), _defineProperty({}, vgThicknessChannel, {\n      value: getFirstDefined(markDef.thickness, config.tick.thickness)\n    }));\n  }\n};\n\nfunction defaultSize(model) {\n  var config = model.config,\n      markDef = model.markDef;\n  var orient = markDef.orient;\n  var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n  var scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\n  var markPropOrConfig = getFirstDefined(markDef[vgSizeChannel], markDef.size, getMarkConfig('size', markDef, config, {\n    vgChannel: vgSizeChannel\n  }), config.tick.bandSize);\n\n  if (markPropOrConfig !== undefined) {\n    return markPropOrConfig;\n  } else {\n    var scaleRange = scale ? scale.get('range') : undefined;\n\n    if (scaleRange && isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n      return scaleRange.step * 3 / 4;\n    }\n\n    var defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);\n    return defaultViewStep * 3 / 4;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}