{"ast":null,"code":"import { Left, Top, Bottom, Value, zero, one } from './constants';\nimport guideMark from './guide-mark';\nimport { lookup } from './guide-util';\nimport { RuleMark } from '../marks/marktypes';\nimport { AxisGridRole } from '../marks/roles';\nimport { addEncoders } from '../encode/encode-util';\nimport { extend, isObject } from 'vega-util';\nexport default function (spec, config, userEncode, dataRef, band) {\n  var _ = lookup(spec, config),\n      orient = spec.orient,\n      vscale = spec.gridScale,\n      sign = orient === Left || orient === Top ? 1 : -1,\n      offset = offsetValue(spec.offset, sign),\n      encode,\n      enter,\n      exit,\n      update,\n      tickPos,\n      u,\n      v,\n      v2,\n      s;\n\n  encode = {\n    enter: enter = {\n      opacity: zero\n    },\n    update: update = {\n      opacity: one\n    },\n    exit: exit = {\n      opacity: zero\n    }\n  };\n  addEncoders(encode, {\n    stroke: _('gridColor'),\n    strokeDash: _('gridDash'),\n    strokeDashOffset: _('gridDashOffset'),\n    strokeOpacity: _('gridOpacity'),\n    strokeWidth: _('gridWidth')\n  });\n  tickPos = {\n    scale: spec.scale,\n    field: Value,\n    band: band.band,\n    extra: band.extra,\n    offset: band.offset,\n    round: _('tickRound')\n  };\n\n  if (orient === Top || orient === Bottom) {\n    u = 'x';\n    v = 'y';\n    s = 'height';\n  } else {\n    u = 'y';\n    v = 'x';\n    s = 'width';\n  }\n\n  v2 = v + '2';\n  update[u] = enter[u] = exit[u] = tickPos;\n\n  if (vscale) {\n    update[v] = enter[v] = {\n      scale: vscale,\n      range: 0,\n      mult: sign,\n      offset: offset\n    };\n    update[v2] = enter[v2] = {\n      scale: vscale,\n      range: 1,\n      mult: sign,\n      offset: offset\n    };\n  } else {\n    update[v] = enter[v] = {\n      value: 0,\n      offset: offset\n    };\n    update[v2] = enter[v2] = {\n      signal: s,\n      mult: sign,\n      offset: offset\n    };\n  }\n\n  return guideMark(RuleMark, AxisGridRole, null, Value, dataRef, encode, userEncode);\n}\n\nfunction offsetValue(offset, sign) {\n  if (sign === 1) {// do nothing!\n  } else if (!isObject(offset)) {\n    offset = sign * (offset || 0);\n  } else {\n    var entry = offset = extend({}, offset);\n\n    while (entry.mult != null) {\n      if (!isObject(entry.mult)) {\n        entry.mult *= sign;\n        return offset;\n      } else {\n        entry = entry.mult = extend({}, entry.mult);\n      }\n    }\n\n    entry.mult = sign;\n  }\n\n  return offset;\n}","map":null,"metadata":{},"sourceType":"module"}