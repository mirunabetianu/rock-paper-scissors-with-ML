{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2 } from '../../channel';\nimport { isValueDef } from '../../channeldef';\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport var GeoPointNode =\n/*#__PURE__*/\nfunction (_DataFlowNode) {\n  _inherits(GeoPointNode, _DataFlowNode);\n\n  function GeoPointNode(parent, projection, fields, as) {\n    var _this;\n\n    _classCallCheck(this, GeoPointNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GeoPointNode).call(this, parent));\n    _this.projection = projection;\n    _this.fields = fields;\n    _this.as = as;\n    return _this;\n  }\n\n  _createClass(GeoPointNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return new Set(this.fields.filter(isString));\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.as);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"Geopoint \".concat(this.projection, \" \").concat(_hash(this.fields), \" \").concat(_hash(this.as));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      return {\n        type: 'geopoint',\n        projection: this.projection,\n        fields: this.fields,\n        as: this.as\n      };\n    }\n  }], [{\n    key: \"parseAll\",\n    value: function parseAll(parent, model) {\n      if (!model.projectionName()) {\n        return parent;\n      }\n\n      for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {\n        var coordinates = _arr[_i];\n        var pair = coordinates.map(function (channel) {\n          return model.channelHasField(channel) ? model.fieldDef(channel).field : isValueDef(model.encoding[channel]) ? {\n            expr: model.encoding[channel].value + ''\n          } : undefined;\n        });\n        var suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n\n        if (pair[0] || pair[1]) {\n          parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);\n        }\n      }\n\n      return parent;\n    }\n  }]);\n\n  return GeoPointNode;\n}(DataFlowNode);","map":null,"metadata":{},"sourceType":"module"}