{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar _regeneratorRuntime = require(\"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar histogram_1 = require(\"../render/histogram\");\n\nvar render_utils_1 = require(\"../render/render_utils\");\n\nvar math_1 = require(\"../util/math\");\n/**\n * Shows a histogram with the distribution of all values in a given tensor.\n *\n * ```js\n * const tensor = tf.tensor1d([0, 0, 0, 0, 2, 3, 4]);\n *\n * const surface = {name: 'Values Distribution', tab: 'Model Inspection'};\n * await tfvis.show.valuesDistribution(surface, tensor);\n * ```\n *\n */\n\n/**\n * @doc {heading: 'Models & Tensors', subheading: 'Model Inspection', namespace:\n * 'show'}\n */\n\n\nfunction valuesDistribution(container, tensor) {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var drawArea, stats, values;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            drawArea = render_utils_1.getDrawArea(container);\n            _context.next = 3;\n            return math_1.tensorStats(tensor);\n\n          case 3:\n            stats = _context.sent;\n            _context.next = 6;\n            return tensor.data();\n\n          case 6:\n            values = _context.sent;\n            histogram_1.histogram(drawArea, values, {\n              height: 150,\n              stats: stats\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.valuesDistribution = valuesDistribution;","map":null,"metadata":{},"sourceType":"script"}