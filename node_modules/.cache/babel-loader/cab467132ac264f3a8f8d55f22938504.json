{"ast":null,"code":"import bind from './bind';\nimport element from './element';\nimport initializeRenderer from './initialize-renderer';\nimport initializeHandler from './initialize-handler';\nimport { CanvasHandler, renderModule } from 'vega-scenegraph';\nexport default function (el, elBind) {\n  var view = this,\n      type = view._renderType,\n      config = view._eventConfig.bind,\n      module = renderModule(type),\n      Handler,\n      Renderer; // containing dom element\n\n  el = view._el = el ? lookup(view, el) : null; // select appropriate renderer & handler\n\n  if (!module) view.error('Unrecognized renderer type: ' + type);\n  Handler = module.handler || CanvasHandler;\n  Renderer = el ? module.renderer : module.headless; // initialize renderer and input handler\n\n  view._renderer = !Renderer ? null : initializeRenderer(view, view._renderer, el, Renderer);\n  view._handler = initializeHandler(view, view._handler, el, Handler);\n  view._redraw = true; // initialize signal bindings\n\n  if (el && config !== 'none') {\n    elBind = elBind ? view._elBind = lookup(view, elBind) : el.appendChild(element('div', {\n      'class': 'vega-bindings'\n    }));\n\n    view._bind.forEach(function (_) {\n      if (_.param.element && config !== 'container') {\n        _.element = lookup(view, _.param.element);\n      }\n    });\n\n    view._bind.forEach(function (_) {\n      bind(view, _.element || elBind, _);\n    });\n  }\n\n  return view;\n}\n\nfunction lookup(view, el) {\n  if (typeof el === 'string') {\n    if (typeof document !== 'undefined') {\n      el = document.querySelector(el);\n\n      if (!el) {\n        view.error('Signal bind element not found: ' + el);\n        return null;\n      }\n    } else {\n      view.error('DOM document instance not found.');\n      return null;\n    }\n  }\n\n  if (el) {\n    try {\n      el.innerHTML = '';\n    } catch (e) {\n      el = null;\n      view.error(e);\n    }\n  }\n\n  return el;\n}","map":null,"metadata":{},"sourceType":"module"}