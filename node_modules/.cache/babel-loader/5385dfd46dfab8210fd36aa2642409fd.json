{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Vega-Lite's singleton logger utility.\n */\nimport { logger, Warn } from 'vega-util';\nimport * as message_ from './message';\nexport var message = message_;\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\n\nvar main = logger(Warn);\nvar current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\n\nexport var LocalLogger =\n/*#__PURE__*/\nfunction () {\n  function LocalLogger() {\n    _classCallCheck(this, LocalLogger);\n\n    this.warns = [];\n    this.infos = [];\n    this.debugs = [];\n  }\n\n  _createClass(LocalLogger, [{\n    key: \"level\",\n    value: function level() {\n      return this;\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      var _this$warns;\n\n      (_this$warns = this.warns).push.apply(_this$warns, arguments);\n\n      return this;\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      var _this$infos;\n\n      (_this$infos = this.infos).push.apply(_this$infos, arguments);\n\n      return this;\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      var _this$debugs;\n\n      (_this$debugs = this.debugs).push.apply(_this$debugs, arguments);\n\n      return this;\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      throw Error.apply(void 0, arguments);\n    }\n  }]);\n\n  return LocalLogger;\n}();\nexport function wrap(f) {\n  return function () {\n    current = new LocalLogger();\n    f(current);\n    reset();\n  };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\n\nexport function set(newLogger) {\n  current = newLogger;\n  return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\n\nexport function reset() {\n  current = main;\n  return current;\n}\nexport function warn() {\n  var _current;\n\n  (_current = current).warn.apply(_current, arguments);\n}\nexport function info() {\n  var _current2;\n\n  (_current2 = current).info.apply(_current2, arguments);\n}\nexport function debug() {\n  var _current3;\n\n  (_current3 = current).debug.apply(_current3, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}