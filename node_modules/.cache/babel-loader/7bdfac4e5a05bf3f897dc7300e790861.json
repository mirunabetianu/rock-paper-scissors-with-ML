{"ast":null,"code":"import { Operator } from 'vega-dataflow';\nimport { accessor, accessorFields, accessorName, inherits } from 'vega-util';\n/**\n * Wraps an expression function with access to external parameters.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function} params.expr - The expression function. The\n *  function should accept both a datum and a parameter object.\n *  This operator's value will be a new function that wraps the\n *  expression function with access to this operator's parameters.\n */\n\nexport default function Expression(params) {\n  Operator.call(this, null, update, params);\n  this.modified(true);\n}\ninherits(Expression, Operator);\n\nfunction update(_) {\n  var expr = _.expr;\n  return this.value && !_.modified('expr') ? this.value : accessor(function (datum) {\n    return expr(datum, _);\n  }, accessorFields(expr), accessorName(expr));\n}","map":null,"metadata":{},"sourceType":"module"}