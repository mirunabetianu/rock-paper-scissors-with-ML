{"ast":null,"code":"import { discrete, continuous } from './palettes';\nimport { interpolateColors } from './interpolate';\n\nfunction colors(palette) {\n  var n = palette.length / 6 | 0,\n      c = new Array(n),\n      i = 0;\n\n  while (i < n) {\n    c[i] = '#' + palette.slice(i * 6, ++i * 6);\n  }\n\n  return c;\n}\n\nfunction apply(_, f) {\n  for (var k in _) {\n    scheme(k, f(_[k]));\n  }\n}\n\nvar schemes = {};\napply(discrete, colors);\napply(continuous, function (_) {\n  return interpolateColors(colors(_));\n});\nexport function scheme(name, scheme) {\n  name = name && name.toLowerCase();\n\n  if (arguments.length > 1) {\n    schemes[name] = scheme;\n    return this;\n  } else {\n    return schemes[name];\n  }\n}","map":null,"metadata":{},"sourceType":"module"}