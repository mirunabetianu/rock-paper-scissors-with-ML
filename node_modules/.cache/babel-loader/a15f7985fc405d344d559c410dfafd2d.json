{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { createDefaultStyle, DEFAULT_OPTIONS } from './defaults';\nimport { formatValue } from './formatValue';\nimport { calculatePosition } from './position';\n/**\n * The tooltip handler class.\n */\n\nexport var Handler =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create the tooltip handler and initialize the element and style.\n   *\n   * @param options Tooltip Options\n   */\n  function Handler(options) {\n    _classCallCheck(this, Handler);\n\n    this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    var elementId = this.options.id; // bind this to call\n\n    this.call = this.tooltipHandler.bind(this); // prepend a default stylesheet for tooltips to the head\n\n    if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {\n      var style = document.createElement('style');\n      style.setAttribute('id', this.options.styleId);\n      style.innerHTML = createDefaultStyle(elementId);\n      var head = document.head;\n\n      if (head.childNodes.length > 0) {\n        head.insertBefore(style, head.childNodes[0]);\n      } else {\n        head.appendChild(style);\n      }\n    } // append a div element that we use as a tooltip unless it already exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    this.el = document.getElementById(elementId);\n\n    if (!this.el) {\n      this.el = document.createElement('div');\n      this.el.setAttribute('id', elementId);\n      this.el.classList.add('vg-tooltip');\n      document.body.appendChild(this.el);\n    }\n  }\n  /**\n   * The tooltip handler function.\n   */\n\n\n  _createClass(Handler, [{\n    key: \"tooltipHandler\",\n    value: function tooltipHandler(handler, event, item, value) {\n      // console.log(handler, event, item, value);\n      // hide tooltip for null, undefined, or empty string values\n      if (value == null || value === '') {\n        this.el.classList.remove('visible', \"\".concat(this.options.theme, \"-theme\"));\n        return;\n      } // set the tooltip content\n\n\n      this.el.innerHTML = formatValue(value, this.options.sanitize, this.options.maxDepth); // make the tooltip visible\n\n      this.el.classList.add('visible', \"\".concat(this.options.theme, \"-theme\"));\n\n      var _calculatePosition = calculatePosition(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY),\n          x = _calculatePosition.x,\n          y = _calculatePosition.y;\n\n      this.el.setAttribute('style', \"top: \".concat(y, \"px; left: \").concat(x, \"px\"));\n    }\n  }]);\n\n  return Handler;\n}();","map":null,"metadata":{},"sourceType":"module"}