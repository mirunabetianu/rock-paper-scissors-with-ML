{"ast":null,"code":"import _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { __rest } from \"tslib\";\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for quantile transform nodes\n */\n\nexport var QuantileTransformNode =\n/*#__PURE__*/\nfunction (_DataFlowNode) {\n  _inherits(QuantileTransformNode, _DataFlowNode);\n\n  function QuantileTransformNode(parent, transform) {\n    var _this;\n\n    _classCallCheck(this, QuantileTransformNode);\n\n    var _a, _b, _c;\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuantileTransformNode).call(this, parent));\n    _this.transform = transform;\n    _this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    var specifiedAs = (_a = _this.transform.as, _a !== null && _a !== void 0 ? _a : [undefined, undefined]);\n    _this.transform.as = [(_b = specifiedAs[0], _b !== null && _b !== void 0 ? _b : 'prob'), (_c = specifiedAs[1], _c !== null && _c !== void 0 ? _c : 'value')];\n    return _this;\n  }\n\n  _createClass(QuantileTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new QuantileTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var _a;\n\n      return new Set([this.transform.quantile].concat(_toConsumableArray((_a = this.transform.groupby, _a !== null && _a !== void 0 ? _a : []))));\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.as);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"QuantileTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _a = this.transform,\n          quantile = _a.quantile,\n          rest = __rest(_a, [\"quantile\"]);\n\n      var result = Object.assign({\n        type: 'quantile',\n        field: quantile\n      }, rest);\n      return result;\n    }\n  }]);\n\n  return QuantileTransformNode;\n}(DataFlowNode);","map":null,"metadata":{},"sourceType":"module"}