{"ast":null,"code":"/**\n * Parse an expression given the argument signature and body code.\n */\nexport default function expression(args, code, ctx) {\n  // wrap code in return statement if expression does not terminate\n  if (code[code.length - 1] !== ';') {\n    code = 'return(' + code + ');';\n  }\n\n  var fn = Function.apply(null, args.concat(code));\n  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;\n}\n/**\n * Parse an expression used to update an operator value.\n */\n\nexport function operatorExpression(code, ctx) {\n  return expression(['_'], code, ctx);\n}\n/**\n * Parse an expression provided as an operator parameter value.\n */\n\nexport function parameterExpression(code, ctx) {\n  return expression(['datum', '_'], code, ctx);\n}\n/**\n * Parse an expression applied to an event stream.\n */\n\nexport function eventExpression(code, ctx) {\n  return expression(['event'], code, ctx);\n}\n/**\n * Parse an expression used to handle an event-driven operator update.\n */\n\nexport function handlerExpression(code, ctx) {\n  return expression(['_', 'event'], code, ctx);\n}\n/**\n * Parse an expression that performs visual encoding.\n */\n\nexport function encodeExpression(code, ctx) {\n  return expression(['item', '_'], code, ctx);\n}","map":null,"metadata":{},"sourceType":"module"}