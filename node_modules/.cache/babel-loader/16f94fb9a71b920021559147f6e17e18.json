{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/* eslint-disable require-atomic-updates */\nimport { default as Pulse, StopPropagation } from '../Pulse';\nimport MultiPulse from '../MultiPulse';\nimport asyncCallback from '../util/asyncCallback';\nimport UniqueList from '../util/UniqueList';\nimport { id, isArray, Info, Debug } from 'vega-util';\n/**\n * Evaluates the dataflow and returns a Promise that resolves when pulse\n * propagation completes. This method will increment the current timestamp\n * and process all updated, pulsed and touched operators. When invoked for\n * the first time, all registered operators will be processed. This method\n * should not be invoked by third-party clients, use {@link runAsync} or\n * {@link run} instead.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\n\nexport function evaluate(_x, _x2, _x3) {\n  return _evaluate.apply(this, arguments);\n}\n/**\n * Queues dataflow evaluation to run once any other queued evaluations have\n * completed and returns a Promise that resolves when the queued pulse\n * propagation completes. If provided, a callback function will be invoked\n * immediately before evaluation commences. This method will ensure a\n * separate evaluation is invoked for each time it is called.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\n\nfunction _evaluate() {\n  _evaluate = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(encode, prerun, postrun) {\n    var df, level, async, stamp, count, op, next, dt, error, pr, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            df = this, level = df.logLevel(), async = []; // if the pulse value is set, this is a re-entrant call\n\n            if (!df._pulse) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", reentrant(df));\n\n          case 3:\n            if (!df._pending) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 6;\n            return df._pending;\n\n          case 6:\n            if (!prerun) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 9;\n            return asyncCallback(df, prerun);\n\n          case 9:\n            if (df._touched.length) {\n              _context.next = 12;\n              break;\n            }\n\n            df.info('Dataflow invoked, but nothing to do.');\n            return _context.abrupt(\"return\", df);\n\n          case 12:\n            // increment timestamp clock\n            stamp = ++df._clock, count = 0; // set the current pulse\n\n            df._pulse = new Pulse(df, stamp, encode);\n\n            if (level >= Info) {\n              dt = Date.now();\n              df.debug('-- START PROPAGATION (' + stamp + ') -----');\n            } // initialize priority queue, reset touched operators\n\n\n            df._touched.forEach(function (op) {\n              return df._enqueue(op, true);\n            });\n\n            df._touched = UniqueList(id);\n            _context.prev = 17;\n\n          case 18:\n            if (!(df._heap.size() > 0)) {\n              _context.next = 36;\n              break;\n            }\n\n            // dequeue operator with highest priority\n            op = df._heap.pop(); // re-queue if rank changed\n\n            if (!(op.rank !== op.qrank)) {\n              _context.next = 23;\n              break;\n            }\n\n            df._enqueue(op, true);\n\n            return _context.abrupt(\"continue\", 18);\n\n          case 23:\n            // otherwise, evaluate the operator\n            next = op.run(df._getPulse(op, encode));\n\n            if (!next.then) {\n              _context.next = 30;\n              break;\n            }\n\n            _context.next = 27;\n            return next;\n\n          case 27:\n            next = _context.sent;\n            _context.next = 31;\n            break;\n\n          case 30:\n            if (next.async) {\n              // queue parallel asynchronous execution\n              async.push(next.async);\n              next = StopPropagation;\n            }\n\n          case 31:\n            if (level >= Debug) {\n              df.debug(op.id, next === StopPropagation ? 'STOP' : next, op);\n            } // propagate evaluation, enqueue dependent operators\n\n\n            if (next !== StopPropagation) {\n              if (op._targets) op._targets.forEach(function (op) {\n                return df._enqueue(op);\n              });\n            } // increment visit counter\n\n\n            ++count;\n            _context.next = 18;\n            break;\n\n          case 36:\n            _context.next = 42;\n            break;\n\n          case 38:\n            _context.prev = 38;\n            _context.t0 = _context[\"catch\"](17);\n\n            df._heap.clear();\n\n            error = _context.t0;\n\n          case 42:\n            // reset pulse map\n            df._input = {};\n            df._pulse = null;\n\n            if (level >= Info) {\n              dt = Date.now() - dt;\n              df.info('> Pulse ' + stamp + ': ' + count + ' operators; ' + dt + 'ms');\n            }\n\n            if (error) {\n              df._postrun = [];\n              df.error(error);\n            } // invoke callbacks queued via runAfter\n\n\n            if (!df._postrun.length) {\n              _context.next = 56;\n              break;\n            }\n\n            pr = df._postrun.sort(function (a, b) {\n              return b.priority - a.priority;\n            });\n            df._postrun = [];\n            i = 0;\n\n          case 50:\n            if (!(i < pr.length)) {\n              _context.next = 56;\n              break;\n            }\n\n            _context.next = 53;\n            return asyncCallback(df, pr[i].callback);\n\n          case 53:\n            ++i;\n            _context.next = 50;\n            break;\n\n          case 56:\n            if (!postrun) {\n              _context.next = 59;\n              break;\n            }\n\n            _context.next = 59;\n            return asyncCallback(df, postrun);\n\n          case 59:\n            // handle non-blocking asynchronous callbacks\n            if (async.length) {\n              Promise.all(async).then(function (cb) {\n                return df.runAsync(null, function () {\n                  cb.forEach(function (f) {\n                    try {\n                      f(df);\n                    } catch (err) {\n                      df.error(err);\n                    }\n                  });\n                });\n              });\n            }\n\n            return _context.abrupt(\"return\", df);\n\n          case 61:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[17, 38]]);\n  }));\n  return _evaluate.apply(this, arguments);\n}\n\nexport function runAsync(_x4, _x5, _x6) {\n  return _runAsync.apply(this, arguments);\n}\n/**\n * Requests dataflow evaluation and the immediately returns this dataflow\n * instance. If there are pending data loading or other asynchronous\n * operations, the dataflow will evaluate asynchronously after this method\n * has been invoked. To track when dataflow evaluation completes, use the\n * {@link runAsync} method instead. This method will raise an error if\n * invoked while the dataflow is already in the midst of evaluation.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode module.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Dataflow} - This dataflow instance.\n */\n\nfunction _runAsync() {\n  _runAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(encode, prerun, postrun) {\n    var _this = this;\n\n    var clear;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!this._running) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 3;\n            return this._running;\n\n          case 3:\n            _context2.next = 0;\n            break;\n\n          case 5:\n            // run dataflow, manage running promise\n            clear = function clear() {\n              return _this._running = null;\n            };\n\n            (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);\n            return _context2.abrupt(\"return\", this._running);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _runAsync.apply(this, arguments);\n}\n\nexport function run(encode, prerun, postrun) {\n  return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);\n}\n/**\n * Schedules a callback function to be invoked after the current pulse\n * propagation completes. If no propagation is currently occurring,\n * the function is invoked immediately. Callbacks scheduled via runAfter\n * are invoked immediately upon completion of the current cycle, before\n * any request queued via runAsync. This method is primarily intended for\n * internal use. Third-party callers using runAfter to schedule a callback\n * that invokes {@link run} or {@link runAsync} should not use this method,\n * but instead use {@link runAsync} with prerun or postrun arguments.\n * @param {function(Dataflow)} callback - The callback function to run.\n *   The callback will be invoked with this Dataflow instance as its\n *   sole argument.\n * @param {boolean} enqueue - A boolean flag indicating that the\n *   callback should be queued up to run after the next propagation\n *   cycle, suppressing immediate invocation when propagation is not\n *   currently occurring.\n * @param {number} [priority] - A priority value used to sort registered\n *   callbacks to determine execution order. This argument is intended\n *   for internal Vega use only.\n */\n\nexport function runAfter(callback, enqueue, priority) {\n  if (this._pulse || enqueue) {\n    // pulse propagation is currently running, queue to run after\n    this._postrun.push({\n      priority: priority || 0,\n      callback: callback\n    });\n  } else {\n    // pulse propagation already complete, invoke immediately\n    try {\n      callback(this);\n    } catch (err) {\n      this.error(err);\n    }\n  }\n}\n/**\n * Raise an error for re-entrant dataflow evaluation.\n */\n\nfunction reentrant(df) {\n  df.error('Dataflow already running. Use runAsync() to chain invocations.');\n  return df;\n}\n/**\n * Enqueue an operator into the priority queue for evaluation. The operator\n * will be enqueued if it has no registered pulse for the current cycle, or if\n * the force argument is true. Upon enqueue, this method also sets the\n * operator's qrank to the current rank value.\n * @param {Operator} op - The operator to enqueue.\n * @param {boolean} [force] - A flag indicating if the operator should be\n *   forceably added to the queue, even if it has already been previously\n *   enqueued during the current pulse propagation. This is useful when the\n *   dataflow graph is dynamically modified and the operator rank changes.\n */\n\n\nexport function enqueue(op, force) {\n  var q = op.stamp < this._clock;\n  if (q) op.stamp = this._clock;\n\n  if (q || force) {\n    op.qrank = op.rank;\n\n    this._heap.push(op);\n  }\n}\n/**\n * Provide a correct pulse for evaluating an operator. If the operator has an\n * explicit source operator, we will try to pull the pulse(s) from it.\n * If there is an array of source operators, we build a multi-pulse.\n * Otherwise, we return a current pulse with correct source data.\n * If the pulse is the pulse map has an explicit target set, we use that.\n * Else if the pulse on the upstream source operator is current, we use that.\n * Else we use the pulse from the pulse map, but copy the source tuple array.\n * @param {Operator} op - The operator for which to get an input pulse.\n * @param {string} [encode] - An (optional) encoding set name with which to\n *   annotate the returned pulse. See {@link run} for more information.\n */\n\nexport function getPulse(op, encode) {\n  var s = op.source,\n      stamp = this._clock;\n  return s && isArray(s) ? new MultiPulse(this, stamp, s.map(function (_) {\n    return _.pulse;\n  }), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n}\n\nfunction singlePulse(p, s) {\n  if (s && s.stamp === p.stamp) {\n    return s;\n  }\n\n  p = p.fork();\n\n  if (s && s !== StopPropagation) {\n    p.source = s.source;\n  }\n\n  return p;\n}","map":null,"metadata":{},"sourceType":"module"}