{"ast":null,"code":"import _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __rest } from \"tslib\";\nimport { hasOwnProperty } from 'vega-util';\nimport { FACET_CHANNELS, getPositionScaleChannel, isChannel, isScaleChannel } from '../channel';\nimport { getFieldDef, vgField as _vgField } from '../channeldef';\nimport { forEach, reduce } from '../encoding';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { isFacetSpec, isLayerSpec, isUnitSpec } from '../spec';\nimport { extractCompositionLayout } from '../spec/base';\nimport { extractTitleConfig, isText } from '../title';\nimport { normalizeTransform } from '../transform';\nimport { contains, duplicate, keys, varName } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { assembleAxes as _assembleAxes } from './axis/assemble';\nimport { assembleHeaderGroups, assembleLayoutTitleBand, assembleTitleGroup } from './header/assemble';\nimport { HEADER_CHANNELS } from './header/component';\nimport { sizeExpr } from './layoutsize/assemble';\nimport { assembleLegends as _assembleLegends } from './legend/assemble';\nimport { parseLegend } from './legend/parse';\nimport { assembleProjections as _assembleProjections } from './projection/assemble';\nimport { parseProjection as _parseProjection } from './projection/parse';\nimport { assembleScales } from './scale/assemble';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { parseScales } from './scale/parse';\nimport { Split } from './split';\nexport var NameMap =\n/*#__PURE__*/\nfunction () {\n  function NameMap() {\n    _classCallCheck(this, NameMap);\n\n    this.nameMap = {};\n  }\n\n  _createClass(NameMap, [{\n    key: \"rename\",\n    value: function rename(oldName, newName) {\n      this.nameMap[oldName] = newName;\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this.nameMap[name] !== undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      // If the name appears in the _nameMap, we need to read its new name.\n      // We have to loop over the dict just in case the new name also gets renamed.\n      while (this.nameMap[name] && name !== this.nameMap[name]) {\n        name = this.nameMap[name];\n      }\n\n      return name;\n    }\n  }]);\n\n  return NameMap;\n}();\n/*\n  We use type guards instead of `instanceof` as `instanceof` makes\n  different parts of the compiler depend on the actual implementation of\n  the model classes, which in turn depend on different parts of the compiler.\n  Thus, `instanceof` leads to circular dependency problems.\n\n  On the other hand, type guards only make different parts of the compiler\n  depend on the type of the model classes, but not the actual implementation.\n*/\n\nexport function isUnitModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'unit';\n}\nexport function isFacetModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'facet';\n}\nexport function isRepeatModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'repeat';\n}\nexport function isConcatModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'concat';\n}\nexport function isLayerModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'layer';\n}\nexport var Model =\n/*#__PURE__*/\nfunction () {\n  function Model(spec, type, parent, parentGivenName, config, repeater, resolve, view) {\n    var _this = this;\n\n    _classCallCheck(this, Model);\n\n    var _a, _b;\n\n    this.type = type;\n    this.parent = parent;\n    this.config = config;\n    this.repeater = repeater;\n    this.view = view;\n    this.children = [];\n    /**\n     * Corrects the data references in marks after assemble.\n     */\n\n    this.correctDataNames = function (mark) {\n      // TODO: make this correct\n      // for normal data references\n      if (mark.from && mark.from.data) {\n        mark.from.data = _this.lookupDataSource(mark.from.data);\n      } // for access to facet data\n\n\n      if (mark.from && mark.from.facet && mark.from.facet.data) {\n        mark.from.facet.data = _this.lookupDataSource(mark.from.facet.data);\n      }\n\n      return mark;\n    };\n\n    this.parent = parent;\n    this.config = config;\n    this.repeater = repeater; // If name is not provided, always use parent's givenName to avoid name conflicts.\n\n    this.name = (_a = spec.name, _a !== null && _a !== void 0 ? _a : parentGivenName);\n    this.title = isText(spec.title) ? {\n      text: spec.title\n    } : spec.title; // Shared name maps\n\n    this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n    this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n    this.signalNameMap = parent ? parent.signalNameMap : new NameMap();\n    this.data = spec.data;\n    this.description = spec.description;\n    this.transforms = normalizeTransform((_b = spec.transform, _b !== null && _b !== void 0 ? _b : []));\n    this.layout = isUnitSpec(spec) || isLayerSpec(spec) ? {} : extractCompositionLayout(spec, type, config);\n    this.component = {\n      data: {\n        sources: parent ? parent.component.data.sources : [],\n        outputNodes: parent ? parent.component.data.outputNodes : {},\n        outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n        // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined\n        isFaceted: isFacetSpec(spec) || parent && parent.component.data.isFaceted && spec.data === undefined\n      },\n      layoutSize: new Split(),\n      layoutHeaders: {\n        row: {},\n        column: {},\n        facet: {}\n      },\n      mark: null,\n      resolve: Object.assign({\n        scale: {},\n        axis: {},\n        legend: {}\n      }, resolve ? duplicate(resolve) : {}),\n      selection: null,\n      scales: null,\n      projection: null,\n      axes: {},\n      legends: {}\n    };\n  }\n\n  _createClass(Model, [{\n    key: \"parse\",\n    value: function parse() {\n      this.parseScale();\n      this.parseLayoutSize(); // depends on scale\n\n      this.renameTopLevelLayoutSizeSignal();\n      this.parseSelections();\n      this.parseProjection();\n      this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n\n      this.parseAxesAndHeaders(); // depends on scale and layout size\n\n      this.parseLegends(); // depends on scale, markDef\n\n      this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n    }\n  }, {\n    key: \"parseScale\",\n    value: function parseScale() {\n      parseScales(this);\n    }\n  }, {\n    key: \"parseProjection\",\n    value: function parseProjection() {\n      _parseProjection(this);\n    }\n    /**\n     * Rename top-level spec's size to be just width / height, ignoring model name.\n     * This essentially merges the top-level spec's width/height signals with the width/height signals\n     * to help us reduce redundant signals declaration.\n     */\n\n  }, {\n    key: \"renameTopLevelLayoutSizeSignal\",\n    value: function renameTopLevelLayoutSizeSignal() {\n      if (this.getName('width') !== 'width') {\n        this.renameSignal(this.getName('width'), 'width');\n      }\n\n      if (this.getName('height') !== 'height') {\n        this.renameSignal(this.getName('height'), 'height');\n      }\n    }\n  }, {\n    key: \"parseLegends\",\n    value: function parseLegends() {\n      parseLegend(this);\n    }\n  }, {\n    key: \"assembleGroupStyle\",\n    value: function assembleGroupStyle() {\n      var _a, _b;\n\n      if (this.type === 'unit' || this.type === 'layer') {\n        return _b = (_a = this.view) === null || _a === void 0 ? void 0 : _a.style, _b !== null && _b !== void 0 ? _b : 'cell';\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"assembleEncodeFromView\",\n    value: function assembleEncodeFromView(view) {\n      // Exclude \"style\"\n      var _ = view.style,\n          baseView = __rest(view, [\"style\"]);\n\n      var e = {};\n\n      for (var property in baseView) {\n        if (hasOwnProperty(baseView, property)) {\n          var value = baseView[property];\n\n          if (value !== undefined) {\n            e[property] = {\n              value: value\n            };\n          }\n        }\n      }\n\n      return e;\n    }\n  }, {\n    key: \"assembleGroupEncodeEntry\",\n    value: function assembleGroupEncodeEntry(isTopLevel) {\n      var encodeEntry = undefined;\n\n      if (this.view) {\n        encodeEntry = this.assembleEncodeFromView(this.view);\n      }\n\n      if (!isTopLevel) {\n        // For top-level spec, we can set the global width and height signal to adjust the group size.\n        // For other child specs, we have to manually set width and height in the encode entry.\n        if (this.type === 'unit' || this.type === 'layer') {\n          return Object.assign({\n            width: this.getSizeSignalRef('width'),\n            height: this.getSizeSignalRef('height')\n          }, encodeEntry !== null && encodeEntry !== void 0 ? encodeEntry : {});\n        }\n      }\n\n      return encodeEntry;\n    }\n  }, {\n    key: \"assembleLayout\",\n    value: function assembleLayout() {\n      if (!this.layout) {\n        return undefined;\n      }\n\n      var _a = this.layout,\n          spacing = _a.spacing,\n          layout = __rest(_a, [\"spacing\"]);\n\n      var component = this.component,\n          config = this.config;\n      var titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);\n      return Object.assign(Object.assign(Object.assign({\n        padding: spacing\n      }, this.assembleDefaultLayout()), layout), titleBand ? {\n        titleBand: titleBand\n      } : {});\n    }\n  }, {\n    key: \"assembleDefaultLayout\",\n    value: function assembleDefaultLayout() {\n      return {};\n    }\n  }, {\n    key: \"assembleHeaderMarks\",\n    value: function assembleHeaderMarks() {\n      var layoutHeaders = this.component.layoutHeaders;\n      var headerMarks = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = FACET_CHANNELS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var channel = _step.value;\n\n          if (layoutHeaders[channel].title) {\n            headerMarks.push(assembleTitleGroup(this, channel));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = HEADER_CHANNELS[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _channel = _step2.value;\n          headerMarks = headerMarks.concat(assembleHeaderGroups(this, _channel));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return headerMarks;\n    }\n  }, {\n    key: \"assembleAxes\",\n    value: function assembleAxes() {\n      return _assembleAxes(this.component.axes, this.config);\n    }\n  }, {\n    key: \"assembleLegends\",\n    value: function assembleLegends() {\n      return _assembleLegends(this);\n    }\n  }, {\n    key: \"assembleProjections\",\n    value: function assembleProjections() {\n      return _assembleProjections(this);\n    }\n  }, {\n    key: \"assembleTitle\",\n    value: function assembleTitle() {\n      var _a, _b, _c;\n\n      var _d = (_a = this.title, _a !== null && _a !== void 0 ? _a : {}),\n          encoding = _d.encoding,\n          titleNoEncoding = __rest(_d, [\"encoding\"]);\n\n      var title = Object.assign(Object.assign(Object.assign({}, extractTitleConfig(this.config.title).nonMark), titleNoEncoding), encoding ? {\n        encode: {\n          update: encoding\n        }\n      } : {});\n\n      if (title.text) {\n        if (contains(['unit', 'layer'], this.type)) {\n          // Unit/Layer\n          if (contains(['middle', undefined], title.anchor)) {\n            title.frame = (_b = title.frame, _b !== null && _b !== void 0 ? _b : 'group');\n          }\n        } else {\n          // composition with Vega layout\n          // Set title = \"start\" by default for composition as \"middle\" does not look nice\n          // https://github.com/vega/vega/issues/960#issuecomment-471360328\n          title.anchor = (_c = title.anchor, _c !== null && _c !== void 0 ? _c : 'start');\n        }\n\n        return keys(title).length > 0 ? title : undefined;\n      }\n\n      return undefined;\n    }\n    /**\n     * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n     */\n\n  }, {\n    key: \"assembleGroup\",\n    value: function assembleGroup() {\n      var signals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var group = {};\n      signals = signals.concat(this.assembleSignals());\n\n      if (signals.length > 0) {\n        group.signals = signals;\n      }\n\n      var layout = this.assembleLayout();\n\n      if (layout) {\n        group.layout = layout;\n      }\n\n      group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks()); // Only include scales if this spec is top-level or if parent is facet.\n      // (Otherwise, it will be merged with upper-level's scope.)\n\n      var scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];\n\n      if (scales.length > 0) {\n        group.scales = scales;\n      }\n\n      var axes = this.assembleAxes();\n\n      if (axes.length > 0) {\n        group.axes = axes;\n      }\n\n      var legends = this.assembleLegends();\n\n      if (legends.length > 0) {\n        group.legends = legends;\n      }\n\n      return group;\n    }\n  }, {\n    key: \"hasDescendantWithFieldOnChannel\",\n    value: function hasDescendantWithFieldOnChannel(channel) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var child = _step3.value;\n\n          if (isUnitModel(child)) {\n            if (child.channelHasField(channel)) {\n              return true;\n            }\n          } else {\n            if (child.hasDescendantWithFieldOnChannel(channel)) {\n              return true;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName(text) {\n      return varName((this.name ? this.name + '_' : '') + text);\n    }\n    /**\n     * Request a data source name for the given data source type and mark that data source as required.\n     * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n     * You can lookup the correct dataset name in assemble with `lookupDataSource`.\n     */\n\n  }, {\n    key: \"requestDataName\",\n    value: function requestDataName(name) {\n      var _a;\n\n      var fullName = this.getName(name); // Increase ref count. This is critical because otherwise we won't create a data source.\n      // We also increase the ref counts on OutputNode.getSource() calls.\n\n      var refCounts = this.component.data.outputNodeRefCounts;\n      refCounts[fullName] = (_a = refCounts[fullName], _a !== null && _a !== void 0 ? _a : 0) + 1;\n      return fullName;\n    }\n  }, {\n    key: \"getSizeSignalRef\",\n    value: function getSizeSignalRef(sizeType) {\n      if (isFacetModel(this.parent)) {\n        var channel = getPositionScaleChannel(sizeType);\n        var scaleComponent = this.component.scales[channel];\n\n        if (scaleComponent && !scaleComponent.merged) {\n          // independent scale\n          var type = scaleComponent.get('type');\n          var range = scaleComponent.get('range');\n\n          if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n            var scaleName = scaleComponent.get('name');\n            var domain = assembleDomain(this, channel);\n            var field = getFieldFromDomain(domain);\n\n            if (field) {\n              var fieldRef = _vgField({\n                aggregate: 'distinct',\n                field: field\n              }, {\n                expr: 'datum'\n              });\n\n              return {\n                signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n              };\n            } else {\n              log.warn(\"Unknown field for \".concat(channel, \". Cannot calculate view size.\"));\n              return null;\n            }\n          }\n        }\n      }\n\n      return {\n        signal: this.signalNameMap.get(this.getName(sizeType))\n      };\n    }\n    /**\n     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n     */\n\n  }, {\n    key: \"lookupDataSource\",\n    value: function lookupDataSource(name) {\n      var node = this.component.data.outputNodes[name];\n\n      if (!node) {\n        // Name not found in map so let's just return what we got.\n        // This can happen if we already have the correct name.\n        return name;\n      }\n\n      return node.getSource();\n    }\n  }, {\n    key: \"getSignalName\",\n    value: function getSignalName(oldSignalName) {\n      return this.signalNameMap.get(oldSignalName);\n    }\n  }, {\n    key: \"renameSignal\",\n    value: function renameSignal(oldName, newName) {\n      this.signalNameMap.rename(oldName, newName);\n    }\n  }, {\n    key: \"renameScale\",\n    value: function renameScale(oldName, newName) {\n      this.scaleNameMap.rename(oldName, newName);\n    }\n  }, {\n    key: \"renameProjection\",\n    value: function renameProjection(oldName, newName) {\n      this.projectionNameMap.rename(oldName, newName);\n    }\n    /**\n     * @return scale name for a given channel after the scale has been parsed and named.\n     */\n\n  }, {\n    key: \"scaleName\",\n    value: function scaleName(originalScaleName, parse) {\n      if (parse) {\n        // During the parse phase always return a value\n        // No need to refer to rename map because a scale can't be renamed\n        // before it has the original name.\n        return this.getName(originalScaleName);\n      } // If there is a scale for the channel, it should either\n      // be in the scale component or exist in the name map\n\n\n      if ( // If there is a scale for the channel, there should be a local scale component for it\n      isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)\n      this.scaleNameMap.has(this.getName(originalScaleName))) {\n        return this.scaleNameMap.get(this.getName(originalScaleName));\n      }\n\n      return undefined;\n    }\n    /**\n     * @return projection name after the projection has been parsed and named.\n     */\n\n  }, {\n    key: \"projectionName\",\n    value: function projectionName(parse) {\n      if (parse) {\n        // During the parse phase always return a value\n        // No need to refer to rename map because a projection can't be renamed\n        // before it has the original name.\n        return this.getName('projection');\n      }\n\n      if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName('projection'))) {\n        return this.projectionNameMap.get(this.getName('projection'));\n      }\n\n      return undefined;\n    }\n    /**\n     * Traverse a model's hierarchy to get the scale component for a particular channel.\n     */\n\n  }, {\n    key: \"getScaleComponent\",\n    value: function getScaleComponent(channel) {\n      /* istanbul ignore next: This is warning for debugging test */\n      if (!this.component.scales) {\n        throw new Error('getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().');\n      }\n\n      var localScaleComponent = this.component.scales[channel];\n\n      if (localScaleComponent && !localScaleComponent.merged) {\n        return localScaleComponent;\n      }\n\n      return this.parent ? this.parent.getScaleComponent(channel) : undefined;\n    }\n    /**\n     * Traverse a model's hierarchy to get a particular selection component.\n     */\n\n  }, {\n    key: \"getSelectionComponent\",\n    value: function getSelectionComponent(variableName, origName) {\n      var sel = this.component.selection[variableName];\n\n      if (!sel && this.parent) {\n        sel = this.parent.getSelectionComponent(variableName, origName);\n      }\n\n      if (!sel) {\n        throw new Error(log.message.selectionNotFound(origName));\n      }\n\n      return sel;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.getSizeSignalRef('width');\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.getSizeSignalRef('height');\n    }\n  }]);\n\n  return Model;\n}();\n/** Abstract class for UnitModel and FacetModel. Both of which can contain fieldDefs as a part of its own specification. */\n\nexport var ModelWithField =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(ModelWithField, _Model);\n\n  function ModelWithField() {\n    _classCallCheck(this, ModelWithField);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ModelWithField).apply(this, arguments));\n  }\n\n  _createClass(ModelWithField, [{\n    key: \"vgField\",\n\n    /** Get \"field\" reference for Vega */\n    value: function vgField(channel) {\n      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fieldDef = this.fieldDef(channel);\n\n      if (!fieldDef) {\n        return undefined;\n      }\n\n      return _vgField(fieldDef, opt);\n    }\n  }, {\n    key: \"reduceFieldDef\",\n    value: function reduceFieldDef(f, init) {\n      return reduce(this.getMapping(), function (acc, cd, c) {\n        var fieldDef = getFieldDef(cd);\n\n        if (fieldDef) {\n          return f(acc, fieldDef, c);\n        }\n\n        return acc;\n      }, init);\n    }\n  }, {\n    key: \"forEachFieldDef\",\n    value: function forEachFieldDef(f, t) {\n      forEach(this.getMapping(), function (cd, c) {\n        var fieldDef = getFieldDef(cd);\n\n        if (fieldDef) {\n          f(fieldDef, c);\n        }\n      }, t);\n    }\n  }]);\n\n  return ModelWithField;\n}(Model);","map":null,"metadata":{},"sourceType":"module"}