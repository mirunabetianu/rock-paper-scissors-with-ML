{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport * as d3 from 'd3-selection';\nimport deepmerge from 'deepmerge';\nimport stringify from 'json-stringify-pretty-compact';\nimport { satisfies } from 'semver';\nimport * as vegaImport from 'vega';\nimport { isBoolean } from 'vega';\nimport * as vegaLiteImport from 'vega-lite';\nimport schemaParser from 'vega-schema-url-parser';\nimport * as themes from 'vega-themes';\nimport { Handler } from 'vega-tooltip';\nimport post from './post';\nimport embedStyle from './style';\nexport var vega = vegaImport;\nvar _vegaLite = vegaLiteImport; // For backwards compatibility with Vega-Lite before v4.\n\nexport { _vegaLite as vegaLite };\nvar w = window;\n\nif (_vegaLite === undefined && w['vl'] && w['vl'].compile) {\n  _vegaLite = w['vl'];\n}\n\nvar I18N = {\n  CLICK_TO_VIEW_ACTIONS: 'Click to view actions',\n  COMPILED_ACTION: 'View Compiled Vega',\n  EDITOR_ACTION: 'Open in Vega Editor',\n  PNG_ACTION: 'Save as PNG',\n  SOURCE_ACTION: 'View Source',\n  SVG_ACTION: 'Save as SVG'\n};\nvar NAMES = {\n  vega: 'Vega',\n  'vega-lite': 'Vega-Lite'\n};\nvar VERSION = {\n  vega: vega.version,\n  'vega-lite': _vegaLite ? _vegaLite.version : 'not available'\n};\nvar PREPROCESSOR = {\n  vega: function vega(vgSpec) {\n    return vgSpec;\n  },\n  'vega-lite': function vegaLite(vlSpec, config) {\n    return _vegaLite.compile(vlSpec, {\n      config: config\n    }).spec;\n  }\n};\nvar SVG_CIRCLES = \"\\n<svg viewBox=\\\"0 0 16 16\\\" fill=\\\"currentColor\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n  <circle r=\\\"2\\\" cy=\\\"8\\\" cx=\\\"2\\\"></circle>\\n  <circle r=\\\"2\\\" cy=\\\"8\\\" cx=\\\"8\\\"></circle>\\n  <circle r=\\\"2\\\" cy=\\\"8\\\" cx=\\\"14\\\"></circle>\\n</svg>\";\n\nfunction isTooltipHandler(h) {\n  return typeof h === 'function';\n}\n\nfunction viewSource(source, sourceHeader, sourceFooter, mode) {\n  var header = \"<html><head>\".concat(sourceHeader, \"</head><body><pre><code class=\\\"json\\\">\");\n  var footer = \"</code></pre>\".concat(sourceFooter, \"</body></html>\");\n  var win = window.open('');\n  win.document.write(header + source + footer);\n  win.document.title = \"\".concat(NAMES[mode], \" JSON Source\");\n}\n/**\n * Try to guess the type of spec.\n *\n * @param spec Vega or Vega-Lite spec.\n */\n\n\nexport function guessMode(spec, providedMode) {\n  // Decide mode\n  if (spec.$schema) {\n    var parsed = schemaParser(spec.$schema);\n\n    if (providedMode && providedMode !== parsed.library) {\n      console.warn(\"The given visualization spec is written in \".concat(NAMES[parsed.library], \", but mode argument sets \").concat(NAMES[providedMode] || providedMode, \".\"));\n    }\n\n    var mode = parsed.library;\n\n    if (!satisfies(VERSION[mode], \"^\".concat(parsed.version.slice(1)))) {\n      console.warn(\"The input spec uses \".concat(NAMES[mode], \" \").concat(parsed.version, \", but the current version of \").concat(NAMES[mode], \" is v\").concat(VERSION[mode], \".\"));\n    }\n\n    return mode;\n  } // try to guess from the provided spec\n\n\n  if ('mark' in spec || 'encoding' in spec || 'layer' in spec || 'hconcat' in spec || 'vconcat' in spec || 'facet' in spec || 'repeat' in spec) {\n    return 'vega-lite';\n  }\n\n  if ('marks' in spec || 'signals' in spec || 'scales' in spec || 'axes' in spec) {\n    return 'vega';\n  }\n\n  return providedMode || 'vega';\n}\n\nfunction isLoader(o) {\n  return !!(o && 'load' in o);\n}\n/**\n * Embed a Vega visualization component in a web page. This function returns a promise.\n *\n * @param el        DOM element in which to place component (DOM node or CSS selector).\n * @param spec      String : A URL string from which to load the Vega specification.\n *                  Object : The Vega/Vega-Lite specification as a parsed JSON object.\n * @param opt       A JavaScript object containing options for embedding.\n */\n\n\nexport default function embed(el, spec) {\n  var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var loader, data, config, _data, actions, i18n, renderer, logLevel, downloadFileName, ID, style, mode, vgSpec, parsed, div, patch, patchString, runtime, view, handler, _opt, hover, _ref, hoverSet, updateSet, wrapper, details, summary, dn, ctrl, _loop, _i, _arr, editorUrl;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            loader = isLoader(opt.loader) ? opt.loader : vega.loader(opt.loader); // Load the visualization specification.\n\n            if (!vega.isString(spec)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return loader.load(spec);\n\n          case 4:\n            data = _context.sent;\n            return _context.abrupt(\"return\", embed(el, JSON.parse(data), opt));\n\n          case 6:\n            opt = deepmerge(opt, spec.usermeta && spec.usermeta['embedOptions'] || {}); // Load Vega theme/configuration.\n\n            config = opt.config || {};\n\n            if (!vega.isString(config)) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 11;\n            return loader.load(config);\n\n          case 11:\n            _data = _context.sent;\n            return _context.abrupt(\"return\", embed(el, spec, Object.assign(Object.assign({}, opt), {\n              config: JSON.parse(_data)\n            })));\n\n          case 13:\n            actions = isBoolean(opt.actions) ? opt.actions : deepmerge({\n              export: {\n                svg: true,\n                png: true\n              },\n              source: true,\n              compiled: true,\n              editor: true\n            }, opt.actions || {});\n            i18n = Object.assign(Object.assign({}, I18N), opt.i18n);\n            renderer = opt.renderer || 'canvas';\n            logLevel = opt.logLevel || vega.Warn;\n            downloadFileName = opt.downloadFileName || 'visualization';\n\n            if (opt.defaultStyle !== false) {\n              // Add a default stylesheet to the head of the document.\n              ID = 'vega-embed-style';\n\n              if (!document.getElementById(ID)) {\n                style = document.createElement('style');\n                style.id = ID;\n                style.innerText = opt.defaultStyle === undefined || opt.defaultStyle === true ? (embedStyle || '').toString() : opt.defaultStyle;\n                document.head.appendChild(style);\n              }\n            }\n\n            if (opt.theme) {\n              config = deepmerge(themes[opt.theme], config);\n            }\n\n            mode = guessMode(spec, opt.mode);\n            vgSpec = PREPROCESSOR[mode](spec, config);\n\n            if (mode === 'vega-lite') {\n              if (vgSpec.$schema) {\n                parsed = schemaParser(vgSpec.$schema);\n\n                if (!satisfies(VERSION.vega, \"^\".concat(parsed.version.slice(1)))) {\n                  console.warn(\"The compiled spec uses Vega \".concat(parsed.version, \", but current version is v\").concat(VERSION.vega, \".\"));\n                }\n              }\n            } // ensure container div has class 'vega-embed'\n\n\n            div = d3.select(el) // d3.select supports elements and strings\n            .classed('vega-embed', true).html(''); // clear container\n\n            patch = opt.patch;\n\n            if (!patch) {\n              _context.next = 38;\n              break;\n            }\n\n            if (!(patch instanceof Function)) {\n              _context.next = 30;\n              break;\n            }\n\n            vgSpec = patch(vgSpec);\n            _context.next = 38;\n            break;\n\n          case 30:\n            if (!vega.isString(patch)) {\n              _context.next = 37;\n              break;\n            }\n\n            _context.next = 33;\n            return loader.load(patch);\n\n          case 33:\n            patchString = _context.sent;\n            // eslint-disable-next-line require-atomic-updates\n            vgSpec = deepmerge(vgSpec, JSON.parse(patchString));\n            _context.next = 38;\n            break;\n\n          case 37:\n            vgSpec = deepmerge(vgSpec, patch);\n\n          case 38:\n            // Do not apply the config to Vega when we have already applied it to Vega-Lite.\n            // This call may throw an Error if parsing fails.\n            runtime = vega.parse(vgSpec, mode === 'vega-lite' ? {} : config);\n            view = new vega.View(runtime, {\n              loader: loader,\n              logLevel: logLevel,\n              renderer: renderer\n            });\n\n            if (opt.tooltip !== false) {\n              if (isTooltipHandler(opt.tooltip)) {\n                handler = opt.tooltip;\n              } else {\n                // user provided boolean true or tooltip options\n                handler = new Handler(opt.tooltip === true ? {} : opt.tooltip).call;\n              }\n\n              view.tooltip(handler);\n            }\n\n            _opt = opt, hover = _opt.hover;\n\n            if (hover === undefined) {\n              hover = mode === 'vega';\n            }\n\n            if (hover) {\n              _ref = typeof hover === 'boolean' ? {} : hover, hoverSet = _ref.hoverSet, updateSet = _ref.updateSet;\n              view.hover(hoverSet, updateSet);\n            }\n\n            if (opt) {\n              if (opt.width) {\n                view.width(opt.width);\n              }\n\n              if (opt.height) {\n                view.height(opt.height);\n              }\n\n              if (opt.padding) {\n                view.padding(opt.padding);\n              }\n            }\n\n            _context.next = 47;\n            return view.initialize(el).runAsync();\n\n          case 47:\n            if (actions !== false) {\n              wrapper = div;\n\n              if (opt.defaultStyle !== false) {\n                details = div.append('details').attr('title', i18n.CLICK_TO_VIEW_ACTIONS);\n                wrapper = details;\n                summary = details.insert('summary');\n                summary.html(SVG_CIRCLES);\n                dn = details.node();\n                document.addEventListener('click', function (evt) {\n                  if (!dn.contains(evt.target)) {\n                    dn.removeAttribute('open');\n                  }\n                });\n              }\n\n              ctrl = wrapper.insert('div').attr('class', 'vega-actions'); // add 'Export' action\n\n              if (actions === true || actions.export !== false) {\n                _loop = function _loop() {\n                  var ext = _arr[_i];\n\n                  if (actions === true || actions.export === true || actions.export[ext]) {\n                    var i18nExportAction = i18n[\"\".concat(ext.toUpperCase(), \"_ACTION\")];\n                    ctrl.append('a').text(i18nExportAction).attr('href', '#').attr('target', '_blank').attr('download', \"\".concat(downloadFileName, \".\").concat(ext)) // eslint-disable-next-line func-names\n                    .on('mousedown', function () {\n                      var _this = this;\n\n                      view.toImageURL(ext, opt.scaleFactor).then(function (url) {\n                        _this.href = url;\n                      }).catch(function (error) {\n                        throw error;\n                      });\n                      d3.event.preventDefault();\n                    });\n                  }\n                };\n\n                for (_i = 0, _arr = ['svg', 'png']; _i < _arr.length; _i++) {\n                  _loop();\n                }\n              } // add 'View Source' action\n\n\n              if (actions === true || actions.source !== false) {\n                ctrl.append('a').text(i18n.SOURCE_ACTION).attr('href', '#').on('mousedown', function () {\n                  viewSource(stringify(spec), opt.sourceHeader || '', opt.sourceFooter || '', mode);\n                  d3.event.preventDefault();\n                });\n              } // add 'View Compiled' action\n\n\n              if (mode === 'vega-lite' && (actions === true || actions.compiled !== false)) {\n                ctrl.append('a').text(i18n.COMPILED_ACTION).attr('href', '#').on('mousedown', function () {\n                  viewSource(stringify(vgSpec), opt.sourceHeader || '', opt.sourceFooter || '', 'vega');\n                  d3.event.preventDefault();\n                });\n              } // add 'Open in Vega Editor' action\n\n\n              if (actions === true || actions.editor !== false) {\n                editorUrl = opt.editorUrl || 'https://vega.github.io/editor/';\n                ctrl.append('a').text(i18n.EDITOR_ACTION).attr('href', '#').on('mousedown', function () {\n                  post(window, editorUrl, {\n                    config: config,\n                    mode: mode,\n                    renderer: renderer,\n                    spec: stringify(spec)\n                  });\n                  d3.event.preventDefault();\n                });\n              }\n            }\n\n            return _context.abrupt(\"return\", {\n              view: view,\n              spec: spec,\n              vgSpec: vgSpec\n            });\n\n          case 49:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}