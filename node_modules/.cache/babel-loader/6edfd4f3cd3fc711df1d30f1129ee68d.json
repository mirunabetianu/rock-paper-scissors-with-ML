{"ast":null,"code":"import { timeFormat as _timeFormat, utcFormat as _utcFormat } from 'vega-time';\nimport { format as _numberFormat } from 'd3-format';\nimport { timeParse as _timeParse, utcParse as _utcParse } from 'd3-time-format';\nvar formatCache = {};\n\nfunction formatter(type, method, specifier) {\n  var k = type + ':' + specifier,\n      e = formatCache[k];\n\n  if (!e || e[0] !== method) {\n    formatCache[k] = e = [method, method(specifier)];\n  }\n\n  return e[1];\n}\n\nexport function format(_, specifier) {\n  return formatter('format', _numberFormat, specifier)(_);\n}\nexport function timeFormat(_, specifier) {\n  return formatter('timeFormat', _timeFormat, specifier)(_);\n}\nexport function utcFormat(_, specifier) {\n  return formatter('utcFormat', _utcFormat, specifier)(_);\n}\nexport function timeParse(_, specifier) {\n  return formatter('timeParse', _timeParse, specifier)(_);\n}\nexport function utcParse(_, specifier) {\n  return formatter('utcParse', _utcParse, specifier)(_);\n}\nvar dateObj = new Date(2000, 0, 1);\n\nfunction time(month, day, specifier) {\n  if (!Number.isInteger(month) || !Number.isInteger(day)) return '';\n  dateObj.setYear(2000);\n  dateObj.setMonth(month);\n  dateObj.setDate(day);\n  return timeFormat(dateObj, specifier);\n}\n\nexport function monthFormat(month) {\n  return time(month, 1, '%B');\n}\nexport function monthAbbrevFormat(month) {\n  return time(month, 1, '%b');\n}\nexport function dayFormat(day) {\n  return time(0, 2 + day, '%A');\n}\nexport function dayAbbrevFormat(day) {\n  return time(0, 2 + day, '%a');\n}","map":null,"metadata":{},"sourceType":"module"}