{"ast":null,"code":"import _defineProperty from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _symbols, _formats;\n\nimport { Symbols, Discrete } from './legend-types';\nimport { tickFormat, tickValues } from './ticks';\nimport { peek } from 'vega-util';\nimport { Quantile, Quantize, Threshold, tickFormat as spanFormat, Time, UTC } from 'vega-scale';\nvar symbols = (_symbols = {}, _defineProperty(_symbols, Quantile, 'quantiles'), _defineProperty(_symbols, Quantize, 'thresholds'), _defineProperty(_symbols, Threshold, 'domain'), _symbols);\nvar formats = (_formats = {}, _defineProperty(_formats, Quantile, 'quantiles'), _defineProperty(_formats, Quantize, 'domain'), _formats);\nexport function labelValues(scale, count) {\n  return scale.bins ? binValues(scale.bins) : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]()) : tickValues(scale, count);\n}\nexport function thresholdFormat(scale, specifier) {\n  var _ = scale[formats[scale.type]](),\n      n = _.length,\n      d = n > 1 ? _[1] - _[0] : _[0],\n      i;\n\n  for (i = 1; i < n; ++i) {\n    d = Math.min(d, _[i] - _[i - 1]);\n  } // 3 ticks times 10 for increased resolution\n\n\n  return spanFormat(0, d, 3 * 10, specifier);\n}\n\nfunction thresholdValues(thresholds) {\n  var values = [-Infinity].concat(thresholds);\n  values.max = +Infinity;\n  return values;\n}\n\nfunction binValues(bins) {\n  var values = bins.slice(0, -1);\n  values.max = peek(bins);\n  return values;\n}\n\nfunction isDiscreteRange(scale) {\n  return symbols[scale.type] || scale.bins;\n}\n\nexport function labelFormat(scale, count, type, specifier, formatType, noSkip) {\n  var format = formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(scale, specifier) : tickFormat(scale, count, specifier, formatType, noSkip);\n  return type === Symbols && isDiscreteRange(scale) ? formatRange(format) : type === Discrete ? formatDiscrete(format) : formatPoint(format);\n}\n\nfunction formatRange(format) {\n  return function (value, index, array) {\n    var limit = get(array[index + 1], get(array.max, +Infinity)),\n        lo = formatValue(value, format),\n        hi = formatValue(limit, format);\n    return lo && hi ? lo + \" \\u2013 \" + hi : hi ? '< ' + hi : \"\\u2265 \" + lo;\n  };\n}\n\nfunction get(value, dflt) {\n  return value != null ? value : dflt;\n}\n\nfunction formatDiscrete(format) {\n  return function (value, index) {\n    return index ? format(value) : null;\n  };\n}\n\nfunction formatPoint(format) {\n  return function (value) {\n    return format(value);\n  };\n}\n\nfunction formatValue(value, format) {\n  return Number.isFinite(value) ? format(value) : null;\n}\n\nexport function labelFraction(scale) {\n  var domain = scale.domain(),\n      count = domain.length - 1,\n      lo = +domain[0],\n      hi = +peek(domain),\n      span = hi - lo;\n\n  if (scale.type === Threshold) {\n    var adjust = count ? span / count : 0.1;\n    lo -= adjust;\n    hi += adjust;\n    span = hi - lo;\n  }\n\n  return function (value) {\n    return (value - lo) / span;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}