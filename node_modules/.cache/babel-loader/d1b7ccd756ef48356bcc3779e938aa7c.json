{"ast":null,"code":"import { Transform } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\n/**\n * Geo-code a longitude/latitude point to an x/y coordinate.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {Array<function(object): *>} params.fields - A two-element array of\n *   field accessors for the longitude and latitude values.\n * @param {Array<string>} [params.as] - A two-element array of field names\n *   under which to store the result. Defaults to ['x','y'].\n */\n\nexport default function GeoPoint(params) {\n  Transform.call(this, null, params);\n}\nGeoPoint.Definition = {\n  \"type\": \"GeoPoint\",\n  \"metadata\": {\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"projection\",\n    \"type\": \"projection\",\n    \"required\": true\n  }, {\n    \"name\": \"fields\",\n    \"type\": \"field\",\n    \"array\": true,\n    \"required\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"array\": true,\n    \"length\": 2,\n    \"default\": [\"x\", \"y\"]\n  }]\n};\nvar prototype = inherits(GeoPoint, Transform);\n\nprototype.transform = function (_, pulse) {\n  var proj = _.projection,\n      lon = _.fields[0],\n      lat = _.fields[1],\n      as = _.as || ['x', 'y'],\n      x = as[0],\n      y = as[1],\n      mod;\n\n  function set(t) {\n    var xy = proj([lon(t), lat(t)]);\n\n    if (xy) {\n      t[x] = xy[0];\n      t[y] = xy[1];\n    } else {\n      t[x] = undefined;\n      t[y] = undefined;\n    }\n  }\n\n  if (_.modified()) {\n    // parameters updated, reflow\n    pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);\n  } else {\n    mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);\n    pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);\n  }\n\n  return pulse.modifies(as);\n};","map":null,"metadata":{},"sourceType":"module"}