{"ast":null,"code":"import _defineProperty from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { array } from 'vega-util';\nimport { isConditionalSelection } from '../../../channeldef';\nimport { expression } from '../../predicate';\nimport { parseSelectionPredicate } from '../../selection/parse';\n/**\n * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition.\n * or a simple mixin if channel def has no condition.\n */\n\nexport function wrapCondition(model, channelDef, vgChannel, refFn) {\n  var condition = channelDef && channelDef.condition;\n  var valueRef = refFn(channelDef);\n\n  if (condition) {\n    var conditions = array(condition);\n    var vgConditions = conditions.map(function (c) {\n      var conditionValueRef = refFn(c);\n      var test = isConditionalSelection(c) ? parseSelectionPredicate(model, c.selection) : expression(model, c.test);\n      return Object.assign({\n        test: test\n      }, conditionValueRef);\n    });\n    return _defineProperty({}, vgChannel, [].concat(_toConsumableArray(vgConditions), _toConsumableArray(valueRef !== undefined ? [valueRef] : [])));\n  } else {\n    return valueRef !== undefined ? _defineProperty({}, vgChannel, valueRef) : {};\n  }\n}","map":null,"metadata":{},"sourceType":"module"}