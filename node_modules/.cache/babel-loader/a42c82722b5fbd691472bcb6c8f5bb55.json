{"ast":null,"code":"import Facet from './Facet';\nimport { ingest, tupleid } from 'vega-dataflow';\nimport { accessorFields, error, inherits } from 'vega-util';\n/**\n * Partitions pre-faceted data into tuple subflows.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): Array<object>} params.field - The field\n *   accessor for an array of subflow tuple objects.\n */\n\nexport default function PreFacet(params) {\n  Facet.call(this, params);\n}\nvar prototype = inherits(PreFacet, Facet);\n\nprototype.transform = function (_, pulse) {\n  var self = this,\n      flow = _.subflow,\n      field = _.field;\n\n  if (_.modified('field') || field && pulse.modified(accessorFields(field))) {\n    error('PreFacet does not support field modification.');\n  }\n\n  this._targets.active = 0; // reset list of active subflows\n\n  pulse.visit(pulse.MOD, function (t) {\n    var sf = self.subflow(tupleid(t), flow, pulse, t);\n    field ? field(t).forEach(function (_) {\n      sf.mod(_);\n    }) : sf.mod(t);\n  });\n  pulse.visit(pulse.ADD, function (t) {\n    var sf = self.subflow(tupleid(t), flow, pulse, t);\n    field ? field(t).forEach(function (_) {\n      sf.add(ingest(_));\n    }) : sf.add(t);\n  });\n  pulse.visit(pulse.REM, function (t) {\n    var sf = self.subflow(tupleid(t), flow, pulse, t);\n    field ? field(t).forEach(function (_) {\n      sf.rem(_);\n    }) : sf.rem(t);\n  });\n  return pulse;\n};","map":null,"metadata":{},"sourceType":"module"}