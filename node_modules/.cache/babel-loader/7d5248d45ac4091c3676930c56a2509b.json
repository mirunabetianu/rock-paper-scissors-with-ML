{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mirunabetianu/WebstormProjects/rps/src/components/CameraPrediction/CameraPrediction.jsx\";\nimport React, { Component } from 'react';\nimport { doSinglePrediction } from '../../tfjs/evaluationHelpers';\nimport AdvancedModel from '../AdvancedModel';\nimport * as tf from '@tensorflow/tfjs';\nimport Webcam from 'react-webcam';\nvar DETECTION_PERIOD = 2000;\n\nvar CameraPrediction =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CameraPrediction, _Component);\n\n  function CameraPrediction() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CameraPrediction);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CameraPrediction)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      webcamActive: false,\n      camMessage: '',\n      advancedDemo: false\n    };\n\n    _this._renderAdvancedModel = function () {\n      if (_this.state.advancedDemo) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, React.createElement(AdvancedModel, {\n          key: \"advancedDemo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }));\n      }\n    };\n\n    _this._renderWebcam = function () {\n      if (_this.state.webcamActive) {\n        return React.createElement(\"div\", {\n          className: \"results\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, \"64x64 Input\"), React.createElement(\"canvas\", {\n          id: \"compVision\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, _this.state.camMessage), React.createElement(Webcam, {\n          ref: _this._refWeb,\n          className: \"captureCam\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }));\n      }\n    };\n\n    _this.detectWebcam =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var video, feedbackCanvas, options, predictions, camMessage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.sleep(100);\n\n            case 2:\n              video = document.querySelectorAll('.captureCam');\n              feedbackCanvas = document.getElementById('compVision'); // assure video is still shown\n\n              if (!video[0]) {\n                _context.next = 12;\n                break;\n              }\n\n              options = {\n                feedbackCanvas: feedbackCanvas\n              };\n              _context.next = 8;\n              return doSinglePrediction(_this.model, video[0], options);\n\n            case 8:\n              predictions = _context.sent;\n              camMessage = predictions.map(function (p) {\n                return \" \".concat(p.className, \": %\").concat((p.probability * 100).toFixed(2));\n              }).toString();\n\n              _this.setState({\n                camMessage: camMessage\n              });\n\n              setTimeout(_this.detectWebcam, DETECTION_PERIOD);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this._refWeb = function (webcam) {\n      _this.webcam = webcam;\n    };\n\n    return _this;\n  }\n\n  _createClass(CameraPrediction, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.tf = tf;\n    }\n  }, {\n    key: \"sleep\",\n    value: function sleep(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n        className: \"myButton\",\n        onClick: function onClick() {\n          _this2.setState(function (prevState) {\n            return {\n              webcamActive: false,\n              advancedDemo: !prevState.advancedDemo\n            };\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.state.advancedDemo ? 'Stop Neural Network' : 'Start Neural Network'), this._renderAdvancedModel());\n    }\n  }]);\n\n  return CameraPrediction;\n}(Component);\n\nexport default CameraPrediction;","map":{"version":3,"sources":["/Users/mirunabetianu/WebstormProjects/rps/src/components/CameraPrediction/CameraPrediction.jsx"],"names":["React","Component","doSinglePrediction","AdvancedModel","tf","Webcam","DETECTION_PERIOD","CameraPrediction","state","webcamActive","camMessage","advancedDemo","_renderAdvancedModel","_renderWebcam","_refWeb","detectWebcam","sleep","video","document","querySelectorAll","feedbackCanvas","getElementById","options","model","predictions","map","p","className","probability","toFixed","toString","setState","setTimeout","webcam","window","ms","Promise","resolve","prevState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { doSinglePrediction } from '../../tfjs/evaluationHelpers';\nimport AdvancedModel from '../AdvancedModel';\nimport * as tf from '@tensorflow/tfjs';\nimport Webcam from 'react-webcam';\n\nconst DETECTION_PERIOD = 2000;\n\nclass CameraPrediction extends Component {\n  state = {\n    webcamActive: false,\n    camMessage: '',\n    advancedDemo: false,\n  };\n\n  _renderAdvancedModel = () => {\n    if (this.state.advancedDemo) {\n      return (\n        <div>\n          <AdvancedModel key=\"advancedDemo\" />\n        </div>\n      );\n    }\n  };\n\n  componentDidMount () {\n    window.tf = tf;\n  }\n\n  _renderWebcam = () => {\n    if (this.state.webcamActive) {\n      return (\n        <div className=\"results\">\n          <div>64x64 Input</div>\n          <canvas id=\"compVision\" />\n          <div>{this.state.camMessage}</div>\n          <Webcam ref={this._refWeb} className=\"captureCam\" />\n        </div>\n      );\n    }\n  };\n\n  sleep (ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  detectWebcam = async () => {\n    await this.sleep(100);\n    const video = document.querySelectorAll('.captureCam');\n    const feedbackCanvas = document.getElementById('compVision');\n    // assure video is still shown\n    if (video[0]) {\n      const options = { feedbackCanvas };\n      const predictions = await doSinglePrediction(\n        this.model,\n        video[0],\n        options\n      );\n      const camMessage = predictions\n        .map(p => ` ${p.className}: %${(p.probability * 100).toFixed(2)}`)\n        .toString();\n      this.setState({ camMessage });\n      setTimeout(this.detectWebcam, DETECTION_PERIOD);\n    }\n  };\n\n  _refWeb = webcam => {\n    this.webcam = webcam;\n  };\n\n  render () {\n    return (\n      <>\n        <button\n          className=\"myButton\"\n          onClick={() => {\n            this.setState(prevState => ({\n              webcamActive: false,\n              advancedDemo: !prevState.advancedDemo\n            }));\n          }}\n        >\n          {this.state.advancedDemo\n            ? 'Stop Neural Network'\n            : 'Start Neural Network'}\n        </button>\n        {this._renderAdvancedModel()}\n      </>\n    );\n  }\n}\n\nexport default CameraPrediction;"]},"metadata":{},"sourceType":"module"}