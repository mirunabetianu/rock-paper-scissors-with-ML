{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nexport var RuleForRangedLineNormalizer =\n/*#__PURE__*/\nfunction () {\n  function RuleForRangedLineNormalizer() {\n    _classCallCheck(this, RuleForRangedLineNormalizer);\n\n    this.name = 'RuleForRangedLine';\n  }\n\n  _createClass(RuleForRangedLineNormalizer, [{\n    key: \"hasMatchingType\",\n    value: function hasMatchingType(spec) {\n      if (isUnitSpec(spec)) {\n        var encoding = spec.encoding,\n            mark = spec.mark;\n\n        if (mark === 'line') {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = SECONDARY_RANGE_CHANNEL[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var channel = _step.value;\n              var mainChannel = getMainRangeChannel(channel);\n              var mainChannelDef = encoding[mainChannel];\n\n              if (!!encoding[channel] && isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin)) {\n                return true;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"run\",\n    value: function run(spec, params, normalize) {\n      var encoding = spec.encoding;\n      log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n      return normalize(Object.assign(Object.assign({}, spec), {\n        mark: 'rule'\n      }), params);\n    }\n  }]);\n\n  return RuleForRangedLineNormalizer;\n}();","map":null,"metadata":{},"sourceType":"module"}