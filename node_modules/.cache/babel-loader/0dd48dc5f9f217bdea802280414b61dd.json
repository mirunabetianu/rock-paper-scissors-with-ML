{"ast":null,"code":"import _slicedToArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isUrlData } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { DensityTransformNode } from './density';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { FlattenTransformNode } from './flatten';\nimport { FoldTransformNode } from './fold';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { GraticuleNode } from './graticule';\nimport { IdentifierNode } from './identifier';\nimport { ImputeNode } from './impute';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { LoessTransformNode } from './loess';\nimport { LookupNode } from './lookup';\nimport { QuantileTransformNode } from './quantile';\nimport { RegressionTransformNode } from './regression';\nimport { PivotTransformNode } from './pivot';\nimport { SampleTransformNode } from './sample';\nimport { SequenceNode } from './sequence';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\n\nfunction makeWalkTree(data) {\n  // to name datasources\n  var datasetIndex = 0;\n  /**\n   * Recursively walk down the tree.\n   */\n\n  function walkTree(node, dataSource) {\n    var _a;\n\n    if (node instanceof SourceNode) {\n      // If the source is a named data source or a data source with values, we need\n      // to put it in a different data source. Otherwise, Vega may override the data.\n      if (!node.isGenerator && !isUrlData(node.data)) {\n        data.push(dataSource);\n        var newData = {\n          name: null,\n          source: dataSource.name,\n          transform: []\n        };\n        dataSource = newData;\n      }\n    }\n\n    if (node instanceof ParseNode) {\n      if (node.parent instanceof SourceNode && !dataSource.source) {\n        var _dataSource$transform;\n\n        // If node's parent is a root source and the data source does not refer to another data source, use normal format parse\n        dataSource.format = Object.assign(Object.assign({}, (_a = dataSource.format, _a !== null && _a !== void 0 ? _a : {})), {\n          parse: node.assembleFormatParse()\n        }); // add calculates for all nested fields\n\n        (_dataSource$transform = dataSource.transform).push.apply(_dataSource$transform, _toConsumableArray(node.assembleTransforms(true)));\n      } else {\n        var _dataSource$transform2;\n\n        // Otherwise use Vega expression to parse\n        (_dataSource$transform2 = dataSource.transform).push.apply(_dataSource$transform2, _toConsumableArray(node.assembleTransforms()));\n      }\n    }\n\n    if (node instanceof FacetNode) {\n      if (!dataSource.name) {\n        dataSource.name = \"data_\".concat(datasetIndex++);\n      }\n\n      if (!dataSource.source || dataSource.transform.length > 0) {\n        data.push(dataSource);\n        node.data = dataSource.name;\n      } else {\n        node.data = dataSource.source;\n      }\n\n      node.assemble().forEach(function (d) {\n        return data.push(d);\n      }); // break here because the rest of the tree has to be taken care of by the facet.\n\n      return;\n    }\n\n    if (node instanceof GraticuleNode || node instanceof SequenceNode || node instanceof FilterInvalidNode || node instanceof FilterNode || node instanceof CalculateNode || node instanceof GeoPointNode || node instanceof GeoJSONNode || node instanceof AggregateNode || node instanceof LookupNode || node instanceof WindowTransformNode || node instanceof JoinAggregateTransformNode || node instanceof FoldTransformNode || node instanceof FlattenTransformNode || node instanceof DensityTransformNode || node instanceof LoessTransformNode || node instanceof QuantileTransformNode || node instanceof RegressionTransformNode || node instanceof IdentifierNode || node instanceof SampleTransformNode || node instanceof PivotTransformNode) {\n      dataSource.transform.push(node.assemble());\n    }\n\n    if (node instanceof BinNode || node instanceof TimeUnitNode || node instanceof ImputeNode || node instanceof StackNode) {\n      var _dataSource$transform3;\n\n      (_dataSource$transform3 = dataSource.transform).push.apply(_dataSource$transform3, _toConsumableArray(node.assemble()));\n    }\n\n    if (node instanceof OutputNode) {\n      if (dataSource.source && dataSource.transform.length === 0) {\n        node.setSource(dataSource.source);\n      } else if (node.parent instanceof OutputNode) {\n        // Note that an output node may be required but we still do not assemble a\n        // separate data source for it.\n        node.setSource(dataSource.name);\n      } else {\n        if (!dataSource.name) {\n          dataSource.name = \"data_\".concat(datasetIndex++);\n        } // Here we set the name of the datasource we generated. From now on\n        // other assemblers can use it.\n\n\n        node.setSource(dataSource.name); // if this node has more than one child, we will add a datasource automatically\n\n        if (node.numChildren() === 1) {\n          data.push(dataSource);\n          var _newData = {\n            name: null,\n            source: dataSource.name,\n            transform: []\n          };\n          dataSource = _newData;\n        }\n      }\n    }\n\n    switch (node.numChildren()) {\n      case 0:\n        // done\n        if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {\n          // do not push empty datasources that are simply references\n          data.push(dataSource);\n        }\n\n        break;\n\n      case 1:\n        walkTree(node.children[0], dataSource);\n        break;\n\n      default:\n        {\n          if (!dataSource.name) {\n            dataSource.name = \"data_\".concat(datasetIndex++);\n          }\n\n          var source = dataSource.name;\n\n          if (!dataSource.source || dataSource.transform.length > 0) {\n            data.push(dataSource);\n          } else {\n            source = dataSource.source;\n          }\n\n          node.children.forEach(function (child) {\n            var newData = {\n              name: null,\n              source: source,\n              transform: []\n            };\n            walkTree(child, newData);\n          });\n          break;\n        }\n    }\n  }\n\n  return walkTree;\n}\n/**\n * Assemble data sources that are derived from faceted data.\n */\n\n\nexport function assembleFacetData(root) {\n  var data = [];\n  var walkTree = makeWalkTree(data);\n  root.children.forEach(function (child) {\n    return walkTree(child, {\n      source: root.name,\n      name: null,\n      transform: []\n    });\n  });\n  return data;\n}\n/**\n * Create Vega Data array from a given compiled model and append all of them to the given array\n *\n * @param  model\n * @param  data array\n * @return modified data array\n */\n\nexport function assembleRootData(dataComponent, datasets) {\n  var _a, _b;\n\n  var data = []; // dataComponent.sources.forEach(debug);\n  // draw(dataComponent.sources);\n\n  var walkTree = makeWalkTree(data);\n  var sourceIndex = 0;\n  dataComponent.sources.forEach(function (root) {\n    // assign a name if the source does not have a name yet\n    if (!root.hasName()) {\n      root.dataName = \"source_\".concat(sourceIndex++);\n    }\n\n    var newData = root.assemble();\n    walkTree(root, newData);\n  }); // remove empty transform arrays for cleaner output\n\n  data.forEach(function (d) {\n    if (d.transform.length === 0) {\n      delete d.transform;\n    }\n  }); // move sources without transforms (the ones that are potentially used in lookups) to the beginning\n\n  var whereTo = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = data.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          i = _step$value[0],\n          d = _step$value[1];\n\n      if ((_a = d.transform, _a !== null && _a !== void 0 ? _a : []).length === 0 && !d.source) {\n        data.splice(whereTo++, 0, data.splice(i, 1)[0]);\n      }\n    } // now fix the from references in lookup transforms\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  for (var _i = 0, _data = data; _i < _data.length; _i++) {\n    var _d = _data[_i];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = (_b = _d.transform, _b !== null && _b !== void 0 ? _b : [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var t = _step2.value;\n\n        if (t.type === 'lookup') {\n          t.from = dataComponent.outputNodes[t.from].getSource();\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  } // inline values for datasets that are in the datastore\n\n\n  for (var _i2 = 0, _data2 = data; _i2 < _data2.length; _i2++) {\n    var _d2 = _data2[_i2];\n\n    if (_d2.name in datasets) {\n      _d2.values = datasets[_d2.name];\n    }\n  }\n\n  return data;\n}","map":null,"metadata":{},"sourceType":"module"}