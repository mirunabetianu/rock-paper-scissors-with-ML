{"ast":null,"code":"import _slicedToArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport 'array-flat-polyfill';\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport var deepEqual = deepEqual_;\nexport var duplicate = clone_;\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n\nexport function pick(obj, props) {\n  var copy = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = props[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var prop = _step.value;\n\n      if (hasOwnProperty(obj, prop)) {\n        copy[prop] = obj[prop];\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n\nexport function omit(obj, props) {\n  var copy = Object.assign({}, obj);\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = props[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var prop = _step2.value;\n      delete copy[prop];\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\n\nSet.prototype['toJSON'] = function () {\n  return \"Set(\".concat(_toConsumableArray(this).map(function (x) {\n    return stableStringify(x);\n  }).join(','), \")\");\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\n\n\nexport var stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\n\nexport function hash(a) {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  var str = isString(a) ? a : stableStringify(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n\n  if (str.length < 250) {\n    return str;\n  } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n\n\n  var h = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n\n  return h;\n}\nexport function isNullOrFalse(x) {\n  return x === false || x === null;\n}\nexport function contains(array, item) {\n  return array.indexOf(item) > -1;\n}\n/** Returns the array without the elements in item */\n\nexport function without(array, excludedItems) {\n  return array.filter(function (item) {\n    return !contains(excludedItems, item);\n  });\n}\nexport function union(array, other) {\n  return array.concat(without(other, array));\n}\n/**\n * Returns true if any item returns true.\n */\n\nexport function some(arr, f) {\n  var i = 0;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = arr.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          k = _step3$value[0],\n          a = _step3$value[1];\n\n      if (f(a, k, i++)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return false;\n}\n/**\n * Returns true if all items return true.\n */\n\nexport function every(arr, f) {\n  var i = 0;\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = arr.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          k = _step4$value[0],\n          a = _step4$value[1];\n\n      if (!f(a, k, i++)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * recursively merges src into dest\n */\n\nexport function mergeDeep(dest) {\n  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    src[_key - 1] = arguments[_key];\n  }\n\n  for (var _i = 0, _src = src; _i < _src.length; _i++) {\n    var s = _src[_i];\n    deepMerge_(dest, s !== null && s !== void 0 ? s : {});\n  }\n\n  return dest;\n}\n\nfunction deepMerge_(dest, src) {\n  for (var _i2 = 0, _Object$keys = Object.keys(src); _i2 < _Object$keys.length; _i2++) {\n    var property = _Object$keys[_i2];\n    writeConfig(dest, property, src[property], true);\n  }\n}\n\nexport function unique(values, f) {\n  var results = [];\n  var u = {};\n  var v;\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = values[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var val = _step5.value;\n      v = f(val);\n\n      if (v in u) {\n        continue;\n      }\n\n      u[v] = 1;\n      results.push(val);\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n\n  return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\n\nexport function isEqual(dict, other) {\n  var dictKeys = keys(dict);\n  var otherKeys = keys(other);\n\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n\n  var _iteratorNormalCompletion6 = true;\n  var _didIteratorError6 = false;\n  var _iteratorError6 = undefined;\n\n  try {\n    for (var _iterator6 = dictKeys[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n      var key = _step6.value;\n\n      if (dict[key] !== other[key]) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError6 = true;\n    _iteratorError6 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n        _iterator6.return();\n      }\n    } finally {\n      if (_didIteratorError6) {\n        throw _iteratorError6;\n      }\n    }\n  }\n\n  return true;\n}\nexport function setEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  var _iteratorNormalCompletion7 = true;\n  var _didIteratorError7 = false;\n  var _iteratorError7 = undefined;\n\n  try {\n    for (var _iterator7 = a[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n      var e = _step7.value;\n\n      if (!b.has(e)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError7 = true;\n    _iteratorError7 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n        _iterator7.return();\n      }\n    } finally {\n      if (_didIteratorError7) {\n        throw _iteratorError7;\n      }\n    }\n  }\n\n  return true;\n}\nexport function hasIntersection(a, b) {\n  var _iteratorNormalCompletion8 = true;\n  var _didIteratorError8 = false;\n  var _iteratorError8 = undefined;\n\n  try {\n    for (var _iterator8 = a[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n      var key = _step8.value;\n\n      if (b.has(key)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError8 = true;\n    _iteratorError8 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n        _iterator8.return();\n      }\n    } finally {\n      if (_didIteratorError8) {\n        throw _iteratorError8;\n      }\n    }\n  }\n\n  return false;\n}\nexport function prefixGenerator(a) {\n  var prefixes = new Set();\n  var _iteratorNormalCompletion9 = true;\n  var _didIteratorError9 = false;\n  var _iteratorError9 = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var x = _step9.value;\n      var splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`\n\n      var wrappedWithAccessors = splitField.map(function (y, i) {\n        return i === 0 ? y : \"[\".concat(y, \"]\");\n      });\n      var computedPrefixes = wrappedWithAccessors.map(function (_, i) {\n        return wrappedWithAccessors.slice(0, i + 1).join('');\n      });\n      computedPrefixes.forEach(function (y) {\n        return prefixes.add(y);\n      });\n    };\n\n    for (var _iterator9 = a[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError9 = true;\n    _iteratorError9 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n        _iterator9.return();\n      }\n    } finally {\n      if (_didIteratorError9) {\n        throw _iteratorError9;\n      }\n    }\n  }\n\n  return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\n\nexport function fieldIntersection(a, b) {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n} // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\n\nexport var keys = Object.keys;\nexport function vals(x) {\n  var _vals = [];\n\n  for (var k in x) {\n    if (hasOwnProperty(x, k)) {\n      _vals.push(x[k]);\n    }\n  }\n\n  return _vals;\n}\nexport function entries(x) {\n  var _entries = [];\n\n  for (var k in x) {\n    if (hasOwnProperty(x, k)) {\n      _entries.push({\n        key: k,\n        value: x[k]\n      });\n    }\n  }\n\n  return _entries;\n}\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\n\nexport function varName(s) {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  var alphanumericS = s.replace(/\\W/g, '_'); // Add _ if the string has leading numbers.\n\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n  if (isLogicalNot(op)) {\n    return '!(' + logicalExpr(op.not, cb) + ')';\n  } else if (isLogicalAnd(op)) {\n    return '(' + op.and.map(function (and) {\n      return logicalExpr(and, cb);\n    }).join(') && (') + ')';\n  } else if (isLogicalOr(op)) {\n    return '(' + op.or.map(function (or) {\n      return logicalExpr(or, cb);\n    }).join(') || (') + ')';\n  } else {\n    return cb(op);\n  }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\n\nexport function deleteNestedProperty(obj, orderedProps) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n\n  var prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n  if (deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n\n  return keys(obj).length === 0;\n}\nexport function titlecase(s) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function accessPathWithDatum(path) {\n  var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  var pieces = splitAccessPath(path);\n  var prefixes = [];\n\n  for (var i = 1; i <= pieces.length; i++) {\n    var prefix = \"[\".concat(pieces.slice(0, i).map(stringValue).join(']['), \"]\");\n    prefixes.push(\"\".concat(datum).concat(prefix));\n  }\n\n  return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function flatAccessWithDatum(path) {\n  var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  return \"\".concat(datum, \"[\").concat(stringValue(splitAccessPath(path).join('.')), \"]\");\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\n\nexport function replacePathInField(path) {\n  return \"\".concat(splitAccessPath(path).map(function (p) {\n    return replaceAll(p, '.', '\\\\.');\n  }).join('\\\\.'));\n}\n/**\n * Replace all ocurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\n\nexport function replaceAll(string, find, replacement) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\n\nexport function removePathFromField(path) {\n  return \"\".concat(splitAccessPath(path).join('.'));\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\n\nexport function accessPathDepth(path) {\n  if (!path) {\n    return 0;\n  }\n\n  return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\n\nexport function getFirstDefined() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  for (var _i3 = 0, _args = args; _i3 < _args.length; _i3++) {\n    var arg = _args[_i3];\n\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n\n  return undefined;\n} // variable used to generate id\n\nvar idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\n\nexport function uniqueId(prefix) {\n  var id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\n\nexport function resetIdCounter() {\n  idCounter = 42;\n}\nexport function internalField(name) {\n  return isInternalField(name) ? name : \"__\".concat(name);\n}\nexport function isInternalField(name) {\n  return name.indexOf('__') === 0;\n}\n/**\n * Normalize angle to be within [0,360).\n */\n\nexport function normalizeAngle(angle) {\n  return (angle % 360 + 360) % 360;\n}","map":null,"metadata":{},"sourceType":"module"}