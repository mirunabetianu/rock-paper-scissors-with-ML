{"ast":null,"code":"import _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { keys } from '../util';\nimport { parseData as _parseData } from './data/parse';\nimport { assembleLayoutSignals as _assembleLayoutSignals } from './layoutsize/assemble';\nimport { Model } from './model';\nexport var BaseConcatModel =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(BaseConcatModel, _Model);\n\n  function BaseConcatModel(spec, specType, parent, parentGivenName, config, repeater, resolve) {\n    _classCallCheck(this, BaseConcatModel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BaseConcatModel).call(this, spec, specType, parent, parentGivenName, config, repeater, resolve));\n  }\n\n  _createClass(BaseConcatModel, [{\n    key: \"parseData\",\n    value: function parseData() {\n      this.component.data = _parseData(this);\n      this.children.forEach(function (child) {\n        child.parseData();\n      });\n    }\n  }, {\n    key: \"parseSelections\",\n    value: function parseSelections() {\n      var _this = this;\n\n      // Merge selections up the hierarchy so that they may be referenced\n      // across unit specs. Persist their definitions within each child\n      // to assemble signals which remain within output Vega unit groups.\n      this.component.selection = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var child = _step.value;\n          child.parseSelections();\n          keys(child.component.selection).forEach(function (key) {\n            _this.component.selection[key] = child.component.selection[key];\n          });\n        };\n\n        for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"parseMarkGroup\",\n    value: function parseMarkGroup() {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var child = _step2.value;\n          child.parseMarkGroup();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"parseAxesAndHeaders\",\n    value: function parseAxesAndHeaders() {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var child = _step3.value;\n          child.parseAxesAndHeaders();\n        } // TODO(#2415): support shared axes\n\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"assembleSelectionTopLevelSignals\",\n    value: function assembleSelectionTopLevelSignals(signals) {\n      return this.children.reduce(function (sg, child) {\n        return child.assembleSelectionTopLevelSignals(sg);\n      }, signals);\n    }\n  }, {\n    key: \"assembleSignals\",\n    value: function assembleSignals() {\n      this.children.forEach(function (child) {\n        return child.assembleSignals();\n      });\n      return [];\n    }\n  }, {\n    key: \"assembleLayoutSignals\",\n    value: function assembleLayoutSignals() {\n      return this.children.reduce(function (signals, child) {\n        return [].concat(_toConsumableArray(signals), _toConsumableArray(child.assembleLayoutSignals()));\n      }, _assembleLayoutSignals(this));\n    }\n  }, {\n    key: \"assembleSelectionData\",\n    value: function assembleSelectionData(data) {\n      return this.children.reduce(function (db, child) {\n        return child.assembleSelectionData(db);\n      }, data);\n    }\n  }, {\n    key: \"assembleMarks\",\n    value: function assembleMarks() {\n      // only children have marks\n      return this.children.map(function (child) {\n        var title = child.assembleTitle();\n        var style = child.assembleGroupStyle();\n        var encodeEntry = child.assembleGroupEncodeEntry(false);\n        return Object.assign(Object.assign(Object.assign(Object.assign({\n          type: 'group',\n          name: child.getName('group')\n        }, title ? {\n          title: title\n        } : {}), style ? {\n          style: style\n        } : {}), encodeEntry ? {\n          encode: {\n            update: encodeEntry\n          }\n        } : {}), child.assembleGroup());\n      });\n    }\n  }]);\n\n  return BaseConcatModel;\n}(Model);","map":null,"metadata":{},"sourceType":"module"}