{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport renderHeadless from './render-headless';\nimport { RenderType as Type } from 'vega-scenegraph';\nimport { error } from 'vega-util';\n/**\n * Produce an image URL for the visualization. Depending on the type\n * parameter, the generated URL contains data for either a PNG or SVG image.\n * The URL can be used (for example) to download images of the visualization.\n * This method is asynchronous, returning a Promise instance.\n * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.\n *   The 'canvas' and 'png' types are synonyms for a PNG image.\n * @return {Promise} - A promise that resolves to an image URL.\n */\n\nexport default function (_x, _x2) {\n  return _ref.apply(this, arguments);\n}\n\nfunction _ref() {\n  _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(type, scaleFactor) {\n    var r;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (type !== Type.Canvas && type !== Type.SVG && type !== Type.PNG) {\n              error('Unrecognized image type: ' + type);\n            }\n\n            _context.next = 3;\n            return renderHeadless(this, type, scaleFactor);\n\n          case 3:\n            r = _context.sent;\n            return _context.abrupt(\"return\", type === Type.SVG ? toBlobURL(r.svg(), 'image/svg+xml') : r.canvas().toDataURL('image/png'));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _ref.apply(this, arguments);\n}\n\nfunction toBlobURL(data, mime) {\n  var blob = new Blob([data], {\n    type: mime\n  });\n  return window.URL.createObjectURL(blob);\n}","map":null,"metadata":{},"sourceType":"module"}