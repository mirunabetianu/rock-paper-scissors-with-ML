{"ast":null,"code":"import _defineProperty from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Top, Bottom, Left, Right, Label, Value, GuideLabelStyle, zero, one } from './constants';\nimport guideMark from './guide-mark';\nimport { lookup } from './guide-util';\nimport { TextMark } from '../marks/marktypes';\nimport { AxisLabelRole } from '../marks/roles';\nimport { addEncoders, encoder } from '../encode/encode-util';\nimport { deref } from '../../util';\n\nfunction flushExpr(scale, threshold, a, b, c) {\n  return {\n    signal: 'flush(range(\"' + scale + '\"), ' + 'scale(\"' + scale + '\", datum.value), ' + threshold + ',' + a + ',' + b + ',' + c + ')'\n  };\n}\n\nexport default function (spec, config, userEncode, dataRef, size, band) {\n  var _addEncoders;\n\n  var _ = lookup(spec, config),\n      orient = spec.orient,\n      sign = orient === Left || orient === Top ? -1 : 1,\n      isXAxis = orient === Top || orient === Bottom,\n      scale = spec.scale,\n      flush = deref(_('labelFlush')),\n      flushOffset = deref(_('labelFlushOffset')),\n      flushOn = flush === 0 || !!flush,\n      labelAlign = _('labelAlign'),\n      labelBaseline = _('labelBaseline'),\n      encode,\n      enter,\n      tickSize,\n      tickPos,\n      align,\n      baseline,\n      offset,\n      bound,\n      overlap,\n      separation;\n\n  tickSize = encoder(size);\n  tickSize.mult = sign;\n  tickSize.offset = encoder(_('labelPadding') || 0);\n  tickSize.offset.mult = sign;\n  tickPos = {\n    scale: scale,\n    field: Value,\n    band: 0.5,\n    offset: band.offset\n  };\n\n  if (isXAxis) {\n    align = labelAlign || (flushOn ? flushExpr(scale, flush, '\"left\"', '\"right\"', '\"center\"') : 'center');\n    baseline = labelBaseline || (orient === Top ? 'bottom' : 'top');\n    offset = !labelAlign;\n  } else {\n    align = labelAlign || (orient === Right ? 'left' : 'right');\n    baseline = labelBaseline || (flushOn ? flushExpr(scale, flush, '\"top\"', '\"bottom\"', '\"middle\"') : 'middle');\n    offset = !labelBaseline;\n  }\n\n  offset = offset && flushOn && flushOffset ? flushExpr(scale, flush, '-(' + flushOffset + ')', flushOffset, 0) : null;\n  encode = {\n    enter: enter = {\n      opacity: zero,\n      x: isXAxis ? tickPos : tickSize,\n      y: isXAxis ? tickSize : tickPos\n    },\n    update: {\n      opacity: one,\n      text: {\n        field: Label\n      },\n      x: enter.x,\n      y: enter.y\n    },\n    exit: {\n      opacity: zero,\n      x: enter.x,\n      y: enter.y\n    }\n  };\n  addEncoders(encode, (_addEncoders = {}, _defineProperty(_addEncoders, isXAxis ? 'dx' : 'dy', offset), _defineProperty(_addEncoders, \"align\", align), _defineProperty(_addEncoders, \"baseline\", baseline), _defineProperty(_addEncoders, \"angle\", _('labelAngle')), _defineProperty(_addEncoders, \"fill\", _('labelColor')), _defineProperty(_addEncoders, \"fillOpacity\", _('labelOpacity')), _defineProperty(_addEncoders, \"font\", _('labelFont')), _defineProperty(_addEncoders, \"fontSize\", _('labelFontSize')), _defineProperty(_addEncoders, \"fontWeight\", _('labelFontWeight')), _defineProperty(_addEncoders, \"fontStyle\", _('labelFontStyle')), _defineProperty(_addEncoders, \"limit\", _('labelLimit')), _addEncoders));\n  bound = _('labelBound');\n  overlap = _('labelOverlap');\n  separation = _('labelSeparation');\n  spec = guideMark(TextMark, AxisLabelRole, GuideLabelStyle, Value, dataRef, encode, userEncode); // if overlap method or bound defined, request label overlap removal\n\n  if (overlap || bound) {\n    spec.overlap = {\n      separation: separation,\n      method: overlap,\n      order: 'datum.index',\n      bound: bound ? {\n        scale: scale,\n        orient: orient,\n        tolerance: bound\n      } : null\n    };\n  }\n\n  return spec;\n}","map":null,"metadata":{},"sourceType":"module"}