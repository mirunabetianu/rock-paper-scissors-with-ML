{"ast":null,"code":"import { Feature, FeatureCollection } from './constants';\nimport { Transform } from 'vega-dataflow';\nimport { projection, projectionProperties } from 'vega-projection';\nimport { array, error, inherits, isFunction } from 'vega-util';\n/**\n * Maintains a cartographic projection.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\n\nexport default function Projection(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\nvar prototype = inherits(Projection, Transform);\n\nprototype.transform = function (_, pulse) {\n  var proj = this.value;\n\n  if (!proj || _.modified('type')) {\n    this.value = proj = create(_.type);\n    projectionProperties.forEach(function (prop) {\n      if (_[prop] != null) set(proj, prop, _[prop]);\n    });\n  } else {\n    projectionProperties.forEach(function (prop) {\n      if (_.modified(prop)) set(proj, prop, _[prop]);\n    });\n  }\n\n  if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);\n  if (_.fit) fit(proj, _);\n  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n};\n\nfunction fit(proj, _) {\n  var data = collectGeoJSON(_.fit);\n  _.extent ? proj.fitExtent(_.extent, data) : _.size ? proj.fitSize(_.size, data) : 0;\n}\n\nfunction create(type) {\n  var constructor = projection((type || 'mercator').toLowerCase());\n  if (!constructor) error('Unrecognized projection type: ' + type);\n  return constructor();\n}\n\nfunction set(proj, key, value) {\n  if (isFunction(proj[key])) proj[key](value);\n}\n\nexport function collectGeoJSON(data) {\n  data = array(data);\n  return data.length === 1 ? data[0] : {\n    type: FeatureCollection,\n    features: data.reduce(function (a, f) {\n      return a.concat(featurize(f));\n    }, [])\n  };\n}\n\nfunction featurize(f) {\n  return f.type === FeatureCollection ? f.features : array(f).filter(function (d) {\n    return d != null;\n  }).map(function (d) {\n    return d.type === Feature ? d : {\n      type: Feature,\n      geometry: d\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module"}