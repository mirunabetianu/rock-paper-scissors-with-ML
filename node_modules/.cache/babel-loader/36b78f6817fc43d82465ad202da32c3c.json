{"ast":null,"code":"import _slicedToArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { entries, uniqueId } from './../../util';\nimport { OutputNode } from './dataflow';\nimport { SourceNode } from './source';\n/**\n * Print debug information for dataflow tree.\n */\n\nexport function debug(node) {\n  console.log(\"\".concat(node.constructor.name).concat(node.debugName ? \"(\".concat(node.debugName, \")\") : '', \" -> \").concat(node.children.map(function (c) {\n    return \"\".concat(c.constructor.name).concat(c.debugName ? \" (\".concat(c.debugName, \")\") : '');\n  })));\n  console.log(node);\n  node.children.forEach(debug);\n}\n/**\n * Print the dataflow tree as graphviz.\n *\n * Render the output in http://viz-js.com/.\n */\n\nexport function draw(roots) {\n  // check the graph before printing it since the logic below assumes a consistent graph\n  checkLinks(roots);\n  var nodes = {};\n  var edges = [];\n\n  function getId(node) {\n    var id = node['__uniqueid'];\n\n    if (id === undefined) {\n      id = uniqueId();\n      node['__uniqueid'] = id;\n    }\n\n    return id;\n  }\n\n  function getLabel(node) {\n    var _a, _b, _c;\n\n    var out = [node.constructor.name.slice(0, -4)];\n\n    if (node.debugName) {\n      out.push(\"<i>\".concat(node.debugName, \"</i>\"));\n    } else if (node instanceof SourceNode) {\n      if (node.data.name || node.data.url) {\n        out.push(\"<i>\".concat((_a = node.data.name, _a !== null && _a !== void 0 ? _a : node.data.url), \"</i>\"));\n      }\n    }\n\n    var dep = node.dependentFields();\n\n    if ((_b = dep) === null || _b === void 0 ? void 0 : _b.size) {\n      out.push(\"<font color=\\\"grey\\\" point-size=\\\"10\\\">IN:</font> \".concat(_toConsumableArray(node.dependentFields()).join(', ')));\n    }\n\n    var prod = node.producedFields();\n\n    if ((_c = prod) === null || _c === void 0 ? void 0 : _c.size) {\n      out.push(\"<font color=\\\"grey\\\" point-size=\\\"10\\\">OUT:</font> \".concat(_toConsumableArray(node.producedFields()).join(', ')));\n    }\n\n    if (node instanceof OutputNode) {\n      out.push(\"<font color=\\\"grey\\\" point-size=\\\"10\\\">required:</font> \".concat(node.isRequired()));\n    }\n\n    return out.join('<br/>');\n  }\n\n  function collector(node) {\n    var _a, _b;\n\n    var id = getId(node);\n    nodes[id] = {\n      id: id,\n      label: getLabel(node),\n      hash: node instanceof SourceNode ? (_b = (_a = node.data.url, _a !== null && _a !== void 0 ? _a : node.data.name), _b !== null && _b !== void 0 ? _b : node.debugName) : String(node.hash()).replace(/\"/g, '')\n    };\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = node.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var child = _step.value;\n        edges.push([id, getId(child)]);\n        collector(child);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  roots.forEach(function (n) {\n    return collector(n);\n  });\n  var dot = \"digraph DataFlow {\\n  rankdir = TB;\\n  node [shape=record]\\n  \".concat(entries(nodes).map(function (_ref) {\n    var key = _ref.key,\n        value = _ref.value;\n    return \"  \\\"\".concat(key, \"\\\" [\\n    label = <\").concat(value.label, \">;\\n    tooltip = \\\"[\").concat(value.id, \"]&#010;\").concat(value.hash, \"\\\"\\n  ]\");\n  }).join('\\n'), \"\\n\\n  \").concat(edges.map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        source = _ref3[0],\n        target = _ref3[1];\n\n    return \"\\\"\".concat(source, \"\\\" -> \\\"\").concat(target, \"\\\"\");\n  }).join(' '), \"\\n}\");\n  console.log(dot);\n  return dot;\n}\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\n\nexport function checkLinks(nodes) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var node = _step2.value;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = node.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var child = _step3.value;\n\n          if (child.parent !== node) {\n            console.error('Dataflow graph is inconsistent.', node, child);\n            return false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (!checkLinks(node.children)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}