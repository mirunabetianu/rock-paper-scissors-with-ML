{"ast":null,"code":"import { context } from './canvas/context';\nimport Bounds from '../Bounds';\nvar b = new Bounds();\nexport function intersectPath(draw) {\n  return function (item, brush) {\n    // rely on (inaccurate) bounds intersection if no context\n    if (!context) return true; // add path to offscreen graphics context\n\n    draw(context, item); // get bounds intersection region\n\n    b.clear().union(item.bounds).intersect(brush).round();\n    var x1 = b.x1,\n        y1 = b.y1,\n        x2 = b.x2,\n        y2 = b.y2; // iterate over intersection region\n    // perform fine grained inclusion test\n\n    for (var y = y1; y <= y2; ++y) {\n      for (var x = x1; x <= x2; ++x) {\n        if (context.isPointInPath(x, y)) {\n          return true;\n        }\n      }\n    } // false if no hits in intersection region\n\n\n    return false;\n  };\n}\nexport function intersectPoint(item, box) {\n  return box.contains(item.x || 0, item.y || 0);\n}\nexport function intersectRect(item, box) {\n  var x = item.x || 0,\n      y = item.y || 0,\n      w = item.width || 0,\n      h = item.height || 0;\n  return box.intersects(b.set(x, y, x + w, y + h));\n}\nexport function intersectRule(item, box) {\n  var x = item.x || 0,\n      y = item.y || 0,\n      x2 = item.x2 != null ? item.x2 : x,\n      y2 = item.y2 != null ? item.y2 : y;\n  return intersectBoxLine(box, x, y, x2, y2);\n}\nexport function intersectBoxLine(box, x, y, u, v) {\n  var x1 = box.x1,\n      y1 = box.y1,\n      x2 = box.x2,\n      y2 = box.y2,\n      dx = u - x,\n      dy = v - y;\n  var t0 = 0,\n      t1 = 1,\n      p,\n      q,\n      r,\n      e;\n\n  for (e = 0; e < 4; ++e) {\n    if (e === 0) {\n      p = -dx;\n      q = -(x1 - x);\n    }\n\n    if (e === 1) {\n      p = dx;\n      q = x2 - x;\n    }\n\n    if (e === 2) {\n      p = -dy;\n      q = -(y1 - y);\n    }\n\n    if (e === 3) {\n      p = dy;\n      q = y2 - y;\n    }\n\n    if (Math.abs(p) < 1e-10 && q < 0) return false;\n    r = q / p;\n\n    if (p < 0) {\n      if (r > t1) return false;else if (r > t0) t0 = r;\n    } else if (p > 0) {\n      if (r < t0) return false;else if (r < t1) t1 = r;\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}