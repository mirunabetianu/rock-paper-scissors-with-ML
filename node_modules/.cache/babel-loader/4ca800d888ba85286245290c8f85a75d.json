{"ast":null,"code":"import { vgField } from '../../channeldef';\nimport { DEFAULT_SORT_OP, isSortField } from '../../sort';\nimport { facetSortFieldName } from '../facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nexport function makeJoinAggregateFromFacet(parent, facet) {\n  var row = facet.row,\n      column = facet.column;\n\n  if (row && column) {\n    var newParent = null; // only need to make one for crossed facet\n\n    for (var _i = 0, _arr = [row, column]; _i < _arr.length; _i++) {\n      var fieldDef = _arr[_i];\n\n      if (isSortField(fieldDef.sort)) {\n        var _fieldDef$sort = fieldDef.sort,\n            field = _fieldDef$sort.field,\n            _fieldDef$sort$op = _fieldDef$sort.op,\n            op = _fieldDef$sort$op === void 0 ? DEFAULT_SORT_OP : _fieldDef$sort$op;\n        parent = newParent = new JoinAggregateTransformNode(parent, {\n          joinaggregate: [{\n            op: op,\n            field: field,\n            as: facetSortFieldName(fieldDef, fieldDef.sort, {\n              forAs: true\n            })\n          }],\n          groupby: [vgField(fieldDef)]\n        });\n      }\n    }\n\n    return newParent;\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}