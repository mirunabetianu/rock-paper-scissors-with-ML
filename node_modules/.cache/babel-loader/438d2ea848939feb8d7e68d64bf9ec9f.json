{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { array, isString } from 'vega-util';\nimport * as log from '../../log';\nimport { isLookupData, isLookupSelection } from '../../transform';\nimport { duplicate, hash as _hash, varName } from '../../util';\nimport { DataFlowNode, OutputNode } from './dataflow';\nimport { findSource } from './parse';\nimport { SourceNode } from './source';\nexport var LookupNode =\n/*#__PURE__*/\nfunction (_DataFlowNode) {\n  _inherits(LookupNode, _DataFlowNode);\n\n  function LookupNode(parent, transform, secondary) {\n    var _this;\n\n    _classCallCheck(this, LookupNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LookupNode).call(this, parent));\n    _this.transform = transform;\n    _this.secondary = secondary;\n    return _this;\n  }\n\n  _createClass(LookupNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new LookupNode(null, duplicate(this.transform), this.secondary);\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return new Set([this.transform.lookup]);\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"Lookup \".concat(_hash({\n        transform: this.transform,\n        secondary: this.secondary\n      }));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var foreign;\n\n      if (this.transform.from.fields) {\n        // lookup a few fields and add create a flat output\n        foreign = Object.assign({\n          values: this.transform.from.fields\n        }, this.transform.as ? {\n          as: array(this.transform.as)\n        } : {});\n      } else {\n        // lookup full record and nest it\n        var asName = this.transform.as;\n\n        if (!isString(asName)) {\n          log.warn(log.message.NO_FIELDS_NEEDS_AS);\n          asName = '_lookup';\n        }\n\n        foreign = {\n          as: [asName]\n        };\n      }\n\n      return Object.assign(Object.assign({\n        type: 'lookup',\n        from: this.secondary,\n        key: this.transform.from.key,\n        fields: [this.transform.lookup]\n      }, foreign), this.transform.default ? {\n        default: this.transform.default\n      } : {});\n    }\n  }], [{\n    key: \"make\",\n    value: function make(parent, model, transform, counter) {\n      var _a;\n\n      var sources = model.component.data.sources;\n      var from = transform.from;\n      var fromOutputNode = null;\n\n      if (isLookupData(from)) {\n        var fromSource = findSource(from.data, sources);\n\n        if (!fromSource) {\n          fromSource = new SourceNode(from.data);\n          sources.push(fromSource);\n        }\n\n        var fromOutputName = model.getName(\"lookup_\".concat(counter));\n        fromOutputNode = new OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);\n        model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n      } else if (isLookupSelection(from)) {\n        var selName = from.selection;\n        transform.as = (_a = transform.as, _a !== null && _a !== void 0 ? _a : selName);\n        fromOutputNode = model.getSelectionComponent(varName(selName), selName).materialized;\n\n        if (!fromOutputNode) {\n          throw new Error(log.message.noSameUnitLookup(selName));\n        }\n      }\n\n      return new LookupNode(parent, transform, fromOutputNode.getSource());\n    }\n  }]);\n\n  return LookupNode;\n}(DataFlowNode);","map":null,"metadata":{},"sourceType":"module"}