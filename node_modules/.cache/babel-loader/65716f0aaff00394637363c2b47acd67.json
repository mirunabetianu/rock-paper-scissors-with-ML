{"ast":null,"code":"import { codegen, constants, functions } from 'vega-expression';\nimport { isTuple } from 'vega-dataflow';\nimport { selectionTest, selectionResolve, selectionVisitor } from 'vega-selections';\nimport { random as _random, cumulativeNormal, cumulativeLogNormal, cumulativeUniform, densityNormal, densityLogNormal, densityUniform, quantileNormal, quantileLogNormal, quantileUniform, sampleNormal, sampleLogNormal, sampleUniform } from 'vega-statistics';\nimport { timeOffset, timeSequence, timeUnitSpecifier, utcOffset, utcSequence } from 'vega-time';\nimport { isArray, isBoolean, isDate, isNumber, isObject, isRegExp, isString, panLinear, panLog, panPow, panSymlog, zoomLinear, zoomLog, zoomPow, zoomSymlog, toBoolean, toDate, toNumber, toString, clampRange, extent, flush, inrange, lerp, pad, peek, quarter, utcquarter, span, stringValue, truncate } from 'vega-util';\nimport { range as sequence } from 'd3-array';\nimport { rgb, lab, hcl, hsl } from 'd3-color';\nimport { luminance, contrast } from './luminance';\nimport { data, indata, setdata } from './data';\nimport { default as encode } from './encode';\nimport { format, utcFormat, timeFormat, utcParse, timeParse, monthFormat, monthAbbrevFormat, dayFormat, dayAbbrevFormat } from './format';\nimport { geoArea, geoBounds, geoCentroid } from './geo';\nimport { default as inScope } from './inscope';\nimport { default as intersect } from './intersect';\nimport { warn, info, debug } from './log';\nimport { default as merge } from './merge';\nimport { default as modify } from './modify';\nimport { pinchDistance, pinchAngle } from './pinch';\nimport { range, domain, bandwidth, bandspace, copy, scale, invert } from './scale';\nimport { default as scaleGradient } from './scale-gradient';\nimport { geoShape, pathShape } from './shape';\nimport { treePath, treeAncestors } from './tree';\nimport { containerSize, screen, windowSize } from './window';\nimport { dataVisitor, indataVisitor, scaleVisitor } from './visitors';\nimport { SignalPrefix } from './prefix'; // Expression function context object\n\nexport var functionContext = {\n  random: function random() {\n    return _random();\n  },\n  // override default\n  cumulativeNormal: cumulativeNormal,\n  cumulativeLogNormal: cumulativeLogNormal,\n  cumulativeUniform: cumulativeUniform,\n  densityNormal: densityNormal,\n  densityLogNormal: densityLogNormal,\n  densityUniform: densityUniform,\n  quantileNormal: quantileNormal,\n  quantileLogNormal: quantileLogNormal,\n  quantileUniform: quantileUniform,\n  sampleNormal: sampleNormal,\n  sampleLogNormal: sampleLogNormal,\n  sampleUniform: sampleUniform,\n  isArray: isArray,\n  isBoolean: isBoolean,\n  isDate: isDate,\n  isDefined: function isDefined(_) {\n    return _ !== undefined;\n  },\n  isNumber: isNumber,\n  isObject: isObject,\n  isRegExp: isRegExp,\n  isString: isString,\n  isTuple: isTuple,\n  isValid: function isValid(_) {\n    return _ != null && _ === _;\n  },\n  toBoolean: toBoolean,\n  toDate: toDate,\n  toNumber: toNumber,\n  toString: toString,\n  flush: flush,\n  lerp: lerp,\n  merge: merge,\n  pad: pad,\n  peek: peek,\n  span: span,\n  inrange: inrange,\n  truncate: truncate,\n  rgb: rgb,\n  lab: lab,\n  hcl: hcl,\n  hsl: hsl,\n  luminance: luminance,\n  contrast: contrast,\n  sequence: sequence,\n  format: format,\n  utcFormat: utcFormat,\n  utcParse: utcParse,\n  utcOffset: utcOffset,\n  utcSequence: utcSequence,\n  timeFormat: timeFormat,\n  timeParse: timeParse,\n  timeOffset: timeOffset,\n  timeSequence: timeSequence,\n  timeUnitSpecifier: timeUnitSpecifier,\n  monthFormat: monthFormat,\n  monthAbbrevFormat: monthAbbrevFormat,\n  dayFormat: dayFormat,\n  dayAbbrevFormat: dayAbbrevFormat,\n  quarter: quarter,\n  utcquarter: utcquarter,\n  warn: warn,\n  info: info,\n  debug: debug,\n  extent: extent,\n  inScope: inScope,\n  intersect: intersect,\n  clampRange: clampRange,\n  pinchDistance: pinchDistance,\n  pinchAngle: pinchAngle,\n  screen: screen,\n  containerSize: containerSize,\n  windowSize: windowSize,\n  bandspace: bandspace,\n  setdata: setdata,\n  pathShape: pathShape,\n  panLinear: panLinear,\n  panLog: panLog,\n  panPow: panPow,\n  panSymlog: panSymlog,\n  zoomLinear: zoomLinear,\n  zoomLog: zoomLog,\n  zoomPow: zoomPow,\n  zoomSymlog: zoomSymlog,\n  encode: encode,\n  modify: modify\n};\nvar eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'],\n    // event functions\neventPrefix = 'event.vega.',\n    // event function prefix\nthisPrefix = 'this.',\n    // function context prefix\nastVisitors = {}; // AST visitors for dependency analysis\n// Build expression function registry\n\nfunction buildFunctions(codegen) {\n  var fn = functions(codegen);\n  eventFunctions.forEach(function (name) {\n    return fn[name] = eventPrefix + name;\n  });\n\n  for (var name in functionContext) {\n    fn[name] = thisPrefix + name;\n  }\n\n  return fn;\n} // Register an expression function\n\n\nexport function expressionFunction(name, fn, visitor) {\n  if (arguments.length === 1) {\n    return functionContext[name];\n  } // register with the functionContext\n\n\n  functionContext[name] = fn; // if there is an astVisitor register that, too\n\n  if (visitor) astVisitors[name] = visitor; // if the code generator has already been initialized,\n  // we need to also register the function with it\n\n  if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;\n  return this;\n} // register expression functions with ast visitors\n\nexpressionFunction('bandwidth', bandwidth, scaleVisitor);\nexpressionFunction('copy', copy, scaleVisitor);\nexpressionFunction('domain', domain, scaleVisitor);\nexpressionFunction('range', range, scaleVisitor);\nexpressionFunction('invert', invert, scaleVisitor);\nexpressionFunction('scale', scale, scaleVisitor);\nexpressionFunction('gradient', scaleGradient, scaleVisitor);\nexpressionFunction('geoArea', geoArea, scaleVisitor);\nexpressionFunction('geoBounds', geoBounds, scaleVisitor);\nexpressionFunction('geoCentroid', geoCentroid, scaleVisitor);\nexpressionFunction('geoShape', geoShape, scaleVisitor);\nexpressionFunction('indata', indata, indataVisitor);\nexpressionFunction('data', data, dataVisitor);\nexpressionFunction('treePath', treePath, dataVisitor);\nexpressionFunction('treeAncestors', treeAncestors, dataVisitor); // register Vega-Lite selection functions\n\nexpressionFunction('vlSelectionTest', selectionTest, selectionVisitor);\nexpressionFunction('vlSelectionResolve', selectionResolve, selectionVisitor); // Export code generator and parameters\n\nexport var codegenParams = {\n  blacklist: ['_'],\n  whitelist: ['datum', 'event', 'item'],\n  fieldvar: 'datum',\n  globalvar: function globalvar(id) {\n    return '_[' + stringValue(SignalPrefix + id) + ']';\n  },\n  functions: buildFunctions,\n  constants: constants,\n  visitors: astVisitors\n};\nexport var codeGenerator = codegen(codegenParams);","map":null,"metadata":{},"sourceType":"module"}