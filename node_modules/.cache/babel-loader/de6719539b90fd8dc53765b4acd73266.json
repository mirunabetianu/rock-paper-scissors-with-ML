{"ast":null,"code":"import HierarchyLayout from './HierarchyLayout';\nimport { error, hasOwnProperty, inherits } from 'vega-util';\nimport { tree, cluster } from 'd3-hierarchy';\nvar Layouts = {\n  tidy: tree,\n  cluster: cluster\n};\nvar Output = ['x', 'y', 'depth', 'children'];\n/**\n * Tree layout. Depending on the method parameter, performs either\n * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\n\nexport default function Tree(params) {\n  HierarchyLayout.call(this, params);\n}\nTree.Definition = {\n  \"type\": \"Tree\",\n  \"metadata\": {\n    \"tree\": true,\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"field\",\n    \"type\": \"field\"\n  }, {\n    \"name\": \"sort\",\n    \"type\": \"compare\"\n  }, {\n    \"name\": \"method\",\n    \"type\": \"enum\",\n    \"default\": \"tidy\",\n    \"values\": [\"tidy\", \"cluster\"]\n  }, {\n    \"name\": \"size\",\n    \"type\": \"number\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"nodeSize\",\n    \"type\": \"number\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"separation\",\n    \"type\": \"boolean\",\n    \"default\": true\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"array\": true,\n    \"length\": Output.length,\n    \"default\": Output\n  }]\n};\nvar prototype = inherits(Tree, HierarchyLayout);\n/**\n * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n */\n\nprototype.layout = function (method) {\n  var m = method || 'tidy';\n  if (hasOwnProperty(Layouts, m)) return Layouts[m]();else error('Unrecognized Tree layout method: ' + m);\n};\n\nprototype.params = ['size', 'nodeSize'];\nprototype.fields = Output;","map":null,"metadata":{},"sourceType":"module"}