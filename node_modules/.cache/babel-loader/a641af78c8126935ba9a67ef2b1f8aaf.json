{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport var FilterNode =\n/*#__PURE__*/\nfunction (_DataFlowNode) {\n  _inherits(FilterNode, _DataFlowNode);\n\n  function FilterNode(parent, model, filter) {\n    var _this;\n\n    _classCallCheck(this, FilterNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterNode).call(this, parent));\n    _this.model = model;\n    _this.filter = filter; // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n\n    _this.expr = expression(_this.model, _this.filter, _assertThisInitialized(_assertThisInitialized(_this)));\n    _this._dependentFields = getDependentFields(_this.expr);\n    return _this;\n  }\n\n  _createClass(FilterNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new FilterNode(null, this.model, duplicate(this.filter));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return this._dependentFields;\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(); // filter does not produce any new fields\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      return {\n        type: 'filter',\n        expr: this.expr\n      };\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"Filter \".concat(this.expr);\n    }\n  }]);\n\n  return FilterNode;\n}(DataFlowNode);","map":null,"metadata":{},"sourceType":"module"}