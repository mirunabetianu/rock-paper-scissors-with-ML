{"ast":null,"code":"import _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { duplicate, hash as _hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\n\nexport var PivotTransformNode =\n/*#__PURE__*/\nfunction (_DataFlowNode) {\n  _inherits(PivotTransformNode, _DataFlowNode);\n\n  function PivotTransformNode(parent, transform) {\n    var _this;\n\n    _classCallCheck(this, PivotTransformNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PivotTransformNode).call(this, parent));\n    _this.transform = transform;\n    return _this;\n  }\n\n  _createClass(PivotTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PivotTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"addDimensions\",\n    value: function addDimensions(fields) {\n      var _a;\n\n      this.transform.groupby = unique((_a = this.transform.groupby, _a !== null && _a !== void 0 ? _a : []).concat(fields), function (d) {\n        return d;\n      });\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return undefined; // return undefined so that potentially everything can depend on the pivot\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      var _a;\n\n      return new Set([this.transform.pivot, this.transform.value].concat(_toConsumableArray((_a = this.transform.groupby, _a !== null && _a !== void 0 ? _a : []))));\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"PivotTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _this$transform = this.transform,\n          pivot = _this$transform.pivot,\n          value = _this$transform.value,\n          groupby = _this$transform.groupby,\n          limit = _this$transform.limit,\n          op = _this$transform.op;\n      return Object.assign(Object.assign(Object.assign({\n        type: 'pivot',\n        field: pivot,\n        value: value\n      }, limit !== undefined ? {\n        limit: limit\n      } : {}), op !== undefined ? {\n        op: op\n      } : {}), groupby !== undefined ? {\n        groupby: groupby\n      } : {});\n    }\n  }]);\n\n  return PivotTransformNode;\n}(DataFlowNode);","map":null,"metadata":{},"sourceType":"module"}