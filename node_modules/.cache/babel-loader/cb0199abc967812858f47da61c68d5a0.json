{"ast":null,"code":"import getScale from './scales';\nimport { constant, peek } from 'vega-util';\nimport * as $ from 'd3-interpolate';\nvar scaleProps = ['clamp', 'base', 'constant', 'exponent'];\nexport function interpolateRange(interpolator, range) {\n  var start = range[0],\n      span = peek(range) - start;\n  return function (i) {\n    return interpolator(start + i * span);\n  };\n}\nexport function interpolateColors(colors, type, gamma) {\n  return $.piecewise(interpolate(type || 'rgb', gamma), colors);\n}\nexport function quantizeInterpolator(interpolator, count) {\n  var samples = new Array(count),\n      n = count + 1;\n\n  for (var i = 0; i < count;) {\n    samples[i] = interpolator(++i / n);\n  }\n\n  return samples;\n}\nexport function scaleCopy(scale) {\n  var t = scale.type,\n      s = scale.copy();\n  s.type = t;\n  return s;\n}\nexport function scaleFraction(scale, min, max) {\n  var delta = max - min,\n      i,\n      t,\n      s;\n\n  if (!delta || !Number.isFinite(delta)) {\n    return constant(0.5);\n  } else {\n    i = (t = scale.type).indexOf('-');\n    t = i < 0 ? t : t.slice(i + 1);\n    s = getScale(t)().domain([min, max]).range([0, 1]);\n    scaleProps.forEach(function (m) {\n      return scale[m] ? s[m](scale[m]()) : 0;\n    });\n    return s;\n  }\n}\nexport function interpolate(type, gamma) {\n  var interp = $[method(type)];\n  return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;\n}\n\nfunction method(type) {\n  return 'interpolate' + type.toLowerCase().split('-').map(function (s) {\n    return s[0].toUpperCase() + s.slice(1);\n  }).join('');\n}","map":null,"metadata":{},"sourceType":"module"}