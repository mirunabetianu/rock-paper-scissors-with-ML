{"ast":null,"code":"import { tickCount, tickFormat, tickValues, validTicks } from './ticks';\nimport { Transform, ingest } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\n/**\n * Generates axis ticks for visualizing a spatial scale.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Scale} params.scale - The scale to generate ticks for.\n * @param {*} [params.count=10] - The approximate number of ticks, or\n *   desired tick interval, to use.\n * @param {Array<*>} [params.values] - The exact tick values to use.\n *   These must be legal domain values for the provided scale.\n *   If provided, the count argument is ignored.\n * @param {function(*):string} [params.formatSpecifier] - A format specifier\n *   to use in conjunction with scale.tickFormat. Legal values are\n *   any valid d3 4.0 format specifier.\n * @param {function(*):string} [params.format] - The format function to use.\n *   If provided, the formatSpecifier argument is ignored.\n */\n\nexport default function AxisTicks(params) {\n  Transform.call(this, null, params);\n}\nvar prototype = inherits(AxisTicks, Transform);\n\nprototype.transform = function (_, pulse) {\n  if (this.value && !_.modified()) {\n    return pulse.StopPropagation;\n  }\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      ticks = this.value,\n      scale = _.scale,\n      tally = _.count == null ? _.values ? _.values.length : 10 : _.count,\n      count = tickCount(scale, tally, _.minstep),\n      format = _.format || tickFormat(scale, count, _.formatSpecifier, _.formatType, !!_.values),\n      values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);\n  if (ticks) out.rem = ticks;\n  ticks = values.map(function (value, i) {\n    return ingest({\n      index: i / (values.length - 1 || 1),\n      value: value,\n      label: format(value)\n    });\n  });\n\n  if (_.extra && ticks.length) {\n    // add an extra tick pegged to the initial domain value\n    // this is used to generate axes with 'binned' domains\n    ticks.push(ingest({\n      index: -1,\n      extra: {\n        value: ticks[0].value\n      },\n      label: ''\n    }));\n  }\n\n  out.source = ticks;\n  out.add = ticks;\n  this.value = ticks;\n  return out;\n};","map":null,"metadata":{},"sourceType":"module"}