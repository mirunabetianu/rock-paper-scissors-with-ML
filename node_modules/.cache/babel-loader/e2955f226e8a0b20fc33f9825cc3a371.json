{"ast":null,"code":"import { Transform } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\nimport { Delaunay } from 'd3-delaunay';\nexport default function Voronoi(params) {\n  Transform.call(this, null, params);\n}\nVoronoi.Definition = {\n  \"type\": \"Voronoi\",\n  \"metadata\": {\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"x\",\n    \"type\": \"field\",\n    \"required\": true\n  }, {\n    \"name\": \"y\",\n    \"type\": \"field\",\n    \"required\": true\n  }, {\n    \"name\": \"size\",\n    \"type\": \"number\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"extent\",\n    \"type\": \"array\",\n    \"array\": true,\n    \"length\": 2,\n    \"default\": [[-1e5, -1e5], [1e5, 1e5]],\n    \"content\": {\n      \"type\": \"number\",\n      \"array\": true,\n      \"length\": 2\n    }\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"default\": \"path\"\n  }]\n};\nvar prototype = inherits(Voronoi, Transform);\nvar defaultExtent = [-1e5, -1e5, 1e5, 1e5];\n\nprototype.transform = function (_, pulse) {\n  var as = _.as || 'path',\n      data = pulse.source; // nothing to do if no data\n\n  if (!data || !data.length) return pulse; // configure and construct voronoi diagram\n\n  var s = _.size;\n  s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;\n  var voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s); // map polygons to paths\n\n  for (var i = 0, n = data.length; i < n; ++i) {\n    var polygon = voronoi.cellPolygon(i);\n    data[i][as] = polygon ? toPathString(polygon) : null;\n  }\n\n  return pulse.reflow(_.modified()).modifies(as);\n}; // suppress duplicated end point vertices\n\n\nfunction toPathString(p) {\n  var x = p[0][0],\n      y = p[0][1];\n  var n = p.length - 1;\n\n  for (; p[n][0] === x && p[n][1] === y; --n) {\n    ;\n  }\n\n  return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n}","map":null,"metadata":{},"sourceType":"module"}