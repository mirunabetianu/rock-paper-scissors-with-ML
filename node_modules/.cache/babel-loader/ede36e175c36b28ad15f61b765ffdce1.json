{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar _classCallCheck = require(\"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar visor_1 = require(\"./components/visor\");\n\nvar visorSingleton;\nvar DEFAULT_TAB = 'Visor';\nvar VISOR_CONTAINER_ID = 'tfjs-visor-container';\n/**\n * The primary interface to the visor is the visor() function.\n *\n * This returns a singleton instance of the Visor class. The\n * singleton object will be replaced if the visor is removed from the DOM for\n * some reason.\n *\n * ```js\n * // Show the visor\n * tfvis.visor();\n * ```\n *\n */\n\n/** @doc {heading: 'Visor & Surfaces'} */\n\nfunction visor() {\n  if (typeof document === 'undefined') {\n    throw new Error('No document defined. This library needs a browser/dom to work');\n  }\n\n  if (document.getElementById(VISOR_CONTAINER_ID) && visorSingleton != null) {\n    return visorSingleton;\n  } // Create the container\n\n\n  var visorEl = document.getElementById(VISOR_CONTAINER_ID);\n\n  if (visorEl == null) {\n    visorEl = document.createElement('div');\n    visorEl.id = VISOR_CONTAINER_ID;\n    document.body.appendChild(visorEl);\n  }\n\n  var renderRoot;\n\n  function renderVisor(domNode, surfaceList) {\n    var visorInstance = null;\n    renderRoot = visor_1.VisorComponent.render(domNode, renderRoot, {\n      ref: function ref(r) {\n        return visorInstance = r;\n      },\n      surfaceList: Array.from(surfaceList.values())\n    }); // Side effect of VisorComponent.render() is to assign visorInstance\n\n    return visorInstance;\n  } // TODO: consider changing this type. Possibly lift into top level state\n  // object\n\n\n  var surfaceList = new Map();\n  var visorComponentInstance = renderVisor(visorEl, surfaceList);\n  visorSingleton = new Visor(visorComponentInstance, visorEl, surfaceList, renderVisor);\n  return visorSingleton;\n}\n\nexports.visor = visor;\n/**\n * An instance of the visor. An instance of this class is created using the\n * `visor()` function.\n */\n\n/** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\nvar Visor =\n/*#__PURE__*/\nfunction () {\n  function Visor(visorComponent, visorEl, surfaceList, renderVisor) {\n    _classCallCheck(this, Visor);\n\n    this.visorComponent = visorComponent;\n    this.el = visorEl;\n    this.surfaceList = surfaceList;\n    this.renderVisor = renderVisor;\n  }\n  /**\n   * Creates a surface on the visor\n   *\n   * Most methods in tfjs-vis that take a surface also take a SurfaceInfo\n   * so you rarely need to call this method unless you want to make a custom\n   * plot.\n   *\n   * ```js\n   * // Create a surface on a tab\n   * tfvis.visor().surface({name: 'My Surface', tab: 'My Tab'});\n   * ```\n   *\n   * ```js\n   * // Create a surface and specify its height\n   * tfvis.visor().surface({name: 'Custom Height', tab: 'My Tab', styles: {\n   *    height: 500\n   * }})\n   * ```\n   *\n   * @param options\n   */\n\n  /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n\n  _createClass(Visor, [{\n    key: \"surface\",\n    value: function surface(options) {\n      var name = options.name;\n      var tab = options.tab == null ? DEFAULT_TAB : options.tab;\n\n      if (name == null || // tslint:disable-next-line\n      !(typeof name === 'string' || name instanceof String)) {\n        throw new Error( // tslint:disable-next-line\n        'You must pass a config object with a \\'name\\' property to create or retrieve a surface');\n      }\n\n      var finalOptions = Object.assign({}, options, {\n        tab: tab\n      });\n      var key = \"\".concat(name, \"-\").concat(tab);\n\n      if (!this.surfaceList.has(key)) {\n        this.surfaceList.set(key, finalOptions);\n      }\n\n      this.renderVisor(this.el, this.surfaceList);\n      return this.visorComponent.getSurface(name, tab);\n    }\n    /**\n     * Returns a boolean indicating if the visor is in 'fullscreen' mode\n     */\n\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"isFullscreen\",\n    value: function isFullscreen() {\n      return this.visorComponent.isFullscreen();\n    }\n    /**\n     * Returns a boolean indicating if the visor is open\n     */\n\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"isOpen\",\n    value: function isOpen() {\n      return this.visorComponent.isOpen();\n    }\n    /**\n     * Closes the visor.\n     */\n\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.visorComponent.close();\n    }\n    /**\n     * Opens the visor.\n     */\n\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.visorComponent.open();\n    }\n    /**\n     * Toggles the visor (closed vs open).\n     */\n\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      return this.visorComponent.toggle();\n    }\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"toggleFullScreen\",\n    value: function toggleFullScreen() {\n      return this.visorComponent.toggleFullScreen();\n    }\n    /**\n     * Binds the ~ (tilde) key to toggle the visor.\n     *\n     * This is called by default when the visor is initially created.\n     */\n\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"bindKeys\",\n    value: function bindKeys() {\n      return this.visorComponent.bindKeys();\n    }\n    /**\n     * Unbinds the keyboard control to toggle the visor.\n     */\n\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"unbindKeys\",\n    value: function unbindKeys() {\n      return this.visorComponent.unbindKeys();\n    }\n    /**\n     * Sets the active tab for the visor.\n     */\n\n    /** @doc {heading: 'Visor & Surfaces', subheading: 'Visor Methods'} */\n\n  }, {\n    key: \"setActiveTab\",\n    value: function setActiveTab(tabName) {\n      var tabs = this.visorComponent.state.tabs;\n\n      if (!tabs.has(tabName)) {\n        throw new Error(\"Tab '\".concat(tabName, \"' does not exist\"));\n      }\n\n      this.visorComponent.setState({\n        activeTab: tabName\n      });\n    }\n  }]);\n\n  return Visor;\n}();\n\nexports.Visor = Visor;","map":null,"metadata":{},"sourceType":"script"}