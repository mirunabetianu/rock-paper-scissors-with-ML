{"ast":null,"code":"import { Feature, FeatureCollection, MultiPoint } from './constants';\nimport { Transform } from 'vega-dataflow';\nimport { accessorFields, identity, inherits } from 'vega-util';\n/**\n * Consolidate an array of [longitude, latitude] points or GeoJSON features\n * into a combined GeoJSON object. This transform is particularly useful for\n * combining geo data for a Projection's fit argument. The resulting GeoJSON\n * data is available as this transform's value. Input pulses are unchanged.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.fields] - A two-element array\n *   of field accessors for the longitude and latitude values.\n * @param {function(object): *} params.geojson - A field accessor for\n *   retrieving GeoJSON feature data.\n */\n\nexport default function GeoJSON(params) {\n  Transform.call(this, null, params);\n}\nGeoJSON.Definition = {\n  \"type\": \"GeoJSON\",\n  \"metadata\": {},\n  \"params\": [{\n    \"name\": \"fields\",\n    \"type\": \"field\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"geojson\",\n    \"type\": \"field\"\n  }]\n};\nvar prototype = inherits(GeoJSON, Transform);\n\nprototype.transform = function (_, pulse) {\n  var features = this._features,\n      points = this._points,\n      fields = _.fields,\n      lon = fields && fields[0],\n      lat = fields && fields[1],\n      geojson = _.geojson || !fields && identity,\n      flag = pulse.ADD,\n      mod;\n  mod = _.modified() || pulse.changed(pulse.REM) || pulse.modified(accessorFields(geojson)) || lon && pulse.modified(accessorFields(lon)) || lat && pulse.modified(accessorFields(lat));\n\n  if (!this.value || mod) {\n    flag = pulse.SOURCE;\n    this._features = features = [];\n    this._points = points = [];\n  }\n\n  if (geojson) {\n    pulse.visit(flag, function (t) {\n      features.push(geojson(t));\n    });\n  }\n\n  if (lon && lat) {\n    pulse.visit(flag, function (t) {\n      var x = lon(t),\n          y = lat(t);\n\n      if (x != null && y != null && (x = +x) === x && (y = +y) === y) {\n        points.push([x, y]);\n      }\n    });\n    features = features.concat({\n      type: Feature,\n      geometry: {\n        type: MultiPoint,\n        coordinates: points\n      }\n    });\n  }\n\n  this.value = {\n    type: FeatureCollection,\n    features: features\n  };\n};","map":null,"metadata":{},"sourceType":"module"}