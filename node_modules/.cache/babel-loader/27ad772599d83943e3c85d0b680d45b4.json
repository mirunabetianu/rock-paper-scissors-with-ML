{"ast":null,"code":"import _defineProperty from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __rest } from \"tslib\";\nimport { getSizeType, POSITION_SCALE_CHANNELS } from '../channel';\nimport { isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nimport { keys } from '../util';\nexport var RangeStepNormalizer =\n/*#__PURE__*/\nfunction () {\n  function RangeStepNormalizer() {\n    _classCallCheck(this, RangeStepNormalizer);\n\n    this.name = 'RangeStep';\n  }\n\n  _createClass(RangeStepNormalizer, [{\n    key: \"hasMatchingType\",\n    value: function hasMatchingType(spec) {\n      var _a, _b;\n\n      if (isUnitSpec(spec) && spec.encoding) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = POSITION_SCALE_CHANNELS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var channel = _step.value;\n            var def = spec.encoding[channel];\n\n            if (def && isFieldDef(def)) {\n              if ((_b = (_a = def) === null || _a === void 0 ? void 0 : _a.scale) === null || _b === void 0 ? void 0 : _b['rangeStep']) {\n                return true;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"run\",\n    value: function run(spec) {\n      var _a, _b;\n\n      var sizeMixins = {};\n      var encoding = Object.assign({}, spec.encoding);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = POSITION_SCALE_CHANNELS[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var channel = _step2.value;\n          var sizeType = getSizeType(channel);\n          var def = encoding[channel];\n\n          if (def && isFieldDef(def)) {\n            if ((_b = (_a = def) === null || _a === void 0 ? void 0 : _a.scale) === null || _b === void 0 ? void 0 : _b['rangeStep']) {\n              var scale = def.scale,\n                  defWithoutScale = __rest(def, [\"scale\"]);\n\n              var _c = scale,\n                  rangeStep = _c.rangeStep,\n                  scaleWithoutRangeStep = __rest(_c, [\"rangeStep\"]);\n\n              sizeMixins[sizeType] = {\n                step: scale['rangeStep']\n              };\n              log.warn(log.message.RANGE_STEP_DEPRECATED);\n              encoding = Object.assign(Object.assign({}, encoding), _defineProperty({}, channel, Object.assign(Object.assign({}, defWithoutScale), keys(scaleWithoutRangeStep).length > 0 ? {\n                scale: scaleWithoutRangeStep\n              } : {})));\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return Object.assign(Object.assign(Object.assign({}, sizeMixins), spec), {\n        encoding: encoding\n      });\n    }\n  }]);\n\n  return RangeStepNormalizer;\n}();","map":null,"metadata":{},"sourceType":"module"}