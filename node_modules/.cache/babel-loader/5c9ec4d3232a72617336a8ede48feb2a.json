{"ast":null,"code":"import { isArray, isNumber, isObject } from 'vega-util';\nimport { keys } from '../util';\nimport { isConcatSpec } from './concat';\nimport { isFacetMapping, isFacetSpec } from './facet';\nimport { isRepeatSpec } from './repeat';\nexport function isStep(size) {\n  return isObject(size) && size['step'] !== undefined;\n}\nexport var DEFAULT_SPACING = 20;\nvar COMPOSITION_LAYOUT_INDEX = {\n  align: 1,\n  bounds: 1,\n  center: 1,\n  columns: 1,\n  spacing: 1\n};\nvar COMPOSITION_LAYOUT_PROPERTIES = keys(COMPOSITION_LAYOUT_INDEX);\nexport function extractCompositionLayout(spec, specType, config) {\n  var _a, _b;\n\n  var compositionConfig = config[specType];\n  var layout = {}; // Apply config first\n\n  var spacingConfig = compositionConfig.spacing,\n      columns = compositionConfig.columns;\n\n  if (spacingConfig !== undefined) {\n    layout.spacing = spacingConfig;\n  }\n\n  if (columns !== undefined) {\n    if (isFacetSpec(spec) && !isFacetMapping(spec.facet) || isRepeatSpec(spec) && isArray(spec.repeat) || isConcatSpec(spec)) {\n      layout.columns = columns;\n    }\n  } // Then copy properties from the spec\n\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = COMPOSITION_LAYOUT_PROPERTIES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var prop = _step.value;\n\n      if (spec[prop] !== undefined) {\n        if (prop === 'spacing') {\n          var spacing = spec[prop];\n          layout[prop] = isNumber(spacing) ? spacing : {\n            row: (_a = spacing.row, _a !== null && _a !== void 0 ? _a : spacingConfig),\n            column: (_b = spacing.column, _b !== null && _b !== void 0 ? _b : spacingConfig)\n          };\n        } else {\n          layout[prop] = spec[prop];\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return layout;\n}","map":null,"metadata":{},"sourceType":"module"}