{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { hasOwnProperty, isArray } from 'vega-util';\nimport { hasConditionalFieldDef, isConditionalDef, isFieldDef, isRepeatRef, isSortableFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isSortField } from '../sort';\nimport { isFacetMapping } from '../spec/facet';\nexport function replaceRepeaterInFacet(facet, repeater) {\n  if (isFacetMapping(facet)) {\n    return replaceRepeater(facet, repeater);\n  }\n\n  return replaceRepeaterInFieldDef(facet, repeater);\n}\nexport function replaceRepeaterInEncoding(encoding, repeater) {\n  return replaceRepeater(encoding, repeater);\n}\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\n\nfunction replaceRepeat(o, repeater) {\n  if (isRepeatRef(o.field)) {\n    if (o.field.repeat in repeater) {\n      // any needed to calm down ts compiler\n      return Object.assign(Object.assign({}, o), {\n        field: repeater[o.field.repeat]\n      });\n    } else {\n      log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n      return undefined;\n    }\n  }\n\n  return o;\n}\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\n\n\nfunction replaceRepeaterInFieldDef(fieldDef, repeater) {\n  fieldDef = replaceRepeat(fieldDef, repeater);\n\n  if (fieldDef === undefined) {\n    // the field def should be ignored\n    return undefined;\n  } else if (fieldDef === null) {\n    return null;\n  }\n\n  if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {\n    var sort = replaceRepeat(fieldDef.sort, repeater);\n    fieldDef = Object.assign(Object.assign({}, fieldDef), sort ? {\n      sort: sort\n    } : {});\n  }\n\n  return fieldDef;\n}\n\nfunction replaceRepeaterInChannelDef(channelDef, repeater) {\n  if (isFieldDef(channelDef)) {\n    var fd = replaceRepeaterInFieldDef(channelDef, repeater);\n\n    if (fd) {\n      return fd;\n    } else if (isConditionalDef(channelDef)) {\n      return {\n        condition: channelDef.condition\n      };\n    }\n  } else {\n    if (hasConditionalFieldDef(channelDef)) {\n      var _fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n\n      if (_fd) {\n        return Object.assign(Object.assign({}, channelDef), {\n          condition: _fd\n        });\n      } else {\n        var condition = channelDef.condition,\n            channelDefWithoutCondition = __rest(channelDef, [\"condition\"]);\n\n        return channelDefWithoutCondition;\n      }\n    }\n\n    return channelDef;\n  }\n\n  return undefined;\n}\n\nfunction replaceRepeater(mapping, repeater) {\n  var out = {};\n\n  for (var channel in mapping) {\n    if (hasOwnProperty(mapping, channel)) {\n      var channelDef = mapping[channel];\n\n      if (isArray(channelDef)) {\n        // array cannot have condition\n        out[channel] = channelDef.map(function (cd) {\n          return replaceRepeaterInChannelDef(cd, repeater);\n        }).filter(function (cd) {\n          return cd;\n        });\n      } else {\n        var cd = replaceRepeaterInChannelDef(channelDef, repeater);\n\n        if (cd !== undefined) {\n          out[channel] = cd;\n        }\n      }\n    }\n  }\n\n  return out;\n}","map":null,"metadata":{},"sourceType":"module"}