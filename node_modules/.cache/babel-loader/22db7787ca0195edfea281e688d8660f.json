{"ast":null,"code":"import { isString } from 'vega-util';\nimport { initConfig } from '../config';\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { deepEqual } from '../util';\nimport { CoreNormalizer } from './core';\nexport function normalize(spec, config) {\n  if (config === undefined) {\n    config = initConfig(spec.config);\n  }\n\n  var normalizedSpec = normalizeGenericSpec(spec, config);\n  var width = spec.width,\n      height = spec.height;\n  var autosize = normalizeAutoSize(normalizedSpec, {\n    width: width,\n    height: height,\n    autosize: spec.autosize\n  }, config);\n  return Object.assign(Object.assign({}, normalizedSpec), autosize ? {\n    autosize: autosize\n  } : {});\n}\nvar normalizer = new CoreNormalizer();\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n */\n\nfunction normalizeGenericSpec(spec) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return normalizer.map(spec, {\n    config: config\n  });\n}\n\nfunction _normalizeAutoSize(autosize) {\n  return isString(autosize) ? {\n    type: autosize\n  } : autosize !== null && autosize !== void 0 ? autosize : {};\n}\n/**\n * Normalize autosize and deal with width or height == \"container\".\n */\n\n\nexport function normalizeAutoSize(spec, sizeInfo, config) {\n  var width = sizeInfo.width,\n      height = sizeInfo.height;\n  var isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);\n  var autosizeDefault = {};\n\n  if (!isFitCompatible) {\n    // If spec is not compatible with autosize == \"fit\", discard width/height == container\n    if (width == 'container') {\n      log.warn(log.message.containerSizeNonSingle('width'));\n      width = undefined;\n    }\n\n    if (height == 'container') {\n      log.warn(log.message.containerSizeNonSingle('height'));\n      height = undefined;\n    }\n  } else {\n    // Default autosize parameters to fit when width/height is \"container\"\n    if (width == 'container' && height == 'container') {\n      autosizeDefault.type = 'fit';\n      autosizeDefault.contains = 'padding';\n    } else if (width == 'container') {\n      autosizeDefault.type = 'fit-x';\n      autosizeDefault.contains = 'padding';\n    } else if (height == 'container') {\n      autosizeDefault.type = 'fit-y';\n      autosizeDefault.contains = 'padding';\n    }\n  }\n\n  var autosize = Object.assign(Object.assign(Object.assign({\n    type: 'pad'\n  }, autosizeDefault), config ? _normalizeAutoSize(config.autosize) : {}), _normalizeAutoSize(spec.autosize));\n\n  if (autosize.type === 'fit' && !isFitCompatible) {\n    log.warn(log.message.FIT_NON_SINGLE);\n    autosize.type = 'pad';\n  }\n\n  if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {\n    log.warn(log.message.containerSizeNotCompatibleWithAutosize('width'));\n  }\n\n  if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {\n    log.warn(log.message.containerSizeNotCompatibleWithAutosize('height'));\n  } // Delete autosize property if it's Vega's default\n\n\n  if (deepEqual(autosize, {\n    type: 'pad'\n  })) {\n    return undefined;\n  }\n\n  return autosize;\n}","map":null,"metadata":{},"sourceType":"module"}