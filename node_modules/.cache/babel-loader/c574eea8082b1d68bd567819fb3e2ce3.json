{"ast":null,"code":"import { error, zero } from 'vega-util';\nexport function WindowOp(op, field, param, as) {\n  var fn = WindowOps[op](field, param);\n  return {\n    init: fn.init || zero,\n    update: function update(w, t) {\n      t[as] = fn.next(w);\n    }\n  };\n}\nexport var WindowOps = {\n  row_number: function row_number() {\n    return {\n      next: function next(w) {\n        return w.index + 1;\n      }\n    };\n  },\n  rank: function rank() {\n    var rank;\n    return {\n      init: function init() {\n        return rank = 1;\n      },\n      next: function next(w) {\n        var i = w.index,\n            data = w.data;\n        return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;\n      }\n    };\n  },\n  dense_rank: function dense_rank() {\n    var drank;\n    return {\n      init: function init() {\n        return drank = 1;\n      },\n      next: function next(w) {\n        var i = w.index,\n            d = w.data;\n        return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;\n      }\n    };\n  },\n  percent_rank: function percent_rank() {\n    var rank = WindowOps.rank(),\n        _next = rank.next;\n    return {\n      init: rank.init,\n      next: function next(w) {\n        return (_next(w) - 1) / (w.data.length - 1);\n      }\n    };\n  },\n  cume_dist: function cume_dist() {\n    var cume;\n    return {\n      init: function init() {\n        return cume = 0;\n      },\n      next: function next(w) {\n        var i = w.index,\n            d = w.data,\n            c = w.compare;\n\n        if (cume < i) {\n          while (i + 1 < d.length && !c(d[i], d[i + 1])) {\n            ++i;\n          }\n\n          cume = i;\n        }\n\n        return (1 + cume) / d.length;\n      }\n    };\n  },\n  ntile: function ntile(field, num) {\n    num = +num;\n    if (!(num > 0)) error('ntile num must be greater than zero.');\n    var cume = WindowOps.cume_dist(),\n        _next2 = cume.next;\n    return {\n      init: cume.init,\n      next: function next(w) {\n        return Math.ceil(num * _next2(w));\n      }\n    };\n  },\n  lag: function lag(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: function next(w) {\n        var i = w.index - offset;\n        return i >= 0 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  lead: function lead(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: function next(w) {\n        var i = w.index + offset,\n            d = w.data;\n        return i < d.length ? field(d[i]) : null;\n      }\n    };\n  },\n  first_value: function first_value(field) {\n    return {\n      next: function next(w) {\n        return field(w.data[w.i0]);\n      }\n    };\n  },\n  last_value: function last_value(field) {\n    return {\n      next: function next(w) {\n        return field(w.data[w.i1 - 1]);\n      }\n    };\n  },\n  nth_value: function nth_value(field, nth) {\n    nth = +nth;\n    if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n    return {\n      next: function next(w) {\n        var i = w.i0 + (nth - 1);\n        return i < w.i1 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  prev_value: function prev_value(field) {\n    var prev = null;\n    return {\n      next: function next(w) {\n        var v = field(w.data[w.index]);\n        return v != null ? prev = v : prev;\n      }\n    };\n  },\n  next_value: function next_value(field) {\n    var v = null,\n        i = -1;\n    return {\n      next: function next(w) {\n        var d = w.data;\n        return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);\n      }\n    };\n  }\n};\n\nfunction find(field, data, index) {\n  for (var n = data.length; index < n; ++index) {\n    var v = field(data[index]);\n    if (v != null) return index;\n  }\n\n  return -1;\n}\n\nexport var ValidWindowOps = Object.keys(WindowOps);","map":null,"metadata":{},"sourceType":"module"}