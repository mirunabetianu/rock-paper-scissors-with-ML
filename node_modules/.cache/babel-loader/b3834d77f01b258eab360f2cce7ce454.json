{"ast":null,"code":"import { partition } from './util/util';\nimport { ingest, Transform } from 'vega-dataflow';\nimport { quantiles } from 'vega-statistics';\nimport { accessorName, inherits } from 'vega-util';\nimport { range } from 'd3-array';\n/**\n * Generates sample quantile values from an input data stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the data field\n *   over which to calculate quantile values.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {Array<number>} [params.probs] - An array of probabilities in\n *   the range (0, 1) for which to compute quantile values. If not specified,\n *   the *step* parameter will be used.\n * @param {Array<number>} [params.step=0.01] - A probability step size for\n *   sampling quantile values. All values from one-half the step size up to\n *   1 (exclusive) will be sampled. This parameter is only used if the\n *   *quantiles* parameter is not provided.\n */\n\nexport default function Quantile(params) {\n  Transform.call(this, null, params);\n}\nQuantile.Definition = {\n  \"type\": \"Quantile\",\n  \"metadata\": {\n    \"generates\": true,\n    \"changes\": true\n  },\n  \"params\": [{\n    \"name\": \"groupby\",\n    \"type\": \"field\",\n    \"array\": true\n  }, {\n    \"name\": \"field\",\n    \"type\": \"field\",\n    \"required\": true\n  }, {\n    \"name\": \"probs\",\n    \"type\": \"number\",\n    \"array\": true\n  }, {\n    \"name\": \"step\",\n    \"type\": \"number\",\n    \"default\": 0.01\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"array\": true,\n    \"default\": [\"prob\", \"value\"]\n  }]\n};\nvar prototype = inherits(Quantile, Transform);\nvar EPSILON = 1e-14;\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      as = _.as || ['prob', 'value'];\n\n  if (this.value && !_.modified() && !pulse.changed()) {\n    out.source = this.value;\n    return out;\n  }\n\n  var source = pulse.materialize(pulse.SOURCE).source,\n      groups = partition(source, _.groupby, _.field),\n      names = (_.groupby || []).map(accessorName),\n      values = [],\n      step = _.step || 0.01,\n      p = _.probs || range(step / 2, 1 - EPSILON, step),\n      n = p.length;\n  groups.forEach(function (g) {\n    var q = quantiles(g, p);\n\n    for (var i = 0; i < n; ++i) {\n      var t = {};\n\n      for (var _i = 0; _i < names.length; ++_i) {\n        t[names[_i]] = g.dims[_i];\n      }\n\n      t[as[0]] = p[i];\n      t[as[1]] = q[i];\n      values.push(ingest(t));\n    }\n  });\n  if (this.value) out.rem = this.value;\n  this.value = out.add = out.source = values;\n  return out;\n};","map":null,"metadata":{},"sourceType":"module"}