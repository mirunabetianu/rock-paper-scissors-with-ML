{"ast":null,"code":"import { getScale } from './scale';\nimport { scaleFraction, scale as get } from 'vega-scale';\nimport { Gradient } from 'vega-scenegraph';\nimport { identity, peek } from 'vega-util';\nexport default function (scale, p0, p1, count, group) {\n  scale = getScale(scale, (group || this).context);\n  var gradient = Gradient(p0, p1);\n  var stops = scale.domain(),\n      min = stops[0],\n      max = peek(stops),\n      fraction = identity;\n\n  if (!(max - min)) {\n    // expand scale if domain has zero span, fix #1479\n    scale = (scale.interpolator ? get('sequential')().interpolator(scale.interpolator()) : get('linear')().interpolate(scale.interpolate()).range(scale.range())).domain([min = 0, max = 1]);\n  } else {\n    fraction = scaleFraction(scale, min, max);\n  }\n\n  if (scale.ticks) {\n    stops = scale.ticks(+count || 15);\n    if (min !== stops[0]) stops.unshift(min);\n    if (max !== peek(stops)) stops.push(max);\n  }\n\n  stops.forEach(function (_) {\n    return gradient.stop(fraction(_), scale(_));\n  });\n  return gradient;\n}","map":null,"metadata":{},"sourceType":"module"}