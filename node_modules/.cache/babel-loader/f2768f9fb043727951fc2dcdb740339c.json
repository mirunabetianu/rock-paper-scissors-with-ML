{"ast":null,"code":"import Aggregate from './Aggregate';\nimport { ValidAggregateOps } from './util/AggregateOps';\nimport { extend, inherits } from 'vega-util';\n/**\n * Extend input tuples with aggregate values.\n * Calcuates aggregate values and joins them with the input stream.\n * @constructor\n */\n\nexport default function JoinAggregate(params) {\n  Aggregate.call(this, params);\n}\nJoinAggregate.Definition = {\n  \"type\": \"JoinAggregate\",\n  \"metadata\": {\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"groupby\",\n    \"type\": \"field\",\n    \"array\": true\n  }, {\n    \"name\": \"fields\",\n    \"type\": \"field\",\n    \"null\": true,\n    \"array\": true\n  }, {\n    \"name\": \"ops\",\n    \"type\": \"enum\",\n    \"array\": true,\n    \"values\": ValidAggregateOps\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"null\": true,\n    \"array\": true\n  }, {\n    \"name\": \"key\",\n    \"type\": \"field\"\n  }]\n};\nvar prototype = inherits(JoinAggregate, Aggregate);\n\nprototype.transform = function (_, pulse) {\n  var aggr = this,\n      mod = _.modified(),\n      cells; // process all input tuples to calculate aggregates\n\n\n  if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n    cells = aggr.value = mod ? aggr.init(_) : {};\n    pulse.visit(pulse.SOURCE, function (t) {\n      aggr.add(t);\n    });\n  } else {\n    cells = aggr.value = aggr.value || this.init(_);\n    pulse.visit(pulse.REM, function (t) {\n      aggr.rem(t);\n    });\n    pulse.visit(pulse.ADD, function (t) {\n      aggr.add(t);\n    });\n  } // update aggregation cells\n\n\n  aggr.changes(); // write aggregate values to input tuples\n\n  pulse.visit(pulse.SOURCE, function (t) {\n    extend(t, cells[aggr.cellkey(t)].tuple);\n  });\n  return pulse.reflow(mod).modifies(this._outputs);\n};\n\nprototype.changes = function () {\n  var adds = this._adds,\n      mods = this._mods,\n      i,\n      n;\n\n  for (i = 0, n = this._alen; i < n; ++i) {\n    this.celltuple(adds[i]);\n    adds[i] = null; // for garbage collection\n  }\n\n  for (i = 0, n = this._mlen; i < n; ++i) {\n    this.celltuple(mods[i]);\n    mods[i] = null; // for garbage collection\n  }\n\n  this._alen = this._mlen = 0; // reset list of active cells\n};","map":null,"metadata":{},"sourceType":"module"}