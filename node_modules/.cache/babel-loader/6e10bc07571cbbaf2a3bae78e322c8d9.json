{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nexport var ConcatModel =\n/*#__PURE__*/\nfunction (_BaseConcatModel) {\n  _inherits(ConcatModel, _BaseConcatModel);\n\n  function ConcatModel(spec, parent, parentGivenName, repeater, config) {\n    var _this;\n\n    _classCallCheck(this, ConcatModel);\n\n    var _a, _b, _c, _d;\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConcatModel).call(this, spec, 'concat', parent, parentGivenName, config, repeater, spec.resolve));\n\n    if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    _this.concatType = isVConcatSpec(spec) ? 'vconcat' : isHConcatSpec(spec) ? 'hconcat' : 'concat';\n    _this.children = _this.getChildren(spec).map(function (child, i) {\n      return buildModel(child, _assertThisInitialized(_assertThisInitialized(_this)), _this.getName('concat_' + i), undefined, repeater, config);\n    });\n    return _this;\n  }\n\n  _createClass(ConcatModel, [{\n    key: \"getChildren\",\n    value: function getChildren(spec) {\n      if (isVConcatSpec(spec)) {\n        return spec.vconcat;\n      } else if (isHConcatSpec(spec)) {\n        return spec.hconcat;\n      }\n\n      return spec.concat;\n    }\n  }, {\n    key: \"parseLayoutSize\",\n    value: function parseLayoutSize() {\n      parseConcatLayoutSize(this);\n    }\n  }, {\n    key: \"parseAxisGroup\",\n    value: function parseAxisGroup() {\n      return null;\n    }\n  }, {\n    key: \"assembleDefaultLayout\",\n    value: function assembleDefaultLayout() {\n      return Object.assign(Object.assign({}, this.concatType === 'vconcat' ? {\n        columns: 1\n      } : {}), {\n        bounds: 'full',\n        // Use align each so it can work with multiple plots with different size\n        align: 'each'\n      });\n    }\n  }]);\n\n  return ConcatModel;\n}(BaseConcatModel);","map":null,"metadata":{},"sourceType":"module"}