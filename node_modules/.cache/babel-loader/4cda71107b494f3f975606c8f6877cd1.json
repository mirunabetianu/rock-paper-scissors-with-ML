{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { isGenerator, isInlineData, isNamedData, isSphereGenerator, isUrlData } from '../../data';\nimport { contains, keys, omit } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport var SourceNode =\n/*#__PURE__*/\nfunction (_DataFlowNode) {\n  _inherits(SourceNode, _DataFlowNode);\n\n  function SourceNode(data) {\n    var _this;\n\n    _classCallCheck(this, SourceNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SourceNode).call(this, null)); // source cannot have parent\n\n    data = data !== null && data !== void 0 ? data : {\n      name: 'source'\n    };\n    var format;\n\n    if (!isGenerator(data)) {\n      format = data.format ? Object.assign({}, omit(data.format, ['parse'])) : {};\n    }\n\n    if (isInlineData(data)) {\n      _this._data = {\n        values: data.values\n      };\n    } else if (isUrlData(data)) {\n      _this._data = {\n        url: data.url\n      };\n\n      if (!format.type) {\n        // Extract extension from URL using snippet from\n        // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n        var defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n\n        if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\n          defaultExtension = 'json';\n        } // defaultExtension has type string but we ensure that it is DataFormatType above\n\n\n        format.type = defaultExtension;\n      }\n    } else if (isSphereGenerator(data)) {\n      // hardwire GeoJSON sphere data into output specification\n      _this._data = {\n        values: [{\n          type: 'Sphere'\n        }]\n      };\n    } else if (isNamedData(data) || isGenerator(data)) {\n      _this._data = {};\n    } // set flag to check if generator\n\n\n    _this._generator = isGenerator(data); // any dataset can be named\n\n    if (data.name) {\n      _this._name = data.name;\n    }\n\n    if (format && keys(format).length > 0) {\n      _this._data.format = format;\n    }\n\n    return _this;\n  }\n\n  _createClass(SourceNode, [{\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return new Set();\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return undefined; // we don't know what this source produces\n    }\n  }, {\n    key: \"hasName\",\n    value: function hasName() {\n      return !!this._name;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      throw new Error('Source nodes are roots and cannot be removed.');\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      throw new Error('Cannot hash sources');\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      return Object.assign(Object.assign({\n        name: this._name\n      }, this._data), {\n        transform: []\n      });\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }, {\n    key: \"isGenerator\",\n    get: function get() {\n      return this._generator;\n    }\n  }, {\n    key: \"dataName\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      this._name = name;\n    }\n  }, {\n    key: \"parent\",\n    set: function set(parent) {\n      throw new Error('Source nodes have to be roots.');\n    }\n  }]);\n\n  return SourceNode;\n}(DataFlowNode);","map":null,"metadata":{},"sourceType":"module"}