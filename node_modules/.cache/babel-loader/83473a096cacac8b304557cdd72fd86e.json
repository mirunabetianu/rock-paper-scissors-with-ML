{"ast":null,"code":"import { derive, Transform } from 'vega-dataflow';\nimport { inherits, accessorName } from 'vega-util';\n/**\n * Folds one more tuple fields into multiple tuples in which the field\n * name and values are available under new 'key' and 'value' fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.fields - An array of field accessors\n *   for the tuple fields that should be folded.\n * @param {Array<string>} [params.as] - Output field names for folded key\n *   and value fields, defaults to ['key', 'value'].\n */\n\nexport default function Fold(params) {\n  Transform.call(this, [], params);\n}\nFold.Definition = {\n  \"type\": \"Fold\",\n  \"metadata\": {\n    \"generates\": true\n  },\n  \"params\": [{\n    \"name\": \"fields\",\n    \"type\": \"field\",\n    \"array\": true,\n    \"required\": true\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"array\": true,\n    \"length\": 2,\n    \"default\": [\"key\", \"value\"]\n  }]\n};\nvar prototype = inherits(Fold, Transform);\n\nprototype.transform = function (_, pulse) {\n  var out = pulse.fork(pulse.NO_SOURCE),\n      fields = _.fields,\n      fnames = fields.map(accessorName),\n      as = _.as || ['key', 'value'],\n      k = as[0],\n      v = as[1],\n      n = fields.length;\n  out.rem = this.value;\n  pulse.visit(pulse.SOURCE, function (t) {\n    for (var i = 0, d; i < n; ++i) {\n      d = derive(t);\n      d[k] = fnames[i];\n      d[v] = fields[i](t);\n      out.add.push(d);\n    }\n  });\n  this.value = out.source = out.add;\n  return out.modifies(as);\n};","map":null,"metadata":{},"sourceType":"module"}