{"ast":null,"code":"import { extend, identity, stringValue } from 'vega-util';\nexport function measureName(op, field, as) {\n  return as || op + (!field ? '' : '_' + field);\n}\nexport var AggregateOps = {\n  'values': measure({\n    name: 'values',\n    init: 'cell.store = true;',\n    set: 'cell.data.values()',\n    idx: -1\n  }),\n  'count': measure({\n    name: 'count',\n    set: 'cell.num'\n  }),\n  '__count__': measure({\n    name: 'count',\n    set: 'this.missing + this.valid'\n  }),\n  'missing': measure({\n    name: 'missing',\n    set: 'this.missing'\n  }),\n  'valid': measure({\n    name: 'valid',\n    set: 'this.valid'\n  }),\n  'sum': measure({\n    name: 'sum',\n    init: 'this.sum = 0;',\n    add: 'this.sum += +v;',\n    rem: 'this.sum -= v;',\n    set: 'this.sum'\n  }),\n  'mean': measure({\n    name: 'mean',\n    init: 'this.mean = 0;',\n    add: 'var d = v - this.mean; this.mean += d / this.valid;',\n    rem: 'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',\n    set: 'this.valid ? this.mean : undefined'\n  }),\n  'average': measure({\n    name: 'average',\n    set: 'this.valid ? this.mean : undefined',\n    req: ['mean'],\n    idx: 1\n  }),\n  'variance': measure({\n    name: 'variance',\n    init: 'this.dev = 0;',\n    add: 'this.dev += d * (v - this.mean);',\n    rem: 'this.dev -= d * (v - this.mean);',\n    set: 'this.valid > 1 ? this.dev / (this.valid-1) : undefined',\n    req: ['mean'],\n    idx: 1\n  }),\n  'variancep': measure({\n    name: 'variancep',\n    set: 'this.valid > 1 ? this.dev / this.valid : undefined',\n    req: ['variance'],\n    idx: 2\n  }),\n  'stdev': measure({\n    name: 'stdev',\n    set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined',\n    req: ['variance'],\n    idx: 2\n  }),\n  'stdevp': measure({\n    name: 'stdevp',\n    set: 'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined',\n    req: ['variance'],\n    idx: 2\n  }),\n  'stderr': measure({\n    name: 'stderr',\n    set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined',\n    req: ['variance'],\n    idx: 2\n  }),\n  'distinct': measure({\n    name: 'distinct',\n    set: 'cell.data.distinct(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'ci0': measure({\n    name: 'ci0',\n    set: 'cell.data.ci0(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'ci1': measure({\n    name: 'ci1',\n    set: 'cell.data.ci1(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'median': measure({\n    name: 'median',\n    set: 'cell.data.q2(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'q1': measure({\n    name: 'q1',\n    set: 'cell.data.q1(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'q3': measure({\n    name: 'q3',\n    set: 'cell.data.q3(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'argmin': measure({\n    name: 'argmin',\n    init: 'this.argmin = undefined;',\n    add: 'if (v < this.min) this.argmin = t;',\n    rem: 'if (v <= this.min) this.argmin = undefined;',\n    set: 'this.argmin || cell.data.argmin(this.get)',\n    req: ['min'],\n    str: ['values'],\n    idx: 3\n  }),\n  'argmax': measure({\n    name: 'argmax',\n    init: 'this.argmax = undefined;',\n    add: 'if (v > this.max) this.argmax = t;',\n    rem: 'if (v >= this.max) this.argmax = undefined;',\n    set: 'this.argmax || cell.data.argmax(this.get)',\n    req: ['max'],\n    str: ['values'],\n    idx: 3\n  }),\n  'min': measure({\n    name: 'min',\n    init: 'this.min = undefined;',\n    add: 'if (v < this.min || this.min === undefined) this.min = v;',\n    rem: 'if (v <= this.min) this.min = NaN;',\n    set: 'this.min = (Number.isNaN(this.min) ? cell.data.min(this.get) : this.min)',\n    str: ['values'],\n    idx: 4\n  }),\n  'max': measure({\n    name: 'max',\n    init: 'this.max = undefined;',\n    add: 'if (v > this.max || this.max === undefined) this.max = v;',\n    rem: 'if (v >= this.max) this.max = NaN;',\n    set: 'this.max = (Number.isNaN(this.max) ? cell.data.max(this.get) : this.max)',\n    str: ['values'],\n    idx: 4\n  })\n};\nexport var ValidAggregateOps = Object.keys(AggregateOps);\nexport function createMeasure(op, name) {\n  return AggregateOps[op](name);\n}\n\nfunction measure(base) {\n  return function (out) {\n    var m = extend({\n      init: '',\n      add: '',\n      rem: '',\n      idx: 0\n    }, base);\n    m.out = out || base.name;\n    return m;\n  };\n}\n\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\n\nfunction resolve(agg, stream) {\n  function collect(m, a) {\n    function helper(r) {\n      if (!m[r]) collect(m, m[r] = AggregateOps[r]());\n    }\n\n    if (a.req) a.req.forEach(helper);\n    if (stream && a.str) a.str.forEach(helper);\n    return m;\n  }\n\n  var map = agg.reduce(collect, agg.reduce(function (m, a) {\n    m[a.name] = a;\n    return m;\n  }, {}));\n  var values = [],\n      key;\n\n  for (key in map) {\n    values.push(map[key]);\n  }\n\n  return values.sort(compareIndex);\n}\n\nexport function compileMeasures(agg, field) {\n  var get = field || identity,\n      all = resolve(agg, true),\n      // assume streaming removes may occur\n  init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',\n      ctr = 'this.cell = cell; this.init();',\n      add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',\n      rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',\n      set = 'var cell = this.cell;';\n  all.forEach(function (a) {\n    init += a.init;\n    add += a.add;\n    rem += a.rem;\n  });\n  agg.slice().sort(compareIndex).forEach(function (a) {\n    set += 't[' + stringValue(a.out) + ']=' + a.set + ';';\n  });\n  set += 'return t;';\n  ctr = Function('cell', ctr);\n  ctr.prototype.init = Function(init);\n  ctr.prototype.add = Function('v', 't', add);\n  ctr.prototype.rem = Function('v', 't', rem);\n  ctr.prototype.set = Function('t', set);\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(function (_) {\n    return _.out;\n  });\n  return ctr;\n}","map":null,"metadata":{},"sourceType":"module"}