{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar _regeneratorRuntime = require(\"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar histogram_1 = require(\"../render/histogram\");\n\nvar render_utils_1 = require(\"../render/render_utils\");\n\nvar table_1 = require(\"../render/table\");\n\nvar dom_1 = require(\"../util/dom\");\n\nvar math_1 = require(\"../util/math\");\n/**\n * Renders a summary of a tf.Model. Displays a table with layer information.\n *\n * ```js\n * const model = tf.sequential({\n *  layers: [\n *    tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\n *    tf.layers.dense({units: 10, activation: 'softmax'}),\n *  ]\n * });\n *\n * const surface = { name: 'Model Summary', tab: 'Model Inspection'};\n * tfvis.show.modelSummary(surface, model);\n * ```\n *\n */\n\n/**\n * @doc {\n *  heading: 'Models & Tensors',\n *  subheading: 'Model Inspection',\n *  namespace: 'show'\n * }\n */\n\n\nfunction modelSummary(container, model) {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var drawArea, summary, headers, values;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            drawArea = render_utils_1.getDrawArea(container);\n            summary = getModelSummary(model);\n            headers = ['Layer Name', 'Output Shape', '# Of Params', 'Trainable'];\n            values = summary.layers.map(function (l) {\n              return [l.name, l.outputShape, l.parameters, l.trainable];\n            });\n            table_1.table(drawArea, {\n              headers: headers,\n              values: values\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.modelSummary = modelSummary;\n/**\n * Renders summary information about a layer and a histogram of parameters in\n * that layer.\n *\n * ```js\n * const model = tf.sequential({\n *  layers: [\n *    tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\n *    tf.layers.dense({units: 10, activation: 'softmax'}),\n *  ]\n * });\n *\n * const surface = { name: 'Layer Summary', tab: 'Model Inspection'};\n * tfvis.show.layer(surface, model.getLayer(undefined, 1));\n * ```\n *\n */\n\n/**\n * @doc {\n *  heading: 'Models & Tensors',\n *  subheading: 'Model Inspection',\n *  namespace: 'show'\n * }\n */\n\nfunction layer(container, layer) {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var _this = this;\n\n    var drawArea, details, headers, weightsInfoSurface, detailValues, histogramSelectorSurface, layerValuesHistogram, handleSelection;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            drawArea = render_utils_1.getDrawArea(container);\n            _context3.next = 3;\n            return getLayerDetails(layer);\n\n          case 3:\n            details = _context3.sent;\n            headers = ['Weight Name', 'Shape', 'Min', 'Max', '# Params', '# Zeros', '# NaNs', '# Infinity']; // Show layer summary\n\n            weightsInfoSurface = dom_1.subSurface(drawArea, 'layer-weights-info');\n            detailValues = details.map(function (l) {\n              return [l.name, l.shape, l.stats.min, l.stats.max, l.weight.size, l.stats.numZeros, l.stats.numNans, l.stats.numInfs];\n            });\n            table_1.table(weightsInfoSurface, {\n              headers: headers,\n              values: detailValues\n            });\n            histogramSelectorSurface = dom_1.subSurface(drawArea, 'select-layer');\n            layerValuesHistogram = dom_1.subSurface(drawArea, 'param-distribution');\n\n            handleSelection = function handleSelection(layerName) {\n              return __awaiter(_this, void 0, void 0,\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2() {\n                var layer, weights;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        layer = details.filter(function (d) {\n                          return d.name === layerName;\n                        })[0];\n                        _context2.next = 3;\n                        return layer.weight.data();\n\n                      case 3:\n                        weights = _context2.sent;\n                        histogram_1.histogram(layerValuesHistogram, weights, {\n                          height: 150,\n                          width: 460,\n                          stats: false\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n            };\n\n            addHistogramSelector(details.map(function (d) {\n              return d.name;\n            }), histogramSelectorSurface, handleSelection);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.layer = layer; //\n// Helper functions\n//\n\nfunction getModelSummary(model) {\n  return {\n    layers: model.layers.map(getLayerSummary)\n  };\n}\n/*\n * Gets summary information/metadata about a layer.\n */\n\n\nfunction getLayerSummary(layer) {\n  var outputShape;\n\n  if (Array.isArray(layer.outputShape[0])) {\n    var shapes = layer.outputShape.map(function (s) {\n      return formatShape(s);\n    });\n    outputShape = \"[\".concat(shapes.join(', '), \"]\");\n  } else {\n    outputShape = formatShape(layer.outputShape);\n  }\n\n  return {\n    name: layer.name,\n    trainable: layer.trainable,\n    parameters: layer.countParams(),\n    outputShape: outputShape\n  };\n}\n/*\n * Gets summary stats and shape for all weights in a layer.\n */\n\n\nfunction getLayerDetails(layer) {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    var weights, layerVariables, statsPromises, stats, shapes;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            weights = layer.getWeights();\n            layerVariables = layer.weights;\n            statsPromises = weights.map(math_1.tensorStats);\n            _context4.next = 5;\n            return Promise.all(statsPromises);\n\n          case 5:\n            stats = _context4.sent;\n            shapes = weights.map(function (w) {\n              return w.shape;\n            });\n            return _context4.abrupt(\"return\", weights.map(function (weight, i) {\n              return {\n                name: layerVariables[i].name,\n                stats: stats[i],\n                shape: formatShape(shapes[i]),\n                weight: weight\n              };\n            }));\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nfunction formatShape(shape) {\n  var oShape = shape.slice();\n\n  if (oShape.length === 0) {\n    return 'Scalar';\n  }\n\n  if (oShape[0] === null) {\n    oShape[0] = 'batch';\n  }\n\n  return \"[\".concat(oShape.join(','), \"]\");\n}\n\nfunction addHistogramSelector(items, parent, // tslint:disable-next-line:no-any\nselectionHandler) {\n  var select = \"\\n    <select>\\n      \".concat(items.map(function (i) {\n    return \"<option value=\".concat(i, \">\").concat(i, \"</option>\");\n  }), \"\\n    </select>\\n  \");\n  var button = \"<button>Show Values Distribution for:</button>\";\n  var content = \"<div>\".concat(button).concat(select, \"</div>\");\n  parent.innerHTML = content; // Add listeners\n\n  var buttonEl = parent.querySelector('button');\n  var selectEl = parent.querySelector('select');\n  buttonEl.addEventListener('click', function () {\n    selectionHandler(selectEl.selectedOptions[0].label);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}