{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar _regeneratorRuntime = require(\"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar vega_embed_1 = __importDefault(require(\"vega-embed\"));\n\nvar dom_1 = require(\"../util/dom\");\n\nvar render_utils_1 = require(\"./render_utils\");\n/**\n * Renders a barchart.\n *\n * ```js\n * const data = [\n *   { index: 0, value: 50 },\n *   { index: 1, value: 100 },\n *   { index: 2, value: 150 },\n *  ];\n *\n * // Render to visor\n * const surface = { name: 'Bar chart', tab: 'Charts' };\n * tfvis.render.barchart(surface, data);\n * ```\n *\n * @param data Data in the following format, (an array of objects)\n *    `[ {index: number, value: number} ... ]`\n *\n * @returns Promise - indicates completion of rendering\n */\n\n/** @doc {heading: 'Charts', namespace: 'render'} */\n\n\nfunction barchart(container, data) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var drawArea, values, options, instanceInfo, view, changes, xLabel, yLabel, xType, yType, xAxis, yAxis, embedOpts, colorEncoding, spec, embedRes;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            drawArea = render_utils_1.getDrawArea(container);\n            values = data;\n            options = Object.assign({}, defaultOpts, opts); // If we have rendered this chart before with the same options we can do a\n            // data only update, else  we do a regular re-render.\n\n            if (!instances.has(drawArea)) {\n              _context.next = 13;\n              break;\n            }\n\n            instanceInfo = instances.get(drawArea);\n\n            if (!render_utils_1.shallowEquals(options, instanceInfo.lastOptions)) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 8;\n            return render_utils_1.nextFrame();\n\n          case 8:\n            view = instanceInfo.view;\n            changes = view.changeset().remove(function () {\n              return true;\n            }).insert(values);\n            _context.next = 12;\n            return view.change('values', changes).runAsync();\n\n          case 12:\n            return _context.abrupt(\"return\");\n\n          case 13:\n            xLabel = options.xLabel, yLabel = options.yLabel, xType = options.xType, yType = options.yType;\n            xAxis = null;\n\n            if (xLabel != null) {\n              xAxis = {\n                title: xLabel\n              };\n            }\n\n            yAxis = null;\n\n            if (yLabel != null) {\n              yAxis = {\n                title: yLabel\n              };\n            }\n\n            embedOpts = {\n              actions: false,\n              mode: 'vega-lite',\n              defaultStyle: false\n            };\n\n            if (options.color != null) {\n              if (Array.isArray(options.color)) {\n                colorEncoding = {\n                  'field': 'index',\n                  'type': 'nominal',\n                  'scale': {\n                    'range': options.color\n                  }\n                };\n              } else {\n                colorEncoding = {\n                  'value': options.color\n                };\n              }\n            } else {\n              colorEncoding = {\n                'value': '#4C78A0'\n              };\n            }\n\n            spec = {\n              'width': options.width || dom_1.getDefaultWidth(drawArea),\n              'height': options.height || dom_1.getDefaultHeight(drawArea),\n              'padding': 0,\n              'autosize': {\n                'type': 'fit',\n                'contains': 'padding',\n                'resize': true\n              },\n              'config': {\n                'axis': {\n                  'labelFontSize': options.fontSize,\n                  'titleFontSize': options.fontSize\n                },\n                'text': {\n                  'fontSize': options.fontSize\n                },\n                'legend': {\n                  'labelFontSize': options.fontSize,\n                  'titleFontSize': options.fontSize\n                }\n              },\n              'data': {\n                'values': values,\n                'name': 'values'\n              },\n              'mark': {\n                'type': 'bar',\n                'tooltip': true\n              },\n              'encoding': {\n                'x': {\n                  'field': 'index',\n                  'type': xType,\n                  'axis': xAxis\n                },\n                'y': {\n                  'field': 'value',\n                  'type': yType,\n                  'axis': yAxis\n                },\n                'color': colorEncoding\n              }\n            };\n            _context.next = 23;\n            return render_utils_1.nextFrame();\n\n          case 23:\n            _context.next = 25;\n            return vega_embed_1.default(drawArea, spec, embedOpts);\n\n          case 25:\n            embedRes = _context.sent;\n            instances.set(drawArea, {\n              view: embedRes.view,\n              lastOptions: options\n            });\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.barchart = barchart;\nvar defaultOpts = {\n  xLabel: '',\n  yLabel: '',\n  xType: 'ordinal',\n  yType: 'quantitative',\n  fontSize: 11\n}; // We keep a map of containers to chart instances in order to reuse the\n// instance where possible.\n\nvar instances = new Map();","map":null,"metadata":{},"sourceType":"script"}