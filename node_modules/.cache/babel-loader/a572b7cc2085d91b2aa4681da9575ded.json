{"ast":null,"code":"import { ingest, Transform } from 'vega-dataflow';\nimport { array, inherits } from 'vega-util';\n/**\n * Load and parse data from an external source. Marshalls parameter\n * values and then invokes the Dataflow request method.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.url - The URL to load from.\n * @param {object} params.format - The data format options.\n */\n\nexport default function Load(params) {\n  Transform.call(this, [], params);\n  this._pending = null;\n}\nvar prototype = inherits(Load, Transform);\n\nprototype.transform = function (_, pulse) {\n  var _this = this;\n\n  var df = pulse.dataflow;\n\n  if (this._pending) {\n    // update state and return pulse\n    return output(this, pulse, this._pending);\n  }\n\n  if (stop(_)) return pulse.StopPropagation;\n\n  if (_.values) {\n    // parse and ingest values, return output pulse\n    return output(this, pulse, df.parse(_.values, _.format));\n  } else if (_.async) {\n    // return promise for non-blocking async loading\n    var p = df.request(_.url, _.format).then(function (res) {\n      _this._pending = array(res.data);\n      return function (df) {\n        return df.touch(_this);\n      };\n    });\n    return {\n      async: p\n    };\n  } else {\n    // return promise for synchronous loading\n    return df.request(_.url, _.format).then(function (res) {\n      return output(_this, pulse, array(res.data));\n    });\n  }\n};\n\nfunction stop(_) {\n  return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));\n}\n\nfunction output(op, pulse, data) {\n  data.forEach(ingest);\n  var out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = op.value;\n  op.value = out.source = out.add = data;\n  op._pending = null;\n  return out;\n}","map":null,"metadata":{},"sourceType":"module"}