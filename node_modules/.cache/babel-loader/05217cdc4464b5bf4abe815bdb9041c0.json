{"ast":null,"code":"import { Transform } from 'vega-dataflow';\nimport { error, fastmap, inherits } from 'vega-util';\nvar Paths = fastmap({\n  'line': line,\n  'line-radial': lineR,\n  'arc': arc,\n  'arc-radial': arcR,\n  'curve': curve,\n  'curve-radial': curveR,\n  'orthogonal-horizontal': orthoX,\n  'orthogonal-vertical': orthoY,\n  'orthogonal-radial': orthoR,\n  'diagonal-horizontal': diagonalX,\n  'diagonal-vertical': diagonalY,\n  'diagonal-radial': diagonalR\n});\n\nfunction sourceX(t) {\n  return t.source.x;\n}\n\nfunction sourceY(t) {\n  return t.source.y;\n}\n\nfunction targetX(t) {\n  return t.target.x;\n}\n\nfunction targetY(t) {\n  return t.target.y;\n}\n/**\n * Layout paths linking source and target elements.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\n\n\nexport default function LinkPath(params) {\n  Transform.call(this, {}, params);\n}\nLinkPath.Definition = {\n  \"type\": \"LinkPath\",\n  \"metadata\": {\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"sourceX\",\n    \"type\": \"field\",\n    \"default\": \"source.x\"\n  }, {\n    \"name\": \"sourceY\",\n    \"type\": \"field\",\n    \"default\": \"source.y\"\n  }, {\n    \"name\": \"targetX\",\n    \"type\": \"field\",\n    \"default\": \"target.x\"\n  }, {\n    \"name\": \"targetY\",\n    \"type\": \"field\",\n    \"default\": \"target.y\"\n  }, {\n    \"name\": \"orient\",\n    \"type\": \"enum\",\n    \"default\": \"vertical\",\n    \"values\": [\"horizontal\", \"vertical\", \"radial\"]\n  }, {\n    \"name\": \"shape\",\n    \"type\": \"enum\",\n    \"default\": \"line\",\n    \"values\": [\"line\", \"arc\", \"curve\", \"diagonal\", \"orthogonal\"]\n  }, {\n    \"name\": \"require\",\n    \"type\": \"signal\"\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"default\": \"path\"\n  }]\n};\nvar prototype = inherits(LinkPath, Transform);\n\nprototype.transform = function (_, pulse) {\n  var sx = _.sourceX || sourceX,\n      sy = _.sourceY || sourceY,\n      tx = _.targetX || targetX,\n      ty = _.targetY || targetY,\n      as = _.as || 'path',\n      orient = _.orient || 'vertical',\n      shape = _.shape || 'line',\n      path = Paths.get(shape + '-' + orient) || Paths.get(shape);\n\n  if (!path) {\n    error('LinkPath unsupported type: ' + _.shape + (_.orient ? '-' + _.orient : ''));\n  }\n\n  pulse.visit(pulse.SOURCE, function (t) {\n    t[as] = path(sx(t), sy(t), tx(t), ty(t));\n  });\n  return pulse.reflow(_.modified()).modifies(as);\n}; // -- Link Path Generation Methods -----\n\n\nfunction line(sx, sy, tx, ty) {\n  return 'M' + sx + ',' + sy + 'L' + tx + ',' + ty;\n}\n\nfunction lineR(sa, sr, ta, tr) {\n  return line(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));\n}\n\nfunction arc(sx, sy, tx, ty) {\n  var dx = tx - sx,\n      dy = ty - sy,\n      rr = Math.sqrt(dx * dx + dy * dy) / 2,\n      ra = 180 * Math.atan2(dy, dx) / Math.PI;\n  return 'M' + sx + ',' + sy + 'A' + rr + ',' + rr + ' ' + ra + ' 0 1' + ' ' + tx + ',' + ty;\n}\n\nfunction arcR(sa, sr, ta, tr) {\n  return arc(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));\n}\n\nfunction curve(sx, sy, tx, ty) {\n  var dx = tx - sx,\n      dy = ty - sy,\n      ix = 0.2 * (dx + dy),\n      iy = 0.2 * (dy - dx);\n  return 'M' + sx + ',' + sy + 'C' + (sx + ix) + ',' + (sy + iy) + ' ' + (tx + iy) + ',' + (ty - ix) + ' ' + tx + ',' + ty;\n}\n\nfunction curveR(sa, sr, ta, tr) {\n  return curve(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));\n}\n\nfunction orthoX(sx, sy, tx, ty) {\n  return 'M' + sx + ',' + sy + 'V' + ty + 'H' + tx;\n}\n\nfunction orthoY(sx, sy, tx, ty) {\n  return 'M' + sx + ',' + sy + 'H' + tx + 'V' + ty;\n}\n\nfunction orthoR(sa, sr, ta, tr) {\n  var sc = Math.cos(sa),\n      ss = Math.sin(sa),\n      tc = Math.cos(ta),\n      ts = Math.sin(ta),\n      sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;\n  return 'M' + sr * sc + ',' + sr * ss + 'A' + sr + ',' + sr + ' 0 0,' + (sf ? 1 : 0) + ' ' + sr * tc + ',' + sr * ts + 'L' + tr * tc + ',' + tr * ts;\n}\n\nfunction diagonalX(sx, sy, tx, ty) {\n  var m = (sx + tx) / 2;\n  return 'M' + sx + ',' + sy + 'C' + m + ',' + sy + ' ' + m + ',' + ty + ' ' + tx + ',' + ty;\n}\n\nfunction diagonalY(sx, sy, tx, ty) {\n  var m = (sy + ty) / 2;\n  return 'M' + sx + ',' + sy + 'C' + sx + ',' + m + ' ' + tx + ',' + m + ' ' + tx + ',' + ty;\n}\n\nfunction diagonalR(sa, sr, ta, tr) {\n  var sc = Math.cos(sa),\n      ss = Math.sin(sa),\n      tc = Math.cos(ta),\n      ts = Math.sin(ta),\n      mr = (sr + tr) / 2;\n  return 'M' + sr * sc + ',' + sr * ss + 'C' + mr * sc + ',' + mr * ss + ' ' + mr * tc + ',' + mr * ts + ' ' + tr * tc + ',' + tr * ts;\n}","map":null,"metadata":{},"sourceType":"module"}