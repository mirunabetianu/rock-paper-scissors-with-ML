{"ast":null,"code":"import { AXIS_PARTS, isAxisProperty } from '../../axis';\nimport { isBinned } from '../../bin';\nimport { POSITION_SCALE_CHANNELS, X, Y } from '../../channel';\nimport { isTimeFormatFieldDef, toFieldDefBase } from '../../channeldef';\nimport { contains, getFirstDefined, keys, normalizeAngle } from '../../util';\nimport { mergeTitle, mergeTitleComponent, mergeTitleFieldDefs, numberFormat } from '../common';\nimport { guideEncodeEntry } from '../guide';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, mergeValuesWithExplicit } from '../split';\nimport { AxisComponent, AXIS_COMPONENT_PROPERTIES } from './component';\nimport { getAxisConfig } from './config';\nimport * as encode from './encode';\nimport * as properties from './properties';\nexport function parseUnitAxes(model) {\n  return POSITION_SCALE_CHANNELS.reduce(function (axis, channel) {\n    if (model.component.scales[channel] && model.axis(channel)) {\n      axis[channel] = [parseAxis(channel, model)];\n    }\n\n    return axis;\n  }, {});\n}\nvar OPPOSITE_ORIENT = {\n  bottom: 'top',\n  top: 'bottom',\n  left: 'right',\n  right: 'left'\n};\nexport function parseLayerAxes(model) {\n  var _a;\n\n  var _model$component = model.component,\n      axes = _model$component.axes,\n      resolve = _model$component.resolve;\n  var axisCount = {\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0\n  };\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = model.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var child = _step.value;\n      child.parseAxesAndHeaders();\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = keys(child.component.axes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var channel = _step2.value;\n          resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n\n          if (resolve.axis[channel] === 'shared') {\n            // If the resolve says shared (and has not been overridden)\n            // We will try to merge and see if there is a conflict\n            axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n\n            if (!axes[channel]) {\n              // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n              // Thus, mark axis as independent and remove the axis component.\n              resolve.axis[channel] = 'independent';\n              delete axes[channel];\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    } // Move axes to layer's axis component and merge shared axes\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  for (var _i = 0, _arr = [X, Y]; _i < _arr.length; _i++) {\n    var _channel = _arr[_i];\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = model.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _child = _step3.value;\n\n        if (!_child.component.axes[_channel]) {\n          // skip if the child does not have a particular axis\n          continue;\n        }\n\n        if (resolve.axis[_channel] === 'independent') {\n          // If axes are independent, concat the axisComponent array.\n          axes[_channel] = (_a = axes[_channel], _a !== null && _a !== void 0 ? _a : []).concat(_child.component.axes[_channel]); // Automatically adjust orient\n\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = _child.component.axes[_channel][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var axisComponent = _step5.value;\n\n              var _axisComponent$getWit = axisComponent.getWithExplicit('orient'),\n                  orient = _axisComponent$getWit.value,\n                  explicit = _axisComponent$getWit.explicit;\n\n              if (axisCount[orient] > 0 && !explicit) {\n                // Change axis orient if the number do not match\n                var oppositeOrient = OPPOSITE_ORIENT[orient];\n\n                if (axisCount[orient] > axisCount[oppositeOrient]) {\n                  axisComponent.set('orient', oppositeOrient, false);\n                }\n              }\n\n              axisCount[orient]++; // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        } // After merging, make sure to remove axes from child\n\n\n        delete _child.component.axes[_channel];\n      } // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)\n\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    if (resolve.axis[_channel] === 'independent' && axes[_channel] && axes[_channel].length > 1) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = axes[_channel][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var axisCmpt = _step4.value;\n\n          if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {\n            axisCmpt.implicit.grid = false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\n  if (mergedAxisCmpts) {\n    // FIXME: this is a bit wrong once we support multiple axes\n    if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n      return undefined; // Cannot merge axis component with different number of axes.\n    }\n\n    var length = mergedAxisCmpts.length;\n\n    for (var i = 0; i < length; i++) {\n      var merged = mergedAxisCmpts[i];\n      var child = childAxisCmpts[i];\n\n      if (!!merged !== !!child) {\n        return undefined;\n      } else if (merged && child) {\n        var mergedOrient = merged.getWithExplicit('orient');\n        var childOrient = child.getWithExplicit('orient');\n\n        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n          // Cannot merge due to inconsistent orient\n          return undefined;\n        } else {\n          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n        }\n      }\n    }\n  } else {\n    // For first one, return a copy of the child\n    return childAxisCmpts.map(function (axisComponent) {\n      return axisComponent.clone();\n    });\n  }\n\n  return mergedAxisCmpts;\n}\n\nfunction mergeAxisComponent(merged, child) {\n  var _iteratorNormalCompletion6 = true;\n  var _didIteratorError6 = false;\n  var _iteratorError6 = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var prop = _step6.value;\n      var mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', // Tie breaker function\n      function (v1, v2) {\n        switch (prop) {\n          case 'title':\n            return mergeTitleComponent(v1, v2);\n\n          case 'gridScale':\n            return {\n              explicit: v1.explicit,\n              value: getFirstDefined(v1.value, v2.value)\n            };\n        }\n\n        return defaultTieBreaker(v1, v2, prop, 'axis');\n      });\n      merged.setWithExplicit(prop, mergedValueWithExplicit);\n    };\n\n    for (var _iterator6 = AXIS_COMPONENT_PROPERTIES[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError6 = true;\n    _iteratorError6 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n        _iterator6.return();\n      }\n    } finally {\n      if (_didIteratorError6) {\n        throw _iteratorError6;\n      }\n    }\n  }\n\n  return merged;\n}\n\nfunction getFieldDefTitle(model, channel) {\n  var channel2 = channel === 'x' ? 'x2' : 'y2';\n  var fieldDef = model.fieldDef(channel);\n  var fieldDef2 = model.fieldDef(channel2);\n  var title1 = fieldDef ? fieldDef.title : undefined;\n  var title2 = fieldDef2 ? fieldDef2.title : undefined;\n\n  if (title1 && title2) {\n    return mergeTitle(title1, title2);\n  } else if (title1) {\n    return title1;\n  } else if (title2) {\n    return title2;\n  } else if (title1 !== undefined) {\n    // falsy value to disable config\n    return title1;\n  } else if (title2 !== undefined) {\n    // falsy value to disable config\n    return title2;\n  }\n\n  return undefined;\n}\n\nfunction isExplicit(value, property, axis, model, channel) {\n  switch (property) {\n    case 'titleAngle':\n    case 'labelAngle':\n      return value === normalizeAngle(axis[property]);\n\n    case 'values':\n      return !!axis.values;\n    // specified axis.values is already respected, but may get transformed.\n\n    case 'encode':\n      // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n      return !!axis.encoding || !!axis.labelAngle;\n\n    case 'title':\n      // title can be explicit if fieldDef.title is set\n      if (value === getFieldDefTitle(model, channel)) {\n        return true;\n      }\n\n  } // Otherwise, things are explicit if the returned value matches the specified property\n\n\n  return value === axis[property];\n}\n\nfunction parseAxis(channel, model) {\n  var _a;\n\n  var axis = model.axis(channel);\n  var axisComponent = new AxisComponent(); // 1.2. Add properties\n\n  AXIS_COMPONENT_PROPERTIES.forEach(function (property) {\n    var value = getProperty(property, axis, channel, model);\n\n    if (value !== undefined) {\n      var explicit = isExplicit(value, property, axis, model, channel);\n      var configValue = getAxisConfig(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type')); // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n\n      if (explicit || configValue === undefined) {\n        // Do not apply implicit rule if there is a config value\n        axisComponent.set(property, value, explicit);\n      } else if (contains(['grid', 'orient'], property) && configValue) {\n        // - Grid is an exception because we need to set grid = true to generate another grid axis\n        // - Orient is not an axis config in Vega, so we need to set too.\n        axisComponent.set(property, configValue, false);\n      }\n    }\n  }); // 2) Add guide encode definition groups\n\n  var axisEncoding = (_a = axis.encoding, _a !== null && _a !== void 0 ? _a : {});\n  var axisEncode = AXIS_PARTS.reduce(function (e, part) {\n    var _a;\n\n    if (!axisComponent.hasAxisPart(part)) {\n      // No need to create encode for a disabled part.\n      return e;\n    }\n\n    var axisEncodingPart = guideEncodeEntry((_a = axisEncoding[part], _a !== null && _a !== void 0 ? _a : {}), model);\n    var value = part === 'labels' ? encode.labels(model, channel, axisEncodingPart) : axisEncodingPart;\n\n    if (value !== undefined && keys(value).length > 0) {\n      e[part] = {\n        update: value\n      };\n    }\n\n    return e;\n  }, {}); // FIXME: By having encode as one property, we won't have fine grained encode merging.\n\n  if (keys(axisEncode).length > 0) {\n    axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n  }\n\n  return axisComponent;\n}\n\nfunction getProperty(property, specifiedAxis, channel, model) {\n  var fieldDef = model.fieldDef(channel); // Some properties depend on labelAngle so we have to declare it here.\n  // Also, we don't use `getFirstDefined` for labelAngle\n  // as we want to normalize specified value to be within [0,360)\n\n  var labelAngle = properties.labelAngle(model, specifiedAxis, channel, fieldDef);\n  var orient = getFirstDefined(specifiedAxis.orient, properties.orient(channel));\n  var mark = model.mark,\n      config = model.config;\n\n  switch (property) {\n    case 'scale':\n      return model.scaleName(channel);\n\n    case 'gridScale':\n      return properties.gridScale(model, channel);\n\n    case 'format':\n      // We don't include temporal field here as we apply format in encode block\n      if (isTimeFormatFieldDef(fieldDef)) {\n        return undefined;\n      }\n\n      return numberFormat(fieldDef, specifiedAxis.format, config);\n\n    case 'formatType':\n      // As with format, we don't include temporal field here as we apply format in encode block\n      if (isTimeFormatFieldDef(fieldDef)) {\n        return undefined;\n      }\n\n      return specifiedAxis.formatType;\n\n    case 'grid':\n      {\n        if (isBinned(model.fieldDef(channel).bin)) {\n          return false;\n        } else {\n          var scaleType = model.getScaleComponent(channel).get('type');\n          return getFirstDefined(specifiedAxis.grid, properties.defaultGrid(scaleType, fieldDef));\n        }\n      }\n\n    case 'labelAlign':\n      return getFirstDefined(specifiedAxis.labelAlign, properties.defaultLabelAlign(labelAngle, orient));\n\n    case 'labelAngle':\n      return labelAngle;\n\n    case 'labelBaseline':\n      return getFirstDefined(specifiedAxis.labelBaseline, properties.defaultLabelBaseline(labelAngle, orient));\n\n    case 'labelFlush':\n      return getFirstDefined(specifiedAxis.labelFlush, properties.defaultLabelFlush(fieldDef, channel));\n\n    case 'labelOverlap':\n      {\n        var _scaleType = model.getScaleComponent(channel).get('type');\n\n        return getFirstDefined(specifiedAxis.labelOverlap, properties.defaultLabelOverlap(fieldDef, _scaleType));\n      }\n\n    case 'orient':\n      return orient;\n\n    case 'tickCount':\n      {\n        var _scaleType2 = model.getScaleComponent(channel).get('type');\n\n        var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n        var size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;\n        return getFirstDefined(specifiedAxis.tickCount, properties.defaultTickCount({\n          fieldDef: fieldDef,\n          scaleType: _scaleType2,\n          size: size\n        }));\n      }\n\n    case 'title':\n      {\n        var channel2 = channel === 'x' ? 'x2' : 'y2';\n        var fieldDef2 = model.fieldDef(channel2); // Keep undefined so we use default if title is unspecified.\n        // For other falsy value, keep them so we will hide the title.\n\n        return getFirstDefined(specifiedAxis.title, getFieldDefTitle(model, channel), // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n        mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : []));\n      }\n\n    case 'values':\n      return properties.values(specifiedAxis, model, fieldDef);\n\n    case 'zindex':\n      return getFirstDefined(specifiedAxis.zindex, properties.defaultZindex(mark, fieldDef));\n  } // Otherwise, return specified property.\n\n\n  return isAxisProperty(property) ? specifiedAxis[property] : undefined;\n}","map":null,"metadata":{},"sourceType":"module"}