{"ast":null,"code":"import { selector as parseSelector } from 'vega-event-selector';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport scalesCompiler, { domain } from './scales';\nvar ANCHOR = '_translate_anchor';\nvar DELTA = '_translate_delta';\nvar translate = {\n  has: function has(selCmpt) {\n    return selCmpt.type === 'interval' && selCmpt.translate;\n  },\n  signals: function signals(model, selCmpt, _signals) {\n    var name = selCmpt.name;\n    var hasScales = scalesCompiler.has(selCmpt);\n    var anchor = name + ANCHOR;\n    var _selCmpt$project$hasC = selCmpt.project.hasChannel,\n        x = _selCmpt$project$hasC.x,\n        y = _selCmpt$project$hasC.y;\n    var events = parseSelector(selCmpt.translate, 'scope');\n\n    if (!hasScales) {\n      events = events.map(function (e) {\n        return e.between[0].markname = name + INTERVAL_BRUSH, e;\n      });\n    }\n\n    _signals.push({\n      name: anchor,\n      value: {},\n      on: [{\n        events: events.map(function (e) {\n          return e.between[0];\n        }),\n        update: '{x: x(unit), y: y(unit)' + (x !== undefined ? ', extent_x: ' + (hasScales ? domain(model, X) : \"slice(\".concat(x.signals.visual, \")\")) : '') + (y !== undefined ? ', extent_y: ' + (hasScales ? domain(model, Y) : \"slice(\".concat(y.signals.visual, \")\")) : '') + '}'\n      }]\n    }, {\n      name: name + DELTA,\n      value: {},\n      on: [{\n        events: events,\n        update: \"{x: \".concat(anchor, \".x - x(unit), y: \").concat(anchor, \".y - y(unit)}\")\n      }]\n    });\n\n    if (x !== undefined) {\n      onDelta(model, selCmpt, x, 'width', _signals);\n    }\n\n    if (y !== undefined) {\n      onDelta(model, selCmpt, y, 'height', _signals);\n    }\n\n    return _signals;\n  }\n};\nexport default translate;\n\nfunction onDelta(model, selCmpt, proj, size, signals) {\n  var _a;\n\n  var name = selCmpt.name;\n  var anchor = name + ANCHOR;\n  var delta = name + DELTA;\n  var channel = proj.channel;\n  var hasScales = scalesCompiler.has(selCmpt);\n  var signal = signals.filter(function (s) {\n    return s.name === proj.signals[hasScales ? 'data' : 'visual'];\n  })[0];\n  var sizeSg = model.getSizeSignalRef(size).signal;\n  var scaleCmpt = model.getScaleComponent(channel);\n  var scaleType = scaleCmpt.get('type');\n  var sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n\n  var extent = \"\".concat(anchor, \".extent_\").concat(channel);\n  var offset = \"\".concat(sign).concat(delta, \".\").concat(channel, \" / \") + (hasScales ? \"\".concat(sizeSg) : \"span(\".concat(extent, \")\"));\n  var panFn = !hasScales ? 'panLinear' : scaleType === 'log' ? 'panLog' : scaleType === 'pow' ? 'panPow' : 'panLinear';\n  var update = \"\".concat(panFn, \"(\").concat(extent, \", \").concat(offset) + (hasScales && scaleType === 'pow' ? \", \".concat((_a = scaleCmpt.get('exponent'), _a !== null && _a !== void 0 ? _a : 1)) : '') + ')';\n  signal.on.push({\n    events: {\n      signal: delta\n    },\n    update: hasScales ? update : \"clampRange(\".concat(update, \", 0, \").concat(sizeSg, \")\")\n  });\n}","map":null,"metadata":{},"sourceType":"module"}