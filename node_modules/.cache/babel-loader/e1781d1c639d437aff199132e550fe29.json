{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar _regeneratorRuntime = require(\"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar d3_format_1 = require(\"d3-format\");\n\nvar vega_embed_1 = __importDefault(require(\"vega-embed\"));\n\nvar dom_1 = require(\"../util/dom\");\n\nvar math_1 = require(\"../util/math\");\n\nvar table_1 = require(\"./table\");\n\nvar defaultOpts = {\n  maxBins: 12,\n  fontSize: 11\n};\n/**\n * Renders a histogram of values\n *\n * ```js\n * const data = Array(100).fill(0)\n *   .map(x => Math.random() * 100 - (Math.random() * 50))\n *\n * // Push some special values for the stats table.\n * data.push(Infinity);\n * data.push(NaN);\n * data.push(0);\n *\n * const surface = { name: 'Histogram', tab: 'Charts' };\n * tfvis.render.histogram(surface, data);\n * ```\n */\n\n/** @doc {heading: 'Charts', namespace: 'render'} */\n\nfunction histogram(container, data) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var values, options, embedOpts, histogramContainer, statsContainer, stats, filtered, i, val, histogramSpec;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            values = prepareData(data);\n            options = Object.assign({}, defaultOpts, opts);\n            embedOpts = {\n              actions: false,\n              mode: 'vega-lite',\n              defaultStyle: false\n            };\n            histogramContainer = dom_1.subSurface(container, 'histogram');\n\n            if (opts.stats !== false) {\n              statsContainer = dom_1.subSurface(container, 'stats', {\n                prepend: true\n              });\n\n              if (opts.stats) {\n                stats = opts.stats;\n              } else {\n                stats = math_1.arrayStats(values.map(function (x) {\n                  return x.value;\n                }));\n              }\n\n              renderStats(stats, statsContainer, {\n                fontSize: options.fontSize\n              });\n            } // Now that we have rendered stats we need to remove any NaNs and Infinities\n            // before rendering the histogram\n\n\n            filtered = [];\n\n            for (i = 0; i < values.length; i++) {\n              val = values[i].value;\n\n              if (val != null && isFinite(val)) {\n                filtered.push(values[i]);\n              }\n            }\n\n            histogramSpec = {\n              'width': options.width || dom_1.getDefaultWidth(histogramContainer),\n              'height': options.height || dom_1.getDefaultHeight(histogramContainer),\n              'padding': 0,\n              'autosize': {\n                'type': 'fit',\n                'contains': 'padding',\n                'resize': true\n              },\n              'data': {\n                'values': filtered\n              },\n              'mark': {\n                'type': 'bar',\n                'tooltip': true\n              },\n              'config': {\n                'axis': {\n                  'labelFontSize': options.fontSize,\n                  'titleFontSize': options.fontSize\n                },\n                'text': {\n                  'fontSize': options.fontSize\n                },\n                'legend': {\n                  'labelFontSize': options.fontSize,\n                  'titleFontSize': options.fontSize\n                }\n              },\n              'encoding': {\n                'x': {\n                  'bin': {\n                    'maxbins': options.maxBins\n                  },\n                  'field': 'value',\n                  'type': 'quantitative'\n                },\n                'y': {\n                  'aggregate': 'count',\n                  'type': 'quantitative'\n                },\n                'color': {\n                  'value': options.color || '#001B44'\n                }\n              }\n            };\n            return _context.abrupt(\"return\", vega_embed_1.default(histogramContainer, histogramSpec, embedOpts));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.histogram = histogram;\n\nfunction renderStats(stats, container, opts) {\n  var format = d3_format_1.format(',.4~f');\n  var pctFormat = d3_format_1.format('.4~p');\n  var headers = [];\n  var vals = [];\n\n  if (stats.numVals != null) {\n    headers.push('Num Vals');\n    vals.push(format(stats.numVals));\n  }\n\n  if (stats.min != null) {\n    headers.push('Min');\n    vals.push(format(stats.min));\n  }\n\n  if (stats.max != null) {\n    headers.push('Max');\n    vals.push(format(stats.max));\n  }\n\n  if (stats.numZeros != null) {\n    headers.push('# Zeros');\n    var zeroPct = '';\n\n    if (stats.numVals) {\n      zeroPct = stats.numZeros > 0 ? \"(\".concat(pctFormat(stats.numZeros / stats.numVals), \")\") : '';\n    }\n\n    vals.push(\"\".concat(format(stats.numZeros), \" \").concat(zeroPct));\n  }\n\n  if (stats.numNans != null) {\n    headers.push('# NaNs');\n    var nanPct = '';\n\n    if (stats.numVals) {\n      nanPct = stats.numNans > 0 ? \"(\".concat(pctFormat(stats.numNans / stats.numVals), \")\") : '';\n    }\n\n    vals.push(\"\".concat(format(stats.numNans), \" \").concat(nanPct));\n  }\n\n  if (stats.numInfs != null) {\n    headers.push('# Infinity');\n    var infPct = '';\n\n    if (stats.numVals) {\n      infPct = stats.numInfs > 0 ? \"(\".concat(pctFormat(stats.numInfs / stats.numVals), \")\") : '';\n    }\n\n    vals.push(\"\".concat(format(stats.numInfs), \" \").concat(infPct));\n  }\n\n  table_1.table(container, {\n    headers: headers,\n    values: [vals]\n  }, opts);\n}\n/**\n * Formats data to the internal format used by this chart.\n */\n\n\nfunction prepareData(data) {\n  if (data.length == null) {\n    throw new Error('input data must be an array');\n  }\n\n  if (data.length === 0) {\n    return [];\n  } else if (typeof data[0] === 'object') {\n    if (data[0].value == null) {\n      throw new Error('input data must have a value field');\n    } else {\n      return data;\n    }\n  } else {\n    var ret = Array(data.length);\n\n    for (var i = 0; i < data.length; i++) {\n      ret[i] = {\n        value: data[i]\n      };\n    }\n\n    return ret;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}