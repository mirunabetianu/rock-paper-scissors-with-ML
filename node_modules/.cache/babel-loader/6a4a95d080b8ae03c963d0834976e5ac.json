{"ast":null,"code":"import { fieldNames } from './util/util';\nimport { ingest, rederive, Transform, tupleid } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\n/**\n * Performs a relational projection, copying selected fields from source\n * tuples to a new set of derived tuples.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *} params.fields - The fields to project,\n *   as an array of field accessors. If unspecified, all fields will be\n *   copied with names unchanged.\n * @param {Array<string>} [params.as] - Output field names for each projected\n *   field. Any unspecified fields will use the field name provided by\n *   the field accessor.\n */\n\nexport default function Project(params) {\n  Transform.call(this, null, params);\n}\nProject.Definition = {\n  \"type\": \"Project\",\n  \"metadata\": {\n    \"generates\": true,\n    \"changes\": true\n  },\n  \"params\": [{\n    \"name\": \"fields\",\n    \"type\": \"field\",\n    \"array\": true\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"null\": true,\n    \"array\": true\n  }]\n};\nvar prototype = inherits(Project, Transform);\n\nprototype.transform = function (_, pulse) {\n  var fields = _.fields,\n      as = fieldNames(_.fields, _.as || []),\n      derive = fields ? function (s, t) {\n    return project(s, t, fields, as);\n  } : rederive,\n      out,\n      lut;\n\n  if (this.value) {\n    lut = this.value;\n  } else {\n    pulse = pulse.addAll();\n    lut = this.value = {};\n  }\n\n  out = pulse.fork(pulse.NO_SOURCE);\n  pulse.visit(pulse.REM, function (t) {\n    var id = tupleid(t);\n    out.rem.push(lut[id]);\n    lut[id] = null;\n  });\n  pulse.visit(pulse.ADD, function (t) {\n    var dt = derive(t, ingest({}));\n    lut[tupleid(t)] = dt;\n    out.add.push(dt);\n  });\n  pulse.visit(pulse.MOD, function (t) {\n    out.mod.push(derive(t, lut[tupleid(t)]));\n  });\n  return out;\n};\n\nfunction project(s, t, fields, as) {\n  for (var i = 0, n = fields.length; i < n; ++i) {\n    t[as[i]] = fields[i](s);\n  }\n\n  return t;\n}","map":null,"metadata":{},"sourceType":"module"}