{"ast":null,"code":"import { Left, Right, Center, Start, End, Vertical } from './constants';\nimport { value } from '../../util';\nimport { isObject, stringValue } from 'vega-util';\nexport function lookup(spec, config) {\n  var _ = function _(name, dflt) {\n    return value(spec[name], value(config[name], dflt));\n  };\n\n  _.isVertical = function (s) {\n    return Vertical === value(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));\n  };\n\n  _.gradientLength = function () {\n    return value(spec.gradientLength, config.gradientLength || config.gradientWidth);\n  };\n\n  _.gradientThickness = function () {\n    return value(spec.gradientThickness, config.gradientThickness || config.gradientHeight);\n  };\n\n  _.entryColumns = function () {\n    return value(spec.columns, value(config.columns, +_.isVertical(true)));\n  };\n\n  return _;\n}\nexport function getEncoding(name, encode) {\n  var v = encode && (encode.update && encode.update[name] || encode.enter && encode.enter[name]);\n  return v && v.signal ? v : v ? v.value : null;\n}\nexport function getStyle(name, scope, style) {\n  var s = scope.config.style[style];\n  return s && s[name];\n}\nexport function anchorExpr(s, e, m) {\n  return \"item.anchor === \\\"\".concat(Start, \"\\\" ? \").concat(s, \" : item.anchor === \\\"\").concat(End, \"\\\" ? \").concat(e, \" : \").concat(m);\n}\nexport var alignExpr = anchorExpr(stringValue(Left), stringValue(Right), stringValue(Center));\nexport function tickBand(_) {\n  var v = _('tickBand'),\n      offset = _('tickOffset'),\n      band,\n      extra;\n\n  if (!v) {\n    // if no tick band entry, fall back on other properties\n    band = _('bandPosition');\n    extra = _('tickExtra');\n  } else if (v.signal) {\n    // if signal, augment code to interpret values\n    band = {\n      signal: \"(\".concat(v.signal, \")==='extent'?1:0.5\")\n    };\n    extra = {\n      signal: \"(\".concat(v.signal, \")==='extent'?true:false\")\n    };\n\n    if (!isObject(offset)) {\n      offset = {\n        signal: \"(\".concat(v.signal, \")==='extent'?0:\").concat(offset)\n      };\n    }\n  } else if (v === 'extent') {\n    // if constant, simply set values\n    band = 1;\n    extra = true;\n    offset = 0;\n  } else {\n    band = 0.5;\n    extra = false;\n  }\n\n  return {\n    extra: extra,\n    band: band,\n    offset: offset\n  };\n}","map":null,"metadata":{},"sourceType":"module"}