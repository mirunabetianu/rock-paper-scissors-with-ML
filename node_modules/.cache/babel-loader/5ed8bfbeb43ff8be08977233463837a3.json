{"ast":null,"code":"import _toConsumableArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { dateTimeExpr } from './datetime';\nimport * as log from './log';\nimport { accessPathWithDatum, keys, replaceAll } from './util';\nimport stringify from 'fast-json-stable-stringify';\nexport var TimeUnit;\n\n(function (TimeUnit) {\n  TimeUnit.YEAR = 'year';\n  TimeUnit.MONTH = 'month';\n  TimeUnit.DAY = 'day';\n  TimeUnit.DATE = 'date';\n  TimeUnit.HOURS = 'hours';\n  TimeUnit.MINUTES = 'minutes';\n  TimeUnit.SECONDS = 'seconds';\n  TimeUnit.MILLISECONDS = 'milliseconds';\n  TimeUnit.YEARMONTH = 'yearmonth';\n  TimeUnit.YEARMONTHDATE = 'yearmonthdate';\n  TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';\n  TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';\n  TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds'; // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n\n  TimeUnit.MONTHDATE = 'monthdate';\n  TimeUnit.MONTHDATEHOURS = 'monthdatehours';\n  TimeUnit.HOURSMINUTES = 'hoursminutes';\n  TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';\n  TimeUnit.MINUTESSECONDS = 'minutesseconds';\n  TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';\n  TimeUnit.QUARTER = 'quarter';\n  TimeUnit.YEARQUARTER = 'yearquarter';\n  TimeUnit.QUARTERMONTH = 'quartermonth';\n  TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';\n  TimeUnit.UTCYEAR = 'utcyear';\n  TimeUnit.UTCMONTH = 'utcmonth';\n  TimeUnit.UTCDAY = 'utcday';\n  TimeUnit.UTCDATE = 'utcdate';\n  TimeUnit.UTCHOURS = 'utchours';\n  TimeUnit.UTCMINUTES = 'utcminutes';\n  TimeUnit.UTCSECONDS = 'utcseconds';\n  TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';\n  TimeUnit.UTCYEARMONTH = 'utcyearmonth';\n  TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';\n  TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';\n  TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';\n  TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds'; // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n\n  TimeUnit.UTCMONTHDATE = 'utcmonthdate';\n  TimeUnit.UTCMONTHDATEHOURS = 'utcmonthdatehours';\n  TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';\n  TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';\n  TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';\n  TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';\n  TimeUnit.UTCQUARTER = 'utcquarter';\n  TimeUnit.UTCYEARQUARTER = 'utcyearquarter';\n  TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';\n  TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';\n})(TimeUnit || (TimeUnit = {}));\n/** Time Unit that only corresponds to only one part of Date objects. */\n\n\nvar LOCAL_SINGLE_TIMEUNIT_INDEX = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  day: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\nexport var TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nvar UTC_SINGLE_TIMEUNIT_INDEX = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcday: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n};\nexport function isUtcSingleTimeUnit(timeUnit) {\n  return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nvar LOCAL_MULTI_TIMEUNIT_INDEX = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n  quartermonth: 1,\n  monthdate: 1,\n  monthdatehours: 1,\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n  minutesseconds: 1,\n  secondsmilliseconds: 1\n};\nvar UTC_MULTI_TIMEUNIT_INDEX = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n  utcquartermonth: 1,\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n  utcminutesseconds: 1,\n  utcsecondsmilliseconds: 1\n};\nvar UTC_TIMEUNIT_INDEX = Object.assign(Object.assign({}, UTC_SINGLE_TIMEUNIT_INDEX), UTC_MULTI_TIMEUNIT_INDEX);\nexport function isUTCTimeUnit(t) {\n  return !!UTC_TIMEUNIT_INDEX[t];\n}\nexport function getLocalTimeUnit(t) {\n  return t.substr(3);\n}\nvar TIMEUNIT_INDEX = Object.assign(Object.assign(Object.assign(Object.assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX), UTC_SINGLE_TIMEUNIT_INDEX), LOCAL_MULTI_TIMEUNIT_INDEX), UTC_MULTI_TIMEUNIT_INDEX);\nexport var TIMEUNITS = keys(TIMEUNIT_INDEX); // In order of increasing specificity\n\nexport var VEGALITE_TIMEFORMAT = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\nexport function isTimeUnit(t) {\n  return !!TIMEUNIT_INDEX[t];\n}\nexport function getTimeUnitParts(timeUnit) {\n  return TIMEUNIT_PARTS.reduce(function (parts, part) {\n    if (containsTimeUnit(timeUnit, part)) {\n      return [].concat(_toConsumableArray(parts), [part]);\n    }\n\n    return parts;\n  }, []);\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\n\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n  var index = fullTimeUnit.indexOf(timeUnit);\n  return index > -1 && (timeUnit !== TimeUnit.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds\n  ;\n}\n/**\n * Returns Vega expresssion for a given timeUnit and fieldRef\n */\n\nexport function fieldExpr(fullTimeUnit, field) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    end: false\n  },\n      end = _ref.end;\n\n  var fieldRef = accessPathWithDatum(field);\n  var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n\n  function func(timeUnit) {\n    if (timeUnit === TimeUnit.QUARTER) {\n      // quarter starting at 0 (0,3,6,9).\n      return \"(\".concat(utc, \"quarter(\").concat(fieldRef, \")-1)\");\n    } else {\n      return \"\".concat(utc).concat(timeUnit, \"(\").concat(fieldRef, \")\");\n    }\n  }\n\n  var lastTimeUnit;\n  var d = TIMEUNIT_PARTS.reduce(function (dateExpr, tu) {\n    if (containsTimeUnit(fullTimeUnit, tu)) {\n      dateExpr[tu] = func(tu);\n      lastTimeUnit = tu;\n    }\n\n    return dateExpr;\n  }, {});\n\n  if (end) {\n    d[lastTimeUnit] += '+1';\n  }\n\n  return dateTimeExpr(d);\n}\nexport function getTimeUnitSpecifierExpression(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  var timeUnitParts = getTimeUnitParts(timeUnit);\n  return \"timeUnitSpecifier(\".concat(stringify(timeUnitParts), \", \").concat(stringify(VEGALITE_TIMEFORMAT), \")\");\n}\n/**\n * returns the signal expression used for axis labels for a time unit\n */\n\nexport function formatExpression(timeUnit, field, isUTCScale) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  var timeUnitSpecifierExpr = getTimeUnitSpecifierExpression(timeUnit); // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n\n  if (isUTCScale) {\n    return \"utcFormat(\".concat(field, \", \").concat(timeUnitSpecifierExpr, \")\");\n  } else {\n    return \"timeFormat(\".concat(field, \", \").concat(timeUnitSpecifierExpr, \")\");\n  }\n}\nexport function normalizeTimeUnit(timeUnit) {\n  if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {\n    log.warn(log.message.dayReplacedWithDate(timeUnit));\n    return replaceAll(timeUnit, 'day', 'date');\n  }\n\n  return timeUnit;\n}","map":null,"metadata":{},"sourceType":"module"}