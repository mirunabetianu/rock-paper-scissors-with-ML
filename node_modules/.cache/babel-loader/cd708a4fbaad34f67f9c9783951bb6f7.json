{"ast":null,"code":"import _defineProperty from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { isArray } from 'vega-util';\nimport { FACET_CHANNELS } from '../../channel';\nimport { vgField } from '../../channeldef';\nimport { HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP } from '../../header';\nimport { isSortField } from '../../sort';\nimport { isFacetMapping } from '../../spec/facet';\nimport { contains, keys, replaceAll } from '../../util';\nimport { defaultLabelAlign, defaultLabelBaseline } from '../axis/properties';\nimport { formatSignalRef } from '../common';\nimport { sortArrayIndexField } from '../data/calculate';\nimport { isFacetModel } from '../model';\nimport { getHeaderChannel, getHeaderProperties, getHeaderProperty } from './common';\nimport { HEADER_TYPES } from './component'; // TODO: rename to assembleHeaderTitleGroup\n\nexport function assembleTitleGroup(model, channel) {\n  var title = model.component.layoutHeaders[channel].title;\n  var config = model.config ? model.config : undefined;\n  var facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : undefined;\n\n  var _getHeaderProperties = getHeaderProperties(['titleAnchor', 'titleAngle', 'titleOrient'], facetFieldDef, config, channel),\n      titleAnchor = _getHeaderProperties.titleAnchor,\n      titleAngle = _getHeaderProperties.titleAngle,\n      titleOrient = _getHeaderProperties.titleOrient;\n\n  var headerChannel = getHeaderChannel(channel, titleOrient);\n  return {\n    name: \"\".concat(channel, \"-title\"),\n    type: 'group',\n    role: \"\".concat(headerChannel, \"-title\"),\n    title: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n      text: title\n    }, channel === 'row' ? {\n      orient: 'left'\n    } : {}), {\n      style: 'guide-title'\n    }), defaultHeaderGuideBaseline(titleAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP))\n  };\n}\nexport function defaultHeaderGuideAlign(headerChannel, angle) {\n  var anchor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'middle';\n\n  switch (anchor) {\n    case 'start':\n      return {\n        align: 'left'\n      };\n\n    case 'end':\n      return {\n        align: 'right'\n      };\n  }\n\n  var align = defaultLabelAlign(angle, headerChannel === 'row' ? 'left' : 'top');\n  return align ? {\n    align: align\n  } : {};\n}\nexport function defaultHeaderGuideBaseline(angle, channel) {\n  var baseline = defaultLabelBaseline(angle, channel === 'row' ? 'left' : 'top');\n  return baseline ? {\n    baseline: baseline\n  } : {};\n}\nexport function assembleHeaderGroups(model, channel) {\n  var layoutHeader = model.component.layoutHeaders[channel];\n  var groups = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = HEADER_TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var headerType = _step.value;\n\n      if (layoutHeader[headerType]) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = layoutHeader[headerType][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var headerCmpt = _step2.value;\n            groups.push(assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return groups;\n}\n\nfunction getSort(facetFieldDef, channel) {\n  var _a;\n\n  var sort = facetFieldDef.sort;\n\n  if (isSortField(sort)) {\n    return {\n      field: vgField(sort, {\n        expr: 'datum'\n      }),\n      order: (_a = sort.order, _a !== null && _a !== void 0 ? _a : 'ascending')\n    };\n  } else if (isArray(sort)) {\n    return {\n      field: sortArrayIndexField(facetFieldDef, channel, {\n        expr: 'datum'\n      }),\n      order: 'ascending'\n    };\n  } else {\n    return {\n      field: vgField(facetFieldDef, {\n        expr: 'datum'\n      }),\n      order: sort !== null && sort !== void 0 ? sort : 'ascending'\n    };\n  }\n}\n\nexport function assembleLabelTitle(facetFieldDef, channel, config) {\n  var _getHeaderProperties2 = getHeaderProperties(['format', 'labelAngle', 'labelAnchor', 'labelOrient', 'labelExpr'], facetFieldDef, config, channel),\n      format = _getHeaderProperties2.format,\n      labelAngle = _getHeaderProperties2.labelAngle,\n      labelAnchor = _getHeaderProperties2.labelAnchor,\n      labelOrient = _getHeaderProperties2.labelOrient,\n      labelExpr = _getHeaderProperties2.labelExpr;\n\n  var titleTextExpr = formatSignalRef(facetFieldDef, format, 'parent', config).signal;\n  var headerChannel = getHeaderChannel(channel, labelOrient);\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    text: {\n      signal: labelExpr ? replaceAll(replaceAll(labelExpr, 'datum.label', titleTextExpr), 'datum.value', vgField(facetFieldDef, {\n        expr: 'parent'\n      })) : titleTextExpr\n    }\n  }, channel === 'row' ? {\n    orient: 'left'\n  } : {}), {\n    style: 'guide-label',\n    frame: 'group'\n  }), defaultHeaderGuideBaseline(labelAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP));\n}\nexport function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt) {\n  var _a;\n\n  if (headerCmpt) {\n    var title = null;\n    var facetFieldDef = layoutHeader.facetFieldDef;\n    var config = model.config ? model.config : undefined;\n\n    if (facetFieldDef && headerCmpt.labels) {\n      var _getHeaderProperties3 = getHeaderProperties(['labelOrient'], facetFieldDef, config, channel),\n          labelOrient = _getHeaderProperties3.labelOrient; // Include label title in the header if orient aligns with the channel\n\n\n      if (channel === 'row' && !contains(['top', 'bottom'], labelOrient) || channel === 'column' && !contains(['left', 'right'], labelOrient)) {\n        title = assembleLabelTitle(facetFieldDef, channel, config);\n      }\n    }\n\n    var isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);\n    var axes = headerCmpt.axes;\n    var hasAxes = ((_a = axes) === null || _a === void 0 ? void 0 : _a.length) > 0;\n\n    if (title || hasAxes) {\n      var sizeChannel = channel === 'row' ? 'height' : 'width';\n      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n        name: model.getName(\"\".concat(channel, \"_\").concat(headerType)),\n        type: 'group',\n        role: \"\".concat(channel, \"-\").concat(headerType)\n      }, layoutHeader.facetFieldDef ? {\n        from: {\n          data: model.getName(channel + '_domain')\n        },\n        sort: getSort(facetFieldDef, channel)\n      } : {}), hasAxes && isFacetWithoutRowCol ? {\n        from: {\n          data: model.getName(\"facet_domain_\".concat(channel))\n        }\n      } : {}), title ? {\n        title: title\n      } : {}), headerCmpt.sizeSignal ? {\n        encode: {\n          update: _defineProperty({}, sizeChannel, headerCmpt.sizeSignal)\n        }\n      } : {}), hasAxes ? {\n        axes: axes\n      } : {});\n    }\n  }\n\n  return null;\n}\nvar LAYOUT_TITLE_BAND = {\n  column: {\n    start: 0,\n    end: 1\n  },\n  row: {\n    start: 1,\n    end: 0\n  }\n};\nexport function getLayoutTitleBand(titleAnchor, headerChannel) {\n  return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];\n}\nexport function assembleLayoutTitleBand(headerComponentIndex, config) {\n  var _a;\n\n  var titleBand = {};\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = FACET_CHANNELS[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var channel = _step3.value;\n      var headerComponent = headerComponentIndex[channel];\n\n      if ((_a = headerComponent) === null || _a === void 0 ? void 0 : _a.facetFieldDef) {\n        var _getHeaderProperties4 = getHeaderProperties(['titleAnchor', 'titleOrient'], headerComponent.facetFieldDef, config, channel),\n            titleAnchor = _getHeaderProperties4.titleAnchor,\n            titleOrient = _getHeaderProperties4.titleOrient;\n\n        var headerChannel = getHeaderChannel(channel, titleOrient);\n        var band = getLayoutTitleBand(titleAnchor, headerChannel);\n\n        if (band !== undefined) {\n          titleBand[headerChannel] = band;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return keys(titleBand).length > 0 ? titleBand : undefined;\n}\nexport function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {\n  var props = {};\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = properties[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var prop = _step4.value;\n\n      if (!propertiesMap[prop]) {\n        continue;\n      }\n\n      var value = getHeaderProperty(prop, facetFieldDef, config, channel);\n\n      if (value !== undefined) {\n        props[propertiesMap[prop]] = value;\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  return props;\n}","map":null,"metadata":{},"sourceType":"module"}