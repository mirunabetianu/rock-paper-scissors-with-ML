{"ast":null,"code":"import parseSignalUpdates from './signal-updates';\nimport { initScale, parseScale } from './scale';\nimport parseProjection from './projection';\nimport parseLegend from './legend';\nimport parseSignal from './signal';\nimport parseTitle from './title';\nimport parseData from './data';\nimport parseMark from './mark';\nimport parseAxis from './axis';\nimport { array } from 'vega-util';\nexport default function (spec, scope, preprocessed) {\n  var signals = array(spec.signals),\n      scales = array(spec.scales); // parse signal definitions, if not already preprocessed\n\n  if (!preprocessed) signals.forEach(function (_) {\n    return parseSignal(_, scope);\n  }); // parse cartographic projection definitions\n\n  array(spec.projections).forEach(function (_) {\n    return parseProjection(_, scope);\n  }); // initialize scale references\n\n  scales.forEach(function (_) {\n    return initScale(_, scope);\n  }); // parse data sources\n\n  array(spec.data).forEach(function (_) {\n    return parseData(_, scope);\n  }); // parse scale definitions\n\n  scales.forEach(function (_) {\n    return parseScale(_, scope);\n  }); // parse signal updates\n\n  (preprocessed || signals).forEach(function (_) {\n    return parseSignalUpdates(_, scope);\n  }); // parse axis definitions\n\n  array(spec.axes).forEach(function (_) {\n    return parseAxis(_, scope);\n  }); // parse mark definitions\n\n  array(spec.marks).forEach(function (_) {\n    return parseMark(_, scope);\n  }); // parse legend definitions\n\n  array(spec.legends).forEach(function (_) {\n    return parseLegend(_, scope);\n  }); // parse title, if defined\n\n  if (spec.title) parseTitle(spec.title, scope); // parse collected lambda (anonymous) expressions\n\n  scope.parseLambdas();\n  return scope;\n}","map":null,"metadata":{},"sourceType":"module"}