{"ast":null,"code":"import _classCallCheck from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { keys } from '../util';\nimport { assembleAxisSignals } from './axis/assemble';\nimport { parseLayerAxes } from './axis/parse';\nimport { parseData as _parseData } from './data/parse';\nimport { assembleLayoutSignals as _assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseLayerLayoutSize } from './layoutsize/parse';\nimport { assembleLegends as _assembleLegends } from './legend/assemble';\nimport { Model } from './model';\nimport { assembleLayerSelectionMarks } from './selection/assemble';\nimport { UnitModel } from './unit';\nexport var LayerModel =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(LayerModel, _Model);\n\n  function LayerModel(spec, parent, parentGivenName, parentGivenSize, repeater, config) {\n    var _this;\n\n    _classCallCheck(this, LayerModel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LayerModel).call(this, spec, 'layer', parent, parentGivenName, config, repeater, spec.resolve, spec.view));\n    var layoutSize = Object.assign(Object.assign(Object.assign({}, parentGivenSize), spec.width ? {\n      width: spec.width\n    } : {}), spec.height ? {\n      height: spec.height\n    } : {});\n    _this.children = spec.layer.map(function (layer, i) {\n      if (isLayerSpec(layer)) {\n        return new LayerModel(layer, _assertThisInitialized(_assertThisInitialized(_this)), _this.getName('layer_' + i), layoutSize, repeater, config);\n      } else if (isUnitSpec(layer)) {\n        return new UnitModel(layer, _assertThisInitialized(_assertThisInitialized(_this)), _this.getName('layer_' + i), layoutSize, repeater, config);\n      }\n\n      throw new Error(log.message.invalidSpec(layer));\n    });\n    return _this;\n  }\n\n  _createClass(LayerModel, [{\n    key: \"parseData\",\n    value: function parseData() {\n      this.component.data = _parseData(this);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var child = _step.value;\n          child.parseData();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"parseLayoutSize\",\n    value: function parseLayoutSize() {\n      parseLayerLayoutSize(this);\n    }\n  }, {\n    key: \"parseSelections\",\n    value: function parseSelections() {\n      var _this2 = this;\n\n      // Merge selections up the hierarchy so that they may be referenced\n      // across unit specs. Persist their definitions within each child\n      // to assemble signals which remain within output Vega unit groups.\n      this.component.selection = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var child = _step2.value;\n          child.parseSelections();\n          keys(child.component.selection).forEach(function (key) {\n            _this2.component.selection[key] = child.component.selection[key];\n          });\n        };\n\n        for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"parseMarkGroup\",\n    value: function parseMarkGroup() {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var child = _step3.value;\n          child.parseMarkGroup();\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"parseAxesAndHeaders\",\n    value: function parseAxesAndHeaders() {\n      parseLayerAxes(this);\n    }\n  }, {\n    key: \"assembleSelectionTopLevelSignals\",\n    value: function assembleSelectionTopLevelSignals(signals) {\n      return this.children.reduce(function (sg, child) {\n        return child.assembleSelectionTopLevelSignals(sg);\n      }, signals);\n    } // TODO: Support same named selections across children.\n\n  }, {\n    key: \"assembleSignals\",\n    value: function assembleSignals() {\n      return this.children.reduce(function (signals, child) {\n        return signals.concat(child.assembleSignals());\n      }, assembleAxisSignals(this));\n    }\n  }, {\n    key: \"assembleLayoutSignals\",\n    value: function assembleLayoutSignals() {\n      return this.children.reduce(function (signals, child) {\n        return signals.concat(child.assembleLayoutSignals());\n      }, _assembleLayoutSignals(this));\n    }\n  }, {\n    key: \"assembleSelectionData\",\n    value: function assembleSelectionData(data) {\n      return this.children.reduce(function (db, child) {\n        return child.assembleSelectionData(db);\n      }, data);\n    }\n  }, {\n    key: \"assembleTitle\",\n    value: function assembleTitle() {\n      var title = _get(_getPrototypeOf(LayerModel.prototype), \"assembleTitle\", this).call(this);\n\n      if (title) {\n        return title;\n      } // If title does not provide layer, look into children\n\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = this.children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var child = _step4.value;\n          title = child.assembleTitle();\n\n          if (title) {\n            return title;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"assembleLayout\",\n    value: function assembleLayout() {\n      return null;\n    }\n  }, {\n    key: \"assembleMarks\",\n    value: function assembleMarks() {\n      return assembleLayerSelectionMarks(this, this.children.flatMap(function (child) {\n        return child.assembleMarks();\n      }));\n    }\n  }, {\n    key: \"assembleLegends\",\n    value: function assembleLegends() {\n      return this.children.reduce(function (legends, child) {\n        return legends.concat(child.assembleLegends());\n      }, _assembleLegends(this));\n    }\n  }]);\n\n  return LayerModel;\n}(Model);","map":null,"metadata":{},"sourceType":"module"}