{"ast":null,"code":"import _slicedToArray from \"/Users/mirunabetianu/WebstormProjects/rps/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mirunabetianu/WebstormProjects/rps/src/components/Game/Game.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Command, CommandsContainer, Container, MoveContainer, Score, Title } from './elements';\nimport Move from './Move';\nimport { createStructuredSelector } from 'reselect';\nimport { selectComputerScore, selectIsPlaying, selectMove, selectPlayerScore } from '../../state/game/game.selector';\nimport { connect } from 'react-redux';\nimport { computerWin as _computerWin, pauseGame as _pauseGame, playerWin as _playerWin, resumeGame as _resumeGame, startGame as _startGame, stopGame as _stopGame } from '../../state/game/game.actions';\nimport moves from '../_shared/moves';\n\nvar createComputerMove = function createComputerMove() {\n  var computerRandomNumber = Math.floor(Math.random() * 3);\n\n  switch (computerRandomNumber) {\n    case 0:\n      return moves.Paper;\n\n    case 1:\n      return moves.Rock;\n\n    default:\n      return moves.Scissors;\n  }\n}; // 0 = player win; 1 = draw; 2 = computer win\n\n\nvar resultOfGame = function resultOfGame(playerMove, computerMove) {\n  if (playerMove === computerMove) {\n    return 1;\n  }\n\n  if (playerMove === moves.Scissors) {\n    if (computerMove === moves.Rock) {\n      return 2;\n    }\n\n    return 0;\n  }\n\n  if (playerMove === moves.Rock) {\n    if (computerMove === moves.Paper) {\n      return 2;\n    }\n\n    return 0;\n  }\n\n  if (playerMove === moves.Paper) {\n    if (computerMove === moves.Scissors) {\n      return 2;\n    }\n\n    return 0;\n  }\n};\n\nvar Game = function Game(_ref) {\n  var move = _ref.move,\n      computerScore = _ref.computerScore,\n      playerScore = _ref.playerScore,\n      isPlaying = _ref.isPlaying,\n      playerWin = _ref.playerWin,\n      computerWin = _ref.computerWin,\n      pauseGame = _ref.pauseGame,\n      resumeGame = _ref.resumeGame,\n      startGame = _ref.startGame,\n      stopGame = _ref.stopGame;\n  var seconds = 3;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      resultMessage = _useState2[0],\n      setResultMessage = _useState2[1];\n\n  var _useState3 = useState(seconds),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timeLeft = _useState4[0],\n      setTimeLeft = _useState4[1];\n\n  var _useState5 = useState(createComputerMove()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      computerMove = _useState6[0],\n      setComputerMove = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      gameStarted = _useState8[0],\n      setGameStarted = _useState8[1];\n\n  useEffect(function () {\n    if (!isPlaying) return;\n    if (!move) return;\n\n    if (timeLeft === -1) {\n      setTimeLeft(seconds);\n      setComputerMove(function () {\n        var c = createComputerMove();\n        var result = resultOfGame(move, c);\n\n        switch (result) {\n          case 0:\n            playerWin();\n            pauseGame();\n            setResultMessage('Player Wins!');\n            break;\n\n          case 2:\n            computerWin();\n            pauseGame();\n            setResultMessage('Computer Wins!');\n            break;\n\n          case 1:\n            setResultMessage('Draw!');\n            pauseGame();\n            break;\n\n          default:\n            return c;\n        }\n\n        return c;\n      });\n    }\n\n    var intervalId = setInterval(function () {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n    return function () {\n      return clearInterval(intervalId);\n    };\n  }, [timeLeft, isPlaying, move]);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"TIMER: 0\", timeLeft, \":00\"), React.createElement(MoveContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Move, {\n    selected: move,\n    title: 'Player',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(Score, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, playerScore, \" - \", computerScore, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), \" \", resultMessage), React.createElement(Move, {\n    selected: computerMove,\n    shuffle: isPlaying && move,\n    title: 'Computer',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(CommandsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, !gameStarted && React.createElement(Command, {\n    onClick: function onClick() {\n      startGame();\n      setGameStarted(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"START GAME\"), gameStarted && React.createElement(Command, {\n    onClick: function onClick() {\n      return resumeGame();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"NEW GAME\")));\n};\n\nvar mapStateToProps = createStructuredSelector({\n  move: selectMove,\n  computerScore: selectComputerScore,\n  playerScore: selectPlayerScore,\n  isPlaying: selectIsPlaying\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    pauseGame: function pauseGame() {\n      return dispatch(_pauseGame());\n    },\n    resumeGame: function resumeGame() {\n      return dispatch(_resumeGame());\n    },\n    playerWin: function playerWin() {\n      return dispatch(_playerWin());\n    },\n    computerWin: function computerWin() {\n      return dispatch(_computerWin());\n    },\n    startGame: function startGame() {\n      return dispatch(_startGame());\n    },\n    stopGame: function stopGame() {\n      return dispatch(_stopGame());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/mirunabetianu/WebstormProjects/rps/src/components/Game/Game.jsx"],"names":["React","useEffect","useState","Command","CommandsContainer","Container","MoveContainer","Score","Title","Move","createStructuredSelector","selectComputerScore","selectIsPlaying","selectMove","selectPlayerScore","connect","computerWin","pauseGame","playerWin","resumeGame","startGame","stopGame","moves","createComputerMove","computerRandomNumber","Math","floor","random","Paper","Rock","Scissors","resultOfGame","playerMove","computerMove","Game","move","computerScore","playerScore","isPlaying","seconds","resultMessage","setResultMessage","timeLeft","setTimeLeft","setComputerMove","gameStarted","setGameStarted","c","result","intervalId","setInterval","clearInterval","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Command, CommandsContainer, Container, MoveContainer, Score, Title } from './elements';\nimport Move from './Move';\nimport { createStructuredSelector } from 'reselect';\nimport { selectComputerScore, selectIsPlaying, selectMove, selectPlayerScore } from '../../state/game/game.selector';\nimport { connect } from 'react-redux';\nimport { computerWin, pauseGame, playerWin, resumeGame, startGame, stopGame } from '../../state/game/game.actions';\nimport moves from '../_shared/moves';\n\nconst createComputerMove = () => {\n  let computerRandomNumber = Math.floor(Math.random() * 3);\n  switch (computerRandomNumber) {\n    case 0:\n      return moves.Paper;\n    case 1:\n      return moves.Rock;\n    default:\n      return moves.Scissors;\n  }\n};\n\n// 0 = player win; 1 = draw; 2 = computer win\nconst resultOfGame = (playerMove, computerMove) => {\n  if (playerMove === computerMove) {\n    return 1;\n  }\n\n  if (playerMove === moves.Scissors) {\n    if (computerMove === moves.Rock) {\n      return 2;\n    }\n    return 0;\n  }\n\n  if (playerMove === moves.Rock) {\n    if (computerMove === moves.Paper) {\n      return 2;\n    }\n    return 0;\n  }\n\n  if (playerMove === moves.Paper) {\n    if (computerMove === moves.Scissors) {\n      return 2;\n    }\n    return 0;\n  }\n};\n\nconst Game = ({ move, computerScore, playerScore, isPlaying, playerWin, computerWin, pauseGame, resumeGame, startGame, stopGame }) => {\n  const seconds = 3;\n  const [resultMessage, setResultMessage] = useState('');\n  const [timeLeft, setTimeLeft] = useState(seconds);\n  const [computerMove, setComputerMove] = useState(createComputerMove());\n  const [gameStarted, setGameStarted] = useState(false);\n  useEffect(() => {\n    if (!isPlaying) return;\n    if (!move) return;\n    if (timeLeft === -1) {\n      setTimeLeft(seconds);\n      setComputerMove(() => {\n        const c = createComputerMove();\n        let result = resultOfGame(move, c);\n        switch (result) {\n          case 0:\n            playerWin();\n            pauseGame();\n            setResultMessage('Player Wins!');\n            break;\n          case 2:\n            computerWin();\n            pauseGame();\n            setResultMessage('Computer Wins!');\n            break;\n          case 1:\n            setResultMessage('Draw!');\n            pauseGame();\n            break;\n          default:\n            return c;\n        }\n        return c;\n      });\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timeLeft, isPlaying, move]);\n\n  return (\n    <Container>\n      <Title>TIMER: 0{timeLeft}:00</Title>\n      <MoveContainer>\n        <Move selected={move} title={'Player'} />\n        <Score>{playerScore} - {computerScore} <br /> {resultMessage}</Score>\n        <Move selected={computerMove} shuffle={isPlaying && move} title={'Computer'} />\n      </MoveContainer>\n      <CommandsContainer>\n        {!gameStarted && <Command onClick={() => {\n          startGame();\n          setGameStarted(true);\n        }}>START GAME</Command>}\n        {gameStarted && <Command onClick={() => resumeGame()}>NEW GAME</Command>}\n      </CommandsContainer>\n    </Container>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  move: selectMove,\n  computerScore: selectComputerScore,\n  playerScore: selectPlayerScore,\n  isPlaying: selectIsPlaying\n});\n\nconst mapDispatchToProps = dispatch => ({\n  pauseGame: () => dispatch(pauseGame()),\n  resumeGame: () => dispatch(resumeGame()),\n  playerWin: () => dispatch(playerWin()),\n  computerWin: () => dispatch(computerWin()),\n  startGame: () => dispatch(startGame()),\n  stopGame: () => dispatch(stopGame())\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}