{"ast":null,"code":"import { domCreate } from './util/dom';\nimport resolveItem from './util/resolveItem';\nimport { loader } from 'vega-loader';\n/**\n * Create a new Handler instance.\n * @param {object} [customLoader] - Optional loader instance for\n *   href URL sanitization. If not specified, a standard loader\n *   instance will be generated.\n * @param {function} [customTooltip] - Optional tooltip handler\n *   function for custom tooltip display.\n * @constructor\n */\n\nexport default function Handler(customLoader, customTooltip) {\n  this._active = null;\n  this._handlers = {};\n  this._loader = customLoader || loader();\n  this._tooltip = customTooltip || defaultTooltip;\n} // The default tooltip display handler.\n// Sets the HTML title attribute on the visualization container.\n\nfunction defaultTooltip(handler, event, item, value) {\n  handler.element().setAttribute('title', value || '');\n}\n\nvar prototype = Handler.prototype;\n/**\n * Initialize a new Handler instance.\n * @param {DOMElement} el - The containing DOM element for the display.\n * @param {Array<number>} origin - The origin of the display, in pixels.\n *   The coordinate system will be translated to this point.\n * @param {object} [obj] - Optional context object that should serve as\n *   the \"this\" context for event callbacks.\n * @return {Handler} - This handler instance.\n */\n\nprototype.initialize = function (el, origin, obj) {\n  this._el = el;\n  this._obj = obj || null;\n  return this.origin(origin);\n};\n/**\n * Returns the parent container element for a visualization.\n * @return {DOMElement} - The containing DOM element.\n */\n\n\nprototype.element = function () {\n  return this._el;\n};\n/**\n * Returns the scene element (e.g., canvas or SVG) of the visualization\n * Subclasses must override if the first child is not the scene element.\n * @return {DOMElement} - The scene (e.g., canvas or SVG) element.\n */\n\n\nprototype.canvas = function () {\n  return this._el && this._el.firstChild;\n};\n/**\n * Get / set the origin coordinates of the visualization.\n */\n\n\nprototype.origin = function (origin) {\n  if (arguments.length) {\n    this._origin = origin || [0, 0];\n    return this;\n  } else {\n    return this._origin.slice();\n  }\n};\n/**\n * Get / set the scenegraph root.\n */\n\n\nprototype.scene = function (scene) {\n  if (!arguments.length) return this._scene;\n  this._scene = scene;\n  return this;\n};\n/**\n * Add an event handler. Subclasses should override this method.\n */\n\n\nprototype.on = function ()\n/*type, handler*/\n{};\n/**\n * Remove an event handler. Subclasses should override this method.\n */\n\n\nprototype.off = function ()\n/*type, handler*/\n{};\n/**\n * Utility method for finding the array index of an event handler.\n * @param {Array} h - An array of registered event handlers.\n * @param {string} type - The event type.\n * @param {function} handler - The event handler instance to find.\n * @return {number} - The handler's array index or -1 if not registered.\n */\n\n\nprototype._handlerIndex = function (h, type, handler) {\n  for (var i = h ? h.length : 0; --i >= 0;) {\n    if (h[i].type === type && (!handler || h[i].handler === handler)) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n/**\n * Returns an array with registered event handlers.\n * @param {string} [type] - The event type to query. Any annotations\n *   are ignored; for example, for the argument \"click.foo\", \".foo\" will\n *   be ignored and the method returns all \"click\" handlers. If type is\n *   null or unspecified, this method returns handlers for all types.\n * @return {Array} - A new array containing all registered event handlers.\n */\n\n\nprototype.handlers = function (type) {\n  var h = this._handlers,\n      a = [],\n      k;\n\n  if (type) {\n    a.push.apply(a, h[this.eventName(type)]);\n  } else {\n    for (k in h) {\n      a.push.apply(a, h[k]);\n    }\n  }\n\n  return a;\n};\n/**\n * Parses an event name string to return the specific event type.\n * For example, given \"click.foo\" returns \"click\"\n * @param {string} name - The input event type string.\n * @return {string} - A string with the event type only.\n */\n\n\nprototype.eventName = function (name) {\n  var i = name.indexOf('.');\n  return i < 0 ? name : name.slice(0, i);\n};\n/**\n * Handle hyperlink navigation in response to an item.href value.\n * @param {Event} event - The event triggering hyperlink navigation.\n * @param {Item} item - The scenegraph item.\n * @param {string} href - The URL to navigate to.\n */\n\n\nprototype.handleHref = function (event, item, href) {\n  this._loader.sanitize(href, {\n    context: 'href'\n  }).then(function (opt) {\n    var e = new MouseEvent(event.type, event),\n        a = domCreate(null, 'a');\n\n    for (var name in opt) {\n      a.setAttribute(name, opt[name]);\n    }\n\n    a.dispatchEvent(e);\n  }).catch(function () {\n    /* do nothing */\n  });\n};\n/**\n * Handle tooltip display in response to an item.tooltip value.\n * @param {Event} event - The event triggering tooltip display.\n * @param {Item} item - The scenegraph item.\n * @param {boolean} show - A boolean flag indicating whether\n *   to show or hide a tooltip for the given item.\n */\n\n\nprototype.handleTooltip = function (event, item, show) {\n  if (item && item.tooltip != null) {\n    item = resolveItem(item, event, this.canvas(), this._origin);\n    var value = show && item && item.tooltip || null;\n\n    this._tooltip.call(this._obj, this, event, item, value);\n  }\n};\n/**\n * Returns the size of a scenegraph item and its position relative\n * to the viewport.\n * @param {Item} item - The scenegraph item.\n * @return {object} - A bounding box object (compatible with the\n *   DOMRect type) consisting of x, y, width, heigh, top, left,\n *   right, and bottom properties.\n */\n\n\nprototype.getItemBoundingClientRect = function (item) {\n  if (!(el = this.canvas())) return;\n  var el,\n      rect = el.getBoundingClientRect(),\n      origin = this._origin,\n      itemBounds = item.bounds,\n      x = itemBounds.x1 + origin[0] + rect.left,\n      y = itemBounds.y1 + origin[1] + rect.top,\n      w = itemBounds.width(),\n      h = itemBounds.height(); // translate coordinate for each parent group\n\n  while (item.mark && (item = item.mark.group)) {\n    x += item.x || 0;\n    y += item.y || 0;\n  } // return DOMRect-compatible bounding box\n\n\n  return {\n    x: x,\n    y: y,\n    width: w,\n    height: h,\n    left: x,\n    top: y,\n    right: x + w,\n    bottom: y + h\n  };\n};","map":null,"metadata":{},"sourceType":"module"}