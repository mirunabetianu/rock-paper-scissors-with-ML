{"ast":null,"code":"import { createMeasure, compileMeasures, measureName } from './AggregateOps';\nimport TupleStore from './TupleStore';\nimport { WindowOp, WindowOps } from './WindowOps';\nimport { accessorFields, accessorName, array, error, hasOwnProperty } from 'vega-util';\nexport default function WindowState(_) {\n  var self = this,\n      ops = array(_.ops),\n      fields = array(_.fields),\n      params = array(_.params),\n      as = array(_.as),\n      outputs = self.outputs = [],\n      windows = self.windows = [],\n      inputs = {},\n      map = {},\n      countOnly = true,\n      counts = [],\n      measures = [];\n\n  function visitInputs(f) {\n    array(accessorFields(f)).forEach(function (_) {\n      return inputs[_] = 1;\n    });\n  }\n\n  visitInputs(_.sort);\n  ops.forEach(function (op, i) {\n    var field = fields[i],\n        mname = accessorName(field),\n        name = measureName(op, mname, as[i]);\n    visitInputs(field);\n    outputs.push(name); // Window operation\n\n    if (hasOwnProperty(WindowOps, op)) {\n      windows.push(WindowOp(op, fields[i], params[i], name));\n    } // Aggregate operation\n    else {\n        if (field == null && op !== 'count') {\n          error('Null aggregate field specified.');\n        }\n\n        if (op === 'count') {\n          counts.push(name);\n          return;\n        }\n\n        countOnly = false;\n        var m = map[mname];\n\n        if (!m) {\n          m = map[mname] = [];\n          m.field = field;\n          measures.push(m);\n        }\n\n        m.push(createMeasure(op, name));\n      }\n  });\n\n  if (counts.length || measures.length) {\n    self.cell = cell(measures, counts, countOnly);\n  }\n\n  self.inputs = Object.keys(inputs);\n}\nvar prototype = WindowState.prototype;\n\nprototype.init = function () {\n  this.windows.forEach(function (_) {\n    return _.init();\n  });\n  if (this.cell) this.cell.init();\n};\n\nprototype.update = function (w, t) {\n  var self = this,\n      cell = self.cell,\n      wind = self.windows,\n      data = w.data,\n      m = wind && wind.length,\n      j;\n\n  if (cell) {\n    for (j = w.p0; j < w.i0; ++j) {\n      cell.rem(data[j]);\n    }\n\n    for (j = w.p1; j < w.i1; ++j) {\n      cell.add(data[j]);\n    }\n\n    cell.set(t);\n  }\n\n  for (j = 0; j < m; ++j) {\n    wind[j].update(w, t);\n  }\n};\n\nfunction cell(measures, counts, countOnly) {\n  measures = measures.map(function (m) {\n    return compileMeasures(m, m.field);\n  });\n  var cell = {\n    num: 0,\n    agg: null,\n    store: false,\n    count: counts\n  };\n\n  if (!countOnly) {\n    var n = measures.length,\n        a = cell.agg = Array(n),\n        i = 0;\n\n    for (; i < n; ++i) {\n      a[i] = new measures[i](cell);\n    }\n  }\n\n  if (cell.store) {\n    var store = cell.data = new TupleStore();\n  }\n\n  cell.add = function (t) {\n    cell.num += 1;\n    if (countOnly) return;\n    if (store) store.add(t);\n\n    for (var _i = 0; _i < n; ++_i) {\n      a[_i].add(a[_i].get(t), t);\n    }\n  };\n\n  cell.rem = function (t) {\n    cell.num -= 1;\n    if (countOnly) return;\n    if (store) store.rem(t);\n\n    for (var _i2 = 0; _i2 < n; ++_i2) {\n      a[_i2].rem(a[_i2].get(t), t);\n    }\n  };\n\n  cell.set = function (t) {\n    var i, n; // consolidate stored values\n\n    if (store) store.values(); // update tuple properties\n\n    for (i = 0, n = counts.length; i < n; ++i) {\n      t[counts[i]] = cell.num;\n    }\n\n    if (!countOnly) for (i = 0, n = a.length; i < n; ++i) {\n      a[i].set(t);\n    }\n  };\n\n  cell.init = function () {\n    cell.num = 0;\n    if (store) store.reset();\n\n    for (var _i3 = 0; _i3 < n; ++_i3) {\n      a[_i3].init();\n    }\n  };\n\n  return cell;\n}","map":null,"metadata":{},"sourceType":"module"}