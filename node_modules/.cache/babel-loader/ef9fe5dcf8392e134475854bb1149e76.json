{"ast":null,"code":"import { isBinned, isBinning } from '../../bin';\nimport { isContinuous, isFieldDef } from '../../channeldef';\nimport { isAggregate } from '../../encoding';\nimport * as log from '../../log';\nimport { AREA, BAR, CIRCLE, IMAGE, isMarkDef, LINE, POINT, RECT, RULE, SQUARE, TEXT, TICK } from '../../mark';\nimport { QUANTITATIVE, TEMPORAL } from '../../type';\nimport { contains, getFirstDefined } from '../../util';\nimport { getMarkConfig } from '../common';\nexport function normalizeMarkDef(mark, encoding, config, _ref) {\n  var graticule = _ref.graticule;\n\n  var _a, _b;\n\n  var markDef = isMarkDef(mark) ? Object.assign({}, mark) : {\n    type: mark\n  }; // set orient, which can be overridden by rules as sometimes the specified orient is invalid.\n\n  var specifiedOrient = (_a = markDef.orient, _a !== null && _a !== void 0 ? _a : getMarkConfig('orient', markDef, config));\n  markDef.orient = orient(markDef.type, encoding, specifiedOrient);\n\n  if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {\n    log.warn(log.message.orientOverridden(markDef.orient, specifiedOrient));\n  } // set opacity and filled if not specified in mark config\n\n\n  var specifiedOpacity = getFirstDefined(markDef.opacity, getMarkConfig('opacity', markDef, config));\n\n  if (specifiedOpacity === undefined) {\n    markDef.opacity = opacity(markDef.type, encoding);\n  }\n\n  var specifiedFilled = markDef.filled;\n\n  if (specifiedFilled === undefined) {\n    markDef.filled = graticule ? false : filled(markDef, config);\n  } // set cursor, which should be pointer if href channel is present unless otherwise specified\n\n\n  var specifiedCursor = (_b = markDef.cursor, _b !== null && _b !== void 0 ? _b : getMarkConfig('cursor', markDef, config));\n\n  if (specifiedCursor === undefined) {\n    markDef.cursor = cursor(markDef, encoding, config);\n  }\n\n  return markDef;\n}\n\nfunction cursor(markDef, encoding, config) {\n  if (encoding.href || markDef.href || getMarkConfig('href', markDef, config)) {\n    return 'pointer';\n  }\n\n  return markDef.cursor;\n}\n\nfunction opacity(mark, encoding) {\n  if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {\n    // point-based marks\n    if (!isAggregate(encoding)) {\n      return 0.7;\n    }\n  }\n\n  return undefined;\n}\n\nfunction filled(markDef, config) {\n  var filledConfig = getMarkConfig('filled', markDef, config);\n  var mark = markDef.type;\n  return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);\n}\n\nfunction orient(mark, encoding, specifiedOrient) {\n  switch (mark) {\n    case POINT:\n    case CIRCLE:\n    case SQUARE:\n    case TEXT:\n    case RECT:\n    case IMAGE:\n      // orient is meaningless for these marks.\n      return undefined;\n  }\n\n  var x = encoding.x,\n      y = encoding.y,\n      x2 = encoding.x2,\n      y2 = encoding.y2;\n\n  switch (mark) {\n    case BAR:\n      if (isFieldDef(x) && (isBinned(x.bin) || isFieldDef(y) && y.aggregate && !x.aggregate)) {\n        return 'vertical';\n      }\n\n      if (isFieldDef(y) && (isBinned(y.bin) || isFieldDef(x) && x.aggregate && !y.aggregate)) {\n        return 'horizontal';\n      }\n\n      if (y2 || x2) {\n        // Ranged bar does not always have clear orientation, so we allow overriding\n        if (specifiedOrient) {\n          return specifiedOrient;\n        } // If y is range and x is non-range, non-bin Q, y is likely a prebinned field\n\n\n        if (!x2 && isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin)) {\n          return 'horizontal';\n        } // If x is range and y is non-range, non-bin Q, x is likely a prebinned field\n\n\n        if (!y2 && isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin)) {\n          return 'vertical';\n        }\n      }\n\n    // falls through\n\n    case RULE:\n      // return undefined for line segment rule and bar with both axis ranged\n      if (x2 && y2) {\n        return undefined;\n      }\n\n    // falls through\n\n    case AREA:\n      // If there are range for both x and y, y (vertical) has higher precedence.\n      if (y2) {\n        if (isFieldDef(y) && isBinned(y.bin)) {\n          return 'horizontal';\n        } else {\n          return 'vertical';\n        }\n      } else if (x2) {\n        if (isFieldDef(x) && isBinned(x.bin)) {\n          return 'vertical';\n        } else {\n          return 'horizontal';\n        }\n      } else if (mark === RULE) {\n        if (x && !y) {\n          return 'vertical';\n        } else if (y && !x) {\n          return 'horizontal';\n        }\n      }\n\n    // falls through\n\n    case LINE:\n    case TICK:\n      {\n        // Tick is opposite to bar, line, area and never have ranged mark.\n        var xIsContinuous = isFieldDef(x) && isContinuous(x);\n        var yIsContinuous = isFieldDef(y) && isContinuous(y);\n\n        if (xIsContinuous && !yIsContinuous) {\n          return mark !== 'tick' ? 'horizontal' : 'vertical';\n        } else if (!xIsContinuous && yIsContinuous) {\n          return mark !== 'tick' ? 'vertical' : 'horizontal';\n        } else if (xIsContinuous && yIsContinuous) {\n          var xDef = x; // we can cast here since they are surely fieldDef\n\n          var yDef = y;\n          var xIsTemporal = xDef.type === TEMPORAL;\n          var yIsTemporal = yDef.type === TEMPORAL; // temporal without timeUnit is considered continuous, but better serves as dimension\n\n          if (xIsTemporal && !yIsTemporal) {\n            return mark !== 'tick' ? 'vertical' : 'horizontal';\n          } else if (!xIsTemporal && yIsTemporal) {\n            return mark !== 'tick' ? 'horizontal' : 'vertical';\n          }\n\n          if (!xDef.aggregate && yDef.aggregate) {\n            return mark !== 'tick' ? 'vertical' : 'horizontal';\n          } else if (xDef.aggregate && !yDef.aggregate) {\n            return mark !== 'tick' ? 'horizontal' : 'vertical';\n          }\n\n          if (specifiedOrient) {\n            // When ambiguous, use user specified one.\n            return specifiedOrient;\n          }\n\n          return 'vertical';\n        } else {\n          // Discrete x Discrete case\n          if (specifiedOrient) {\n            // When ambiguous, use user specified one.\n            return specifiedOrient;\n          }\n\n          return undefined;\n        }\n      }\n  }\n\n  return 'vertical';\n}","map":null,"metadata":{},"sourceType":"module"}